<?php
/**
 * Allows payment via EduPay
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */

module_load_include('inc', 'uc_edupay', 'includes/uc_edupay_rules_default');

/**
 * Implementation of hook_menu(), called to generate menus when module setup at admin/build/modules is saved
 */
function uc_edupay_menu() {
  $items = array();
  $items['admin/settings/eduerp/transaction/edupay'] = array(
    'title' => t('Edupay settings'),
    'description' => t('Configure settings for edupay'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_edupay_config_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -2,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


/**
 * Handles 'admin/settings/eduerp/transaction/edupay' menu, Form to configure settings for EduPay Communication
 *
 * @uses uc_edupay_config_form_validate()
 * @uses uc_edupay_config_form_submit()
 * @return array Drupal Form
 */
function uc_edupay_config_form($form_state) {
  $form['uc_edupay_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edupay remote site settings (an Edupay account is needed for this, please e-mail accounts@edupay.com.ng for one)'),
  );
  $form['uc_edupay_config']['uc_edupay_transaction_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay Transaction Endpoint'),
    '#description' => t('Enter the Edupay URL where transactions will be processed.'),
    '#default_value' => variable_get('uc_edupay_transaction_url', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['uc_edupay_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay username'),
    '#description' => t('Enter the Edupay User Name.'),
    '#default_value' => variable_get('uc_edupay_username', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['uc_edupay_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Edupay password'),
    '#description' => t('Enter the Edupay Password.'),
    '#default_value' => '*******',
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_address'] = array(
    '#type' => 'textfield',
    '#title' => t('University Address'),
    '#description' => t('Enter the Universities Postal Address.'),
    '#default_value' => variable_get('eduerp_institution_address', ''),
    '#maxlength' => 300,
    '#required' => TRUE
  );

  $form['uc_edupay_config']['eduerp_institution_bank_list'] = array(
    '#type' => 'textfield',
    '#title' => t('List of Banks'),
    '#description' => t('Enter the List of Banks where payment can be made (put an "or" between them).'),
    '#default_value' => variable_get('eduerp_institution_bank_list', ''),
    '#maxlength' => 300,
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_bank_details'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Account Names & Numbers'),
    '#description' => t('Enter the Bank account Names & Numbers for each Bank (for invoices).'),
    '#default_value' => variable_get('eduerp_institution_bank_details', ''),
    '#maxlength' => 300,
    '#required' => TRUE
  );

  $form['uc_edupay_config']['eduerp_institution_bank_1_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 1 Name'),
    '#default_value' => variable_get('eduerp_institution_bank_1_name', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_bank_1_account_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 1 Account Name'),
    '#default_value' => variable_get('eduerp_institution_bank_1_account_name', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_bank_1_account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 1 Account Number'),
    '#default_value' => variable_get('eduerp_institution_bank_1_account_number', ''),
    '#required' => TRUE
  );

  $form['uc_edupay_config']['eduerp_institution_bank_2_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 2 Name'),
    '#default_value' => variable_get('eduerp_institution_bank_2_name', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_bank_2_account_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 2 Account Name'),
    '#default_value' => variable_get('eduerp_institution_bank_2_account_name', ''),
    '#required' => TRUE
  );
  $form['uc_edupay_config']['eduerp_institution_bank_2_account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank 2 Account Number'),
    '#default_value' => variable_get('eduerp_institution_bank_2_account_number', ''),
    '#required' => TRUE
  );

  $form['uc_edupay_config']['eduerp_bank_transaction_charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Transaction Charge (must include currency e.g. NGN)'),
    '#default_value' => variable_get('eduerp_bank_transaction_charge', ''),
    '#required' => TRUE
  );

  $form['submit'] = array('#type' => 'submit', '#value' => 'Submit');
  //return system_settings_form($form);

  return $form;
}


/**
 * validate hook for {@link uc_edupay_config_form()}
 */
function uc_edupay_config_form_validate($form, &$form_state) {
  if(isset($form_state['values']['token_url'])) {
    if(!valid_url($form_state['values']['token_url'], TRUE)) {
      form_error($form['uc_edupay_config']['token_url'], t('The token endpoint url is invalid.'));
    }
  }
  if(isset($form_state['values']['transaction_url'])) {
    if(!valid_url($form_state['values']['transaction_url'], TRUE)) {
      form_error($form['uc_edupay_config']['transaction_url'], t('The transaction endpoint url is invalid.'));
    }
  }
  $pwmd5 = variable_get('uc_edupay_password_md5', '');
  if (empty($pwmd5) && $form_state['values']['uc_edupay_password'] == '*******') {
    form_error($form['uc_edupay_config']['uc_edupay_password'], t('You must enter a password.'));
  }

  return $form;
}


/**
 * submit hook for {@link uc_edupay_config_form()}
 */
function uc_edupay_config_form_submit($form, &$form_state) {
  variable_set('uc_edupay_transaction_url', $form_state['values']['uc_edupay_transaction_url']);
  variable_set('uc_edupay_username', $form_state['values']['uc_edupay_username']);
  if ($form_state['values']['uc_edupay_password'] != '*******') {
    variable_set('uc_edupay_password_md5', md5($form_state['values']['uc_edupay_password']));
  }
  variable_set('eduerp_institution_address', $form_state['values']['eduerp_institution_address']);

  variable_set('eduerp_institution_bank_list', $form_state['values']['eduerp_institution_bank_list']);
  variable_set('eduerp_institution_bank_details', $form_state['values']['eduerp_institution_bank_details']);

  variable_set('eduerp_institution_bank_1_name', $form_state['values']['eduerp_institution_bank_1_name']);
  variable_set('eduerp_institution_bank_1_account_name', $form_state['values']['eduerp_institution_bank_1_account_name']);
  variable_set('eduerp_institution_bank_1_account_number', $form_state['values']['eduerp_institution_bank_1_account_number']);

  variable_set('eduerp_institution_bank_2_name', $form_state['values']['eduerp_institution_bank_2_name']);
  variable_set('eduerp_institution_bank_2_account_name', $form_state['values']['eduerp_institution_bank_2_account_name']);
  variable_set('eduerp_institution_bank_2_account_number', $form_state['values']['eduerp_institution_bank_2_account_number']);

  variable_set('eduerp_bank_transaction_charge', $form_state['values']['eduerp_bank_transaction_charge']);
  $text = variable_get('locale_custom_strings_en', '');
  // Replace the Transaction Charge in the Custom Translation String
  $text['Order information will be sent to your account e-mail listed below.'] = preg_replace('/incur an additional .* transaction charge/',
    'incur an additional ' . variable_get('eduerp_bank_transaction_charge', '') . ' transaction charge',
    $text['Order information will be sent to your account e-mail listed below.']);
  variable_set('locale_custom_strings_en', $text);
}


/**
 * Implements hook_form_alter()
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 *
 * @author Kayode odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'uc_cart_checkout_form':
      if(variable_get('uc_edupay_payment_method', 'edupay')) {
          $form['panes']['payment']['payment_method']['#default_value'] = 'edupay';
      }
      break;

    case 'uc_cart_checkout_review_form':
      $order_id = intval($_SESSION['cart_order']);
      if($order_id > 0) {
        $order = uc_order_load($order_id);

        if ($order->payment_method == 'edupay') {
          $form['#prefix'] = '<table id="edupay-review-table"><tr><td>';
          $form['#suffix'] = '<td>' . drupal_get_form('uc_edupay_invoice_form', $order) . '</td></td></tr></table>';
        }
      }
      break;
    case 'uc_cart_view_form':
      break;
  }
}


/**
 * Implements hook_tapir_table_alter
 */
function uc_edupay_tapir_table_alter(&$table, $table_id) {
  if($table_id == 'uc_cart_view_table') {
    // hook_cart_fees_type
    foreach(module_implements('cart_fees_type') as $module) {
      $types = module_invoke($module, 'cart_fees_type');
    }
    foreach($types as $type){
      if($type == 'fees') {
        $table['#columns']['remove']['access'] = FALSE;
      }
    }
  }
}


/**
 * Implements hook_cart_fees_type
 */
function uc_edupay_cart_fees_type() {
  $cart_items = uc_cart_get_contents();
  foreach($cart_items as $key => $value) {
    $types[$key] = $value->data['type'];
  }
  return $types;
}


/**
 * implements hook_cart_item, adds text to an item which has a Scholarship
 */
function uc_edupay_cart_item($op, &$item){
  switch($op) {
    case 'load':
      $fees_type = EDUERP_FEES_NORMAL;
      if($item->data['type'] == $fees_type){

        if($item->data['has_scholarship'] == HAS_SCHOLARSHIP) {
          $text = t('Scholarship Applicable');
          $item->title = $item->title . ' ' . $text;
        }
      }
      break;
  }
}


/**
 * implements hook_uc_price_handler, add uc_edupay_fees_price_alter() and uc_edupay_fees_price_handler_format() as callbacks
 */
function uc_edupay_uc_price_handler() {
  return array(
    'alter' => array(
      'title' => t('Modify Scholarship price'),
      'description' => t('Round the price to zero if Fees include Scholarship'),
      'callback' => 'uc_edupay_fees_price_alter'
    ),
    'format' => array(
      'title' => t('Modify Scholarship price'),
      'description' => t('Alter the price in view based on Fees item options'),
      'callback' => 'uc_edupay_fees_price_handler_format',
    ),
  );
}


/**
 * Callback to set Price to zero for an item which has a Scholarship
 */
function uc_edupay_fees_price_alter(&$price_info, &$context, &$options) {
  $items = uc_cart_get_contents();

  foreach ($items as $key => $item) {
    if($item->data['type'] == EDUERP_FEES_NORMAL) {
      if($item->data['has_scholarship'] == HAS_SCHOLARSHIP) {
        $item->price = $item->price * 0;
      }
    }
  }
}


/**
 * Callback, not needed?
 */
function uc_edupay_fees_price_handler_format($price, $options) {
}


/**
 * Not used
 *
 * @deprecated
 */
function uc_eduerp_fees_instalment() {
}


/**
 * Implements hook_theme()
 */
function uc_edupay_theme(){
  return array(
    'eduerp_fees_cart_title' => array(
      'arguments' => array('title' => NULL, 'text' => NULL),
    ),
    'eduerp_cart_review_table' => array(
      'arguments' => array('contents' => NULL)
    ),
    'eduerp_fees_price_symbol' => array(
      'arguments' => array('item' => NULL)
    ),
  );
}


/**
 * Themes the cart item title
 */
function theme_eduerp_fees_cart_title($title, $text, $context = NULL) {
  if($context == 'scholarship') {
    // do scholarship specific theming
    $output = $title . ' ' . "<span class='cart-scholarship-text' style='color:#CE1B0F'><strong>$text</strong></span>";
  }
  else {
    $output = $title . ' ' . "<span style='color:#CE1B0F'><strong>$text</strong></span>";
  }
  return $output;
}


/**
 * Themes the Price Symbol
 */
function theme_eduerp_fees_price_symbol($item) {
  $output = "<span><strikethrough>N<strikethrough></span>" + $item;
  return $output;
}


/**
 * Not used
 *
 * @deprecated
 */
function uc_edupay_load_price(){
}


/**
 * Implements hook_cart_pane, not needed?
 */
function uc_edupay_cart_pane($items) {
}


/**
 * Implements hook_product_description, not needed?
 */
function uc_edupay_product_description($product) {
}


/**
 * Implements hook_payment_method()
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_payment_method() {
  $methods[] = array(
    'id' => 'edupay',
    'name' => t('edupay'),
    'title' => t('Edupay'),
    //'review' => variable_get('uc_2checkout_check', FALSE) ? t('Credit card/eCheck') : t('Credit card'),
    'desc' => t('Payment via edupay web service'),
    'callback' => 'uc_payment_method_edupay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/**
 * Adds edupay to ubercart payment settings form
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_payment_method_edupay($op, &$arg1) {

  switch($op) {
    // create some settings here that might be useful in cart-details op
    case 'settings':
      // This is payment method specific settings at admin/store/settings/payment/edit/methods
      $form['uc_edupay_payment_method'] = array(
        '#type' => 'checkbox',
        '#title' => t('Make edupay selected by default when checking out your order'),
        '#default_value' => variable_get('uc_edupay_payment_method', 'edupay'),
      );
      return $form;
    case 'cart-details':
    case 'cart-process': //This happens when Review Order is clicked
    case 'cart-review': // display json output response here
    case 'order-view': // display receipt to student here
  }
}


/**
 * Generates Invoice
 *
 * @param array $form_state
 * @param stdClass $order
 * @return array Drupal Form
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_form($form_state, $order) {

  $form['pdflink'] = array(
    '#type' => 'hidden',
    '#value' => 'invoice/pdf/' . $order->order_id,
  );

  // store returned js value in this hidden field
  $form['do_pdfinvoice'] = array(
    '#type' => 'hidden',
  );

  $form['hidden_order'] = array(
      '#type' => 'hidden',
      '#value' => $order,
  );
  // Generate invoice
  // Allow invoice to be emailed to user
  $form['invoice'] = array();

  drupal_add_js(drupal_get_path('module', 'uc_edupay') .'/uc_edupay.js');

      $invoice_form_settings = array(
        'pdflink' => $form['pdflink']['#value'],
      );

      //add the variable that contains the link to drupal_add_js
      //stores $invoice_form_settings into js setting
      drupal_add_js(array('uc_edupay' => $invoice_form_settings), 'setting');

  $form['invoice']['gen_invoice'] = array(
    //'#value' => '<div>' . l(t('Save Invoice'), "#", array('attributes' => array('class' => 'invoice-submit'))) . '</div>'
    '#value' => '<div>' . '<a href="javascript:void" class="invoice-submit">Save Invoice</a></div>'
  );

  return $form;
}


/**
 * submit hook for 'uc_edupay_invoice', is this used?
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_invoice_submit($form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Save Invoice'):
      if (isset($form_state['values']['gen_invoice'])) {
        $form_state['storage']['pdflink'] = $form_state['values']['pdflink'];
        return TRUE;
      }
      break;
  }
}


/**
 * Retrieves order items and passes it to uc_edupay_service_add, is this used?
 *
 * @param array $form_state
 * @param stdClass $order
 * @return $form array
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_form($form_state, $order) {

  if(!isset($edupay_data)) {
    $edupay_data = $order->data->edupay_data;
  }

  $unserialized = unserialize($edupay_data);

  if(!isset($order))

  $data = array(
    'transaction_id' => $edupay_data['transaction_id'],
    'total' => uc_price($order->order_total, $context, $options),
    'cart_order_id' => $order->order_id,
    'pay_method' => isset($order->payment_method) ? $order->payment_method : 'edupay',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order')
  );

  return $form;
}


/**
 * Implementation of hook_ajax_types(), Ajaxify the button to generate the invoice, Not used?
 *
 * @link http://drupal.org/project/ajax
 * @deprecated
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_ajax_types(&$types) {
  $id = 'uc_edupay_invoice_form';
  $types[$id] = t('Edupay: Generate Invoice');
  return TRUE;
}


/**
 * Implementation of hook_ctools_plugin_api().
 */
function uc_edupay_ctools_plugin_api($module, $api) {
  if ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
}


/**
 * Send HTTP request to EduPay (or if this failes Queue for later handling by cron), (if Total is Zero do not do HTTP request)
 *
 * @uses _uc_edupay_fees_order_items()
 * @param stdClass $order
 */
function _uc_edupay_process_order_request($order) {
  global $user;
  global $base_url;

  $student_profile = new UserProfile($user->uid);

  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  $sql = "SELECT field_programme_name_value FROM {content_type_program} WHERE nid=%d";
  $result = db_query($sql, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);

  $order->products = _uc_edupay_fees_order_items($order);
  $products = $order->products;
  $_SESSION['eduerp_fees_order'] = $products['fees'];

  $first = TRUE;
  $fees = array();

  $total_amount = 0.0;
  foreach($products['fees'] as $product) {
    $total_amount += $product['amount'];

    if ($first) {
      $order_parm = array(
        'order_id' => $product['order_id'],
        'transaction_token' => $product['transaction_token'],
        'full_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($studentname)),
        'matriculation_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($user->name)),
        'total_amount' => 0.0,
        'currency' => 'NGN',
        'timeout' => (int)$product['timeout'],
        'programme' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($row->field_programme_name_value)),
        'session' => $product['session'],
        'banks' => array(
          array(
            'name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_name', ''))),
            'account_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_account_name', ''))),
            'account_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_account_number', ''))),
          ),
          array(
            'name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_name', ''))),
            'account_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_account_name', ''))),
            'account_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_account_number', ''))),
          ),
        ),
      );

      $callback_url = $base_url . '/edupay/callback';

      $callback_data = array(
        'uid' => (int)$product['uid']
      );

      $first = FALSE;
    }

    $fees[] = array(
      'title' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($product['title'])),
      'amount' => 0.0 + $product['amount'],
      'currency' => 'NGN'
    );
  }
  $order_parm['total_amount'] = $total_amount;

  //dsm(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));//ab
  //ab if (FALSE) {//ab}
  if ($total_amount > 0.0) {
    $_SESSION['edupay_total_amount_zero'] = FALSE;

    // Try to send POST immediately, if this does not work, we will queue
    $data = drupal_to_js(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));

    $headers = array(
      'Authorization' => 'Basic ' . base64_encode(variable_get('uc_edupay_username', '') . ':' . variable_get('uc_edupay_password_md5', '')),
      'Content-Type' => 'application/json');
    $result = drupal_http_request(variable_get('uc_edupay_transaction_url', ''), $headers, 'POST', $data);

    if ($result->code != 200) {
      $data = serialize(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));
      db_query("INSERT INTO cron_edupay_send_queue (data) VALUES ('%s')", $data);
    }
  }
  else {
    $_SESSION['edupay_total_amount_zero'] = TRUE;
  }
}


/**
 * Implementation of hook_cron(), pick up queued requests and try to send HTTP request again
 */
function uc_edupay_cron() {
  $queue_items = db_query("SELECT * FROM {cron_edupay_send_queue}"); // Was LIMIT 100 (500 did not work properly?)
  while ($queue_item = db_fetch_object($queue_items)) {

    $parameters = unserialize($queue_item->data);
    $data = drupal_to_js($parameters);

    $headers = array(
      'Authorization' => 'Basic ' . base64_encode(variable_get('uc_edupay_username', '') . ':' . variable_get('uc_edupay_password_md5', '')),
      'Content-Type' => 'application/json');
    $result = drupal_http_request(variable_get('uc_edupay_transaction_url', ''), $headers, 'POST', $data);

    // db_query("INSERT INTO debug_send_queue VALUES (%d, '%s', %d)", $queue_item->serial_id, $queue_item->data, $result->code);//ab
    if ($result->code == 200 || $result->code == 409) { // 409 has been agreed with EduPay if it is already there (maybe response timed out)
      db_query("DELETE FROM {cron_edupay_send_queue} WHERE serial_id=%d", $queue_item->serial_id);
    }
  }
}


/**
 * Implementation of hook_order() (UberCart), called when an order is created... 'new' & 'save' are called in quick succession from uc_cart_checkout_form_validate()
 *
 * <p>'new' sends a HTTP request to EduPay.</p>
 * <p>'save' writes a 'fees_order' table entry and redirects to 'cart/checkout/complete'.</p>
 * @uses _uc_edupay_process_order_request()
 * @uses student_next_level()
 * @uses uc_edupay_save()
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */
function uc_edupay_order($op, &$arg1, $arg2) {
  global $user;
    switch ($op) {
      // Called when an order is created... 'new' & 'save' are called in quick sucession from uc_cart_checkout_form_validate()
      case 'new':

        // First, ensure there is something in the cart (this is cleared after sucessfull transaction)
        $cc = uc_cart_get_contents();
        if (empty($cc)) {
          drupal_set_message('There is nothing in the cart, please start again.', 'error');
          drupal_goto('student/payfees');
        }

        // Second, the Student may be clicking Submit multiple times, if so stop now
        // Drupal HTTP timeout is 30 seconds... so need to allow at least that long (i.e. 50 seconds)
        $now = time();
        $rs = db_query("SELECT order_id, created FROM {uc_orders} WHERE uid=%d AND order_id!=%d AND created>%d", $user->uid, $arg1->order_id, $now - 50);
        //dsm(array('uid' => $user->uid, 'order_id' => $arg1->order_id, 'now' => $now));//ab
        if ($r = db_fetch_object($rs)) {
          //dsm(array('created' => $r->created, 'other order_id' => $r->order_id));//ab
          drupal_set_message('You seem to have clicked on "Send Fee Details for Processing" more than once, but you can select your invoice below (or if it is not below, click "Pay Fees" again).', 'error');
          drupal_goto('student/payfees');
        }

        _uc_edupay_process_order_request($arg1);
        break;

        // Occurs when Submit Order is clicked
        // However for EduERP we skip 'submit' and go directly to cart/checkout/complete "uc_cart_checkout_complete()" from 'save'
        case 'submit':

          if ($arg1->payment_method == 'edupay') {

            // if the order is successful, empty the cart and invalidate SESSION variables
            if(isset($_SESSION['edupay_transaction_accepted'])){
              uc_cart_empty(uc_cart_get_id());
              // Clear our the session variables used to force the cart workflow.
              unset($_SESSION['cart_order'], $_SESSION['do_complete'], $_SESSION['new_user']);
            }else {
            }
          }
          break;

        case 'save':
          if ($arg1->payment_method == 'edupay') {

            db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($_SESSION['eduerp_fees_order']), $arg1->order_id);

            if ($_SESSION['edupay_total_amount_zero']) {
              db_query("UPDATE {uc_orders} set order_status = 'payment_received' WHERE order_id = %d", $arg1->order_id);
            }
            else {
              // Do this because redirect to 'cart/checkout/complete' (uses HTTP header) might not happen
              db_query("UPDATE {uc_orders} set order_status = 'pending' WHERE order_id = %d", $arg1->order_id);
            }

            $level_name = student_next_level($user->uid, variable_get('eduerp_current_session', ''));

            $fees = $arg1->products;
            $field = array();
            $fields = array();
            foreach ($fees as $key => $product) {
              $fields = $product->data;
              $field['type'] = $fields['type'];
              $field['nid'] = $fields['nid'];
              $field['nationality'] = $fields['nationality'];
              $field['programme'] = $fields['programme'];
              $field['level_name'] = $level_name;
              $field['scholarship'] = $fields['scholarship'];
              $field['allow_instalment'] = $fields['allow_instalment'];
              $field['session'] = $fields['session'];
              if(array_key_exists('late_registration', $fields) && !is_null($fields['late_registration'])) {
                list(
                  $field['late_registration_date'],
                  $field['late_registration_amount'],
                  $field['late_registration_nid'],
                  $field['late_registration_description'],
                  ) = array_values($fields['late_registration']);
              }
              if(array_key_exists('hostel', $fields) && !is_null($fields['hostel'])) {
                list(
                  $field['hostel_nid'],
                  $field['hostel_type'],
                  $field['expiry_date'],
                  ) = array_values($fields['hostel']);
              }
              if(array_key_exists('attributes', $fields) && !is_null($fields['attributes'])) {
                $field['attributes'] = $fields['attributes']['Fee Structure'][0];
              }
              else {
                unset($field['attributes']);
              }
              $field['jambno'] = $fields['jambno'];
              $field['fullnames'] = $fields['fullnames'];
              $field['institution'] = $fields['institution'];
              $field['module'] = $fields['module'];
              $field['cart_item_id'] = $product->cart_item_id;
              $field['title'] = $product->title;
              $field['price'] = $product->price;
              $field['status'] = $arg1->order_status;
              $field['email'] = $arg1->primary_email;
              $field['order_id'] = $product->order_id;
              $field['uid'] = $arg1->uid;
              $field['product_nid'] = $product->nid;

              unset($fields['has_scholarship']);

              $field['course'] = $fields['course'];
              $field['college'] = $fields['college'];
              $field['original_amount'] = $fields['original_amount'];
              $field['scholarship_type'] = $fields['scholarship_type'];
              $field['sponsor'] = $fields['sponsor'];

              uc_edupay_save($arg1->order_id, $field);
            }

            uc_cart_empty(uc_cart_get_id()); // Do this because redirect to 'cart/checkout/complete' (uses HTTP header) might not happen

            $_SESSION['do_complete'] = TRUE;
            drupal_goto('cart/checkout/complete');
          }
          break;

        // The real order object that will be put into $_SESSION['cart_order'].
        // Not used in EduERP?
        case 'load':
          if(isset($_SESSION['transaction_id'])) {
            unset($_SESSION['transaction_id']);
          }
          break;
    }
}


/**
 * Write a 'fees_order' table entry for the Fees Report
 *
 * @param int $order_id
 * @param array $product
 */
function uc_edupay_save($order_id, $product) {

  if (!empty($product['attributes']) && preg_match('/Full Amount|Instalment1|Instalment2/', $product['attributes'], $matches)) {
    $format_sql = "AND fees_format='" . $matches[0] . "'";
    $product['fees_format'] = $matches[0];
  }
  else {
    $format_sql = '';
    unset($product['fees_format']);
  }

  unset($product['expiry_date']); // We want it to be NULL until payment marked received by call-back (this will be the date payment was received)
  $product['email'] = ' '; // We want it to be ' ' until payment marked received by call-back (this will be the EduPay username that marked the payment as received)

  if ($_SESSION['edupay_total_amount_zero']) {
    $product['status'] = 'payment_received';
  }
  else {
    $product['status'] = 'pending';
  }

  drupal_write_record('fees_order', $product);
  return; // Always do insert so we keep a permanent record

  if ($result = db_fetch_object(db_query("SELECT fees_order_id from {fees_order} WHERE product_nid=%d AND nid=%d AND uid=%d AND session='%s' $format_sql", $product['product_nid'], $product['nid'], $product['uid'], variable_get('eduerp_current_session', '')))) {
    // This is for the same student with the same product_nid and attribute options (based on the Fee Structure nid & fees_format) in the same session
    // ... so it is OK to overwrite a 'canceled' fees_order item
    // (it has to be 'canceled' because uc_eduerp_fees_completed_order_items() would have removed any 'payment_received' or 'pending' items from get_fee_items())
    $product['fees_order_id'] = $result->fees_order_id;
    drupal_write_record('fees_order', $product, 'fees_order_id');
  }
  else {
    // do an insert
    drupal_write_record('fees_order', $product);
  }
}


/**
 * Retrieve items from fees_order table, used by Handlers for Fees Report View
 *
 * @param string $field
 * @return array
 */
function uc_edupay_fees_order_get_item($field) {
  // lookup the field in the schema if it exists
  $schema = drupal_get_schema('fees_order');
  $fields = $schema['fields'];

  // break early if it doesn't
  if(!array_key_exists($field, $fields)) {
    return FALSE;
  }

  $result = db_query("SELECT DISTINCT $field FROM {fees_order}");
  while($data = db_fetch_array($result)) {
    $object[] = $data;
  }
  return $object;
}


/**
 * Implementation of hook_token_values(). (token.module)
 *
 * @uses get_late_registration_info()
 */
function uc_edupay_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'order':
      $order = $object;
      $student_profile = content_profile_load('student_profile', $order->uid);
      foreach($order->data as $key => $value) {
        if($value['type'] == EDUERP_FEES_NORMAL) {
          $programme[] = $value['programme'];
        }
        $fullnames[] = $value['fullnames'];
        $timeout[] = $value['timeout'];
      }

      $lateRegInfo = get_late_registration_info();
      $late_charges = $lateRegInfo['late_reg_amount'];

      $values['programme'] = array_shift(array_unique($programme));
      $values['fullnames'] = array_shift(array_unique($fullnames));
      $values['timeout-raw'] = array_shift(array_unique($timeout));
      $values['late_registration_date'] = $vars['late_registration_date'] = date('D jS M Y', array_shift(array_unique($timeout)));
      $values['late_registration_fee'] = $late_charges;
      $values['invoice-number'] = variable_get('uc_edupay_username', '') . '/' . $order->order_id;
      $values['matric-number'] = $student_profile->field_profile_matno[0]['value'];
      $values['bank-list-raw'] = variable_get('eduerp_institution_bank_list', '');
      $values['tcrg'] = variable_get('eduerp_bank_transaction_charge', '');
      break;
    case 'fees_order':
      $fees_order = $object;
      break;
  }
  return $values;
}

/**
 * Implementation of hook_token_list(). (token.module)
 */
function uc_edupay_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'order' || $type == 'ubercart' || $type == 'all') {
    $tokens['order']['programme'] = t('The ordered programme by a student');
    $tokens['order']['fullnames'] = t('Full names of the student who made an order');
    $tokens['order']['late_registration_date'] = t('The timeout value of a specific order');
    $tokens['order']['late_registration_fee'] = t('The late registration amount applicable to a fee order');
    $tokens['order']['invoice_number'] = t('The fees order invoice number');
    $tokens['order']['matric-number'] = t("The student's matric number");
    $tokens['order']['timeout-raw'] = t('Raw timeout');
    $tokens['order']['bank-list-raw'] = t('Authorized bank list');
    $tokens['order']['tcrg'] = t('Bank Transaction Charge');
  }
  return $tokens;
}


/**
 * Implements hook_checkout_pane
 */
/*
function uc_edupay_checkout_pane() {
  $items = uc_cart_get_contents();
  foreach($items as $fee) {
    $panes[$fee->title] = array(
      'id' => $fee->cart_item_id, //pass in here the fee attribute
      'callback' => 'uc_checkout_pane_eduerp_fees',
      'title' => $fee->title,
      'desc' => t('Below shows the fee items in your cart @title payment.', array('@title' => $fee->title)),
      'weight' => 8,
      'process' => TRUE,
      'collapsible' => TRUE,
    );
  }
  return $panes;
}
*/

/**
 * A single callback to display all fees in the cart in a generic checkout pane, not used?
 */
function uc_checkout_pane_eduerp_fees($op, &$arg1, $arg2){
  global $user;
  $zz = uc_cart_get_contents();
  foreach($zz as $z){
    $items[] = get_object_vars($z);
  }
  switch ($op) {
    case 'view':
      // if item in the cart is of type fees
      // for each on the items and display them in fees pane
      $description = array();
      $x = array();
      foreach($items as $key => $fee){
        $item[$key] = $fee;
      }
      foreach($item as $key => $value) {
        $types[] = $value['data']['type'];
        $titles[$key] = $value['title'];
        $nid[$key] = $value['nid'];
        $cart_item_id[$key] = $value['cart_item_id'];
        $programme[$key] = $value['data']['programme'];
        $level[$key] = $value['data']['level_name'];
        $amount[$key] = $value['price'];
        $session[$key] = $value['data']['session'];

        // @todo put $all array only for type fees
        // Get only the stuffs we need by nid
        $all[] = array(
          $nid[$key] = array(
            'nid' => $value['nid'],
            'type' => $value['data']['type'],
            'title' => $value['title'],
            'amount' => $value['price'],
            'programme' => $value['data']['programme'],
            'level' => $value['data']['level_name'],
            'session' => $value['data']['session'],
            'nationality' => $value['data']['nationality'],
            'cart_item_id' => $value['cart_item_id'],
          )
        );
      }
      foreach($all as $value) {
        foreach($value as $key => $order_item) {
          $description[$key] = $order_item['title'];
          $contents[$key] = array(
            '#type' => 'fieldset',
            //'#title' => $description[$key],
            //'#description' => $description[$key],
            //'#value' => $contents
          );
          $contents[$key]['data'] = array(
            //'#type' => 'markup',
            '#value' => theme('eduerp_cart_review_table', $order_item)
          );
          $x[] = array(
            'description' => t('Content title is %title', array('%title' => $description[$key])),
            'contents' => $contents[$key]
          );
        }
      }
      foreach($x as $fees_pane) {
        return $fees_pane;
      }
    case 'review':
    case 'process':
  }
}


/**
 * theme the Cart Review Table
 */
function theme_eduerp_cart_review_table($contents) {
  $contents = uc_cart_get_contents();
  foreach($contents as $content) {
   //if($content->data['type'] == 'fees'){
     $rows[] = array(
        array('data' => $content->nid, 'class' => 'price'),
        array('data' => $content->data['type'], 'class' => 'price'),
        array('data' => $content->title, 'class' => 'price'),
        array('data' => $content->price, 'class' => 'price'),
        array('data' => $content->data['programme'], 'class' => 'price'),
        array('data' => $content->data['level_name'], 'class' => 'price'),
        array('data' => $content->data['session'], 'class' => 'price'),
        array('data' => $content->data['nationality'], 'class' => 'price'),
        array('data' => $content->cart_item_id, 'class' => 'price'),
      );
   //}
  }
  $header = array(
    array('data' => t('Item No.'), 'class' => 'price'),
    array('data' => t('Type'), 'class' => 'price'),
    array('data' => t('Title'), 'class' => 'price'),
    array('data' => t('Amount'), 'class' => 'price'),
    array('data' => t('Programme'), 'class' => 'price'),
    array('data' => t('Level'), 'class' => 'price'),
    array('data' => t('Session'), 'class' => 'price'),
    array('data' => t('Nationality'), 'class' => 'price'),
    array('data' => t('Cart item id'), 'class' => 'price'),
    //array('data' => t('Late registration'), 'class' => 'price'),
    //array('data' => t('Instalments allowed'), 'class' => 'price'),
  );

  return theme('table', $header, $rows, array('class' => 'cart-review'));
}


/**
 * Get Cart contents and reorganise as an array (this should be simplified)
 */
function _uc_edupay_fees_order_items($order) {
  $zz = uc_cart_get_contents();
  foreach($zz as $z){
    $items[] = get_object_vars($z);
  }
  $data = array();
  $description = array();
  foreach($items as $key => $fee){
    $item[$key] = $fee;
    $data[$key] = $fee['data'];
    $description[$key] = $fee['title'];
  }
  $types = array();
  foreach($item as $key => $value) {
    $types[] = $value['data']['type'];

    if($value['data']['type'] == EDUERP_FEES_NORMAL) {
      $nid[$key] = array(
        'nid' => $value['nid'],
        'type' => $value['data']['type'],
        'cart_item_id' => $value['cart_item_id'],
        'title' => $value['title'],
        'amount' => $value['price'],
        'programme' => $value['data']['programme'],
        'level' => $value['data']['level_name'],
        'session' => $value['data']['session'],
        'timeout' => $value['data']['late_registration']['last_registration_date'],
        'uid' => $order->uid,
        'jamb_no' => $value['data']['jambno'],
        'fullnames' => $value['data']['fullnames'],
        'institution' => $value['data']['institution'],
        'status' => $order->order_status,
        'email' => $order->primary_email,
        'order_id' => $order->order_id,
        'scholarship' => $value['data']['has_scholarship'],
        'transaction_token' => $value['data']['transaction_token'],
        'original_amount' => $value['data']['original_amount'],
        'scholarship_type' => $value['data']['scholarship_type'],
        'sponsor' => $value['data']['sponsor'],
      );
      $all[] = $nid[$key];
    }

    if($value['data']['type'] == EDUERP_FEES_HOSTEL) {
      $hostel['hostel'] = array(
        'nid' => $value['nid'],
        //'type' => $value['data']['type'], // get from the array
        'type' => EDUERP_FEES_HOSTEL,
        'cart_item_id' => $value['cart_item_id'],
        'title' => $value['title'],
        'amount' => $value['price'], // or 'amount' => $value['data']['amount']
        'programme' => 'none',
        'level' => 'none',
        'session' => variable_get('eduerp_current_session', ''),
        'timeout' => $value['data']['expiry_date'],
        'uid' => $order->uid,
        'jamb_no' => $value['data']['jambno'],
        'fullnames' => $value['data']['fullnames'],
        'institution' => $value['data']['institution'],
        'status' => $order->order_status,
        'email' => $order->primary_email,
        'order_id' => $order->order_id,
        'scholarship' => '2',
        'transaction_token' => $value['data']['transaction_token'],
        'original_amount' => $value['data']['original_amount'],
        'scholarship_type' => $value['data']['scholarship_type'],
        'sponsor' => $value['data']['sponsor'],
      );

      $all[] = $hostel['hostel'];
    }
  }

  $products[EDUERP_FEES_NORMAL] = $all; // Treat all items as 'fees'

  return $products;
}


/**
 * Alter all views exposed filters
 */
function uc_edupay_form_views_exposed_form_alter(&$form, $form_state) {
  if($form['#id'] == 'views-exposed-form-fees-summary-page-1') {
    $form['college']['#default_value'] = 'All';
  }
}


/**
 * Implements hook_uc_invoice_templates().
 */
function uc_edupay_uc_invoice_templates() {
  return array('student', 'test');
}


/**
 * Implements hook_theme_registry_alter().
 */
function uc_edupay_theme_registry_alter(&$theme_registry) {
  // This will allow Ubercart invoice templates to be searched in this module's directory.
 $theme_registry['uc_order']['theme paths'][] = drupal_get_path('module', 'uc_edupay');
}


/**
 * Preparatory stuff for the Ubercart invoice template
 */
function uc_edupay_preprocess_uc_order(&$vars) {
  $invoice_vars = array();
  $date = new DateTime($vars['order_date_created']);

  $student_uid = $vars['order_uid'];
  $student_profile = content_profile_load('student_profile', $student_uid);

  foreach($vars['order']->data as $key => $value) {
    if($value['type'] == EDUERP_FEES_NORMAL) {
      $programme[] = $value['programme'];
    }
    $fullnames[] = $value['fullnames'];
    $timeout[] = $value['timeout'];
  }

  $lateRegInfo = get_late_registration_info();
  $late_charges = $lateRegInfo['late_reg_amount'];

  // fees related variables
  // some values can be gotten through token_get_values($type, $object, FALSE, $options);
  $vars['matric_number'] = $student_profile->field_profile_matno[0]['value'];
  $vars['programme'] = array_shift(array_unique($programme));
  $vars['fullnames'] = array_shift(array_unique($fullnames));
  $timeout = array_shift(array_unique($timeout));
  $vars['late_registration_date'] = date('D jS M Y', $timeout);
  $vars['late_registration_fee'] = $late_charges;
  $vars['fees_order_date'] = $date->format('j F Y');

  $bank_list = variable_get('eduerp_institution_bank_list', '');

  $future_date = 2145913199;

  $vars['invoice_note'] = t('Please pay this invoice at: @bank_list', array('@bank_list' => $bank_list));
  $vars['invoice_note'] .= t('<p>Present this invoice or provide your invoice number to pay at the bank.</p>');

  if($timeout < $future_date) {
    $late_registration_date_string = t('<p>Payment must be made on or before @late_registration_date. The bank cannot accept payment after that date.</p>', array('@late_registration_date' => $vars['late_registration_date']));
    $late_registration_date_string .= t('<p>If you do not make payment by that date, you will have to come back to this system to generate a new invoice which you can then take to the bank. This new invoice may in some circumstances contain a Late Payment Fee.</p>');
    $vars['invoice_note'] .= $late_registration_date_string;
  }
  $vars['invoice_note'] .= t('<p>After payment of your fees allow 1 working day for the system to be updated with confirmation of your payment after which you will be able to proceed with your online course registration (this does not apply if this invoice only contains a Hostel payment).</p>');
  $bank_tcrg = variable_get('eduerp_bank_transaction_charge', '');
  $vars['invoice_note'] .= t('<p>An additional @bank_tcrg transaction charge must be paid when paying your fees.</p>', array('@bank_tcrg' => $bank_tcrg));

  $vars['invoice_number'] = variable_get('uc_edupay_username', '') . '/' . $vars['order']->order_id;

  $vars['institution_name'] = variable_get('eduerp_institution_current', '');
  $vars['institution_address'] = variable_get('eduerp_institution_address', '');
  $vars['bank_account1'] = t('First bank Account Number: 123456789');
  $vars['bank_account2'] = t('Zenith Account Number: 987654321');
  $vars['bank_details'] = variable_get('eduerp_institution_bank_details', '');

  $vars['user_label'] = t('Customer');
  $vars['invoice_title'] = t('Invoice');
}


/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded
 */
function uc_edupay_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'uc_edupay') . '/includes',
  );
}
