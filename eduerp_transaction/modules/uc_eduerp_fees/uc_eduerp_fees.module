<?php

/**
 * Ubercart integration of EduERP fees
 *
 * @author Kayode Odeyemi (dreyemi@gmail.com)
 */

define('EDUERP_FEES_NORMAL', 'fees');
define('EDUERP_FEES_HOSTEL', 'hostel');
define('FEES_PAID', 'payment_received');
define('FEES_PENDING', 'pending');
define('HAS_SCHOLARSHIP', 1);
define('FEES_FULL', 'Full Amount');
define('FEES_FIRST_INSTALMENT', 'Instalment1');
define('FEES_SECOND_INSTALMENT', 'Instalment2');


/**
 * Implementation of hook_menu(), called to generate menus when module setup at admin/build/modules is saved
 */
function uc_eduerp_fees_menu() {
  $items['edupay/callback'] = array(
    'title' => 'Process EduPay Callback',
    'page callback' => 'uc_eduerp_fees_update_fees',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['edupay/displaycart'] = array(
    'title' => 'Student Fees Due to be Paid',
    'page callback' => 'display_cart_for_scholarship',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Disable UberCart Orders Tab for Users
 */
function uc_eduerp_fees_menu_alter(&$items) {
  $items['user/%user/orders'] = MENU_CALLBACK;
  unset($items['user/%user/orders']);
}


/**
 * Handles 'edupay/callback' menu callback to handle POST from EduPay Server to indicate Payment Received or Cancelled for an Invoice, returning JSON packet to EduPay
 * @uses hostel_allocation_allocate_bedspace()
 * @uses hostel_allocation_revoke_expired_reservation()
 */
function uc_eduerp_fees_update_fees() {
  $order_id = $_POST['order_id'];
  $status = $_POST['status'];
  $uid = $_POST['uid'];
  $transaction_token = $_POST['transaction_token'];
  $bank_username = $_POST['bank_username'];
  if (empty($bank_username)) $bank_username = ' ';

  if ($_SERVER['REQUEST_METHOD'] != 'POST' || empty($order_id) || empty($status) || empty($uid) || empty($transaction_token) || ($status != 'payment_received' && $status != 'canceled')) {
    drupal_set_header('HTTP/1.1 404 Not Found');
    $content = new stdClass();
    $content->status = 'fail';
    drupal_json($content);
    exit();
  }

  $transaction_token_found = FALSE;
  $sql = "SELECT op.data FROM {uc_orders} o, {uc_order_products} op
    WHERE
      o.order_id=%d AND
      o.order_status IN ('pending') AND
      o.order_id=op.order_id";
  $result = db_query($sql, $order_id);
  if ($order = db_fetch_array($result)) { // Only need to look at one uc_order_products, transaction_token is in them all
    $data = unserialize($order['data']);
    if ($data['transaction_token'] == $transaction_token) $transaction_token_found = TRUE;
  }

  if (!$transaction_token_found) {
    $content = new stdClass();
    $content->status = 'fail';

    // Status was not expected 'pending', but it might be 'canceled' or 'payment_received'... Give suitable message, these are semi valid conditions
    $sql = "SELECT o.order_status, op.data FROM {uc_orders} o, {uc_order_products} op
      WHERE
        o.order_id=%d AND
        o.order_id=op.order_id";
    $result = db_query($sql, $order_id);
    if ($order = db_fetch_array($result)) {
      $data = unserialize($order['data']);
      if ($order['order_status'] == 'canceled'         && $data['transaction_token'] == $transaction_token) $content->status = 'fail-already-canceled';
      if ($order['order_status'] == 'payment_received' && $data['transaction_token'] == $transaction_token) $content->status = 'fail-already-payment_received';
    }

    drupal_set_header('HTTP/1.1 404 Not Found');
    drupal_json($content);
    exit();
  }

  $sql = "SELECT ctb.field_uc_product_id_nid, op.title
    FROM {content_type_blocks} ctb, {content_type_rooms} ctr, {content_type_room_reservations} ctrr, {uc_order_products} op
    WHERE
      ctb.nid=ctr.field_block_id_nid AND
      ctr.nid=ctrr.field_room_id_nid AND
      ctrr.field_student_id_uid=%d AND
      ctb.field_uc_product_id_nid=op.nid AND
      op.order_id=%d";
  $query_result = db_query($sql, $uid, $order_id);
  if (db_fetch_array($query_result)) {
    $hostel_in_order = TRUE; // Found a hostel reservation which has a product in this order
  }
  else {
    $hostel_in_order = FALSE;
  }

  if ($status == 'payment_received') {
    if ($hostel_in_order) hostel_allocation_allocate_bedspace($uid);

    db_query("UPDATE {uc_orders} set order_status = '$status' WHERE order_id = %d", $order_id);
    db_query("UPDATE {fees_order} SET status = '$status' WHERE order_id = %d", $order_id);
    $timestamp = time();
    db_query("UPDATE {fees_order} SET expiry_date = %d WHERE order_id = %d", $timestamp, $order_id);
    db_query("UPDATE {fees_order} SET email = '%s' WHERE order_id = %d", $bank_username, $order_id);
    watchdog('uc_eduerp_fees', t('Fees item in cart with order_id of @order_id has been successfully paid for by @uid', array('@order_id' => $order_id, '@uid' => $uid)));
  }

  if ($status == 'canceled') {
    if ($hostel_in_order) hostel_allocation_revoke_expired_reservation($uid);

    db_query("UPDATE {uc_orders} set order_status = '$status' WHERE order_id = %d", $order_id);
    db_query("UPDATE {fees_order} SET status = '$status' WHERE order_id = %d", $order_id);
    watchdog('uc_eduerp_fees', t('Fees item in cart with order_id of @order_id of user @uid has been canceled', array('@order_id' => $order_id, '@uid' => $uid)));
  }

  $content = new stdClass();
  $content->status = 'success';
  drupal_json($content);
  exit();
}


/**
 * Return HTML for Display of Fees that a Student is due to Pay (to be used for Scholarship authorisation purposes), also add Student data
 *
 * @uses show_cart_for_student()
 * @return string HTML
 */
function display_cart_for_scholarship() {
  global $user;

  ob_start();

  $student_profile = new UserProfile($user->uid);

  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  $sql = "SELECT field_programme_name_value FROM {content_type_program} WHERE nid=%d";
  $result = db_query($sql, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);

  ?>
  <br />
  <h2><?php echo variable_get('eduerp_institution_current', '') ?></h2>
  <?php echo variable_get('eduerp_institution_address', '') ?><br />
  <br />
  <h3>Name: <?php echo $studentname ?><br />
  Admission Number: <?php echo $user->name ?></h3><br />
  Session: <?php echo variable_get('eduerp_current_session', '') ?><br />
  Programme: <?php echo $row->field_programme_name_value ?><br />
  <br />
  If you are due a scholarship, print and bring this page to the Scholarship Board.<br /><br />
  <?php if (FALSE) { ?>(<a href="/print/edupay/displaycart">Click here for a Printer-friendly version</a> which can be used to generate a better printout.)<br /><br /><?php } ?>

  <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Fees for <?php echo "$studentname for " . variable_get('eduerp_current_session', ''); ?></b></td></tr>
    <tr>
      <td><?php echo show_cart_for_student(); ?></td>
    </tr>
  </table>
<?php
  return ob_get_clean();
}


/**
 * Return HTML for Display of School Fees that a Student is due to Pay (to be used for Scholarship authorisation purposes)
 *
 * @return string HTML
 */
function show_cart_for_student() {
  $subtotal = 0;

  // Set up table header.
  $header = array(
    array('data' => t('Products'), 'class' => 'products'),
    array('data' => t('Price'), 'class' => 'price'),
  );

  $context = array();

  // Set up table rows.
  $contents = uc_cart_get_contents();
  foreach ($contents as $item) {
    $description = uc_product_get_description($item);
    if (!empty($description) && strpos($description, 'Fee Structure') !== FALSE) { // Don't include e.g. Hostels
      $total = $item->price;
      $subtotal += $total;

      $description = check_plain($item->title) . $description;

      // Remove node from context to prevent the price from being altered.
      $context['revision'] = 'themed-original';
      $context['type'] = 'amount';
      unset($context['subject']);
      $rows[] = array(
        array('data' => $description, 'class' => 'products'),
        array('data' => uc_price($total, $context), 'class' => 'price'),
      );
    }
  }

  // Add the subtotal as the final row.
  $context = array(
    'revision' => 'themed-original',
    'type' => 'amount',
  );
  $rows[] = array(
    'data' => array(array('data' => '<span id="subtotal-title">' . t('Total:') . '</span> ' . uc_price($subtotal, $context), 'colspan' => 2, 'class' => 'subtotal')),
    'class' => 'subtotal',
  );

  return theme('table', $header, $rows, array('class' => 'cart-review'));
}



/**
 * Remove any 'pending' or 'payment_received' Fees for a Student so that they only pay for newly added Fee items for the current Session
 *
 * @param int $student_id
 * @param array $fee_items
 * @return array
 */
function uc_eduerp_fees_completed_order_items($student_id, $fee_items) {

  foreach ($fee_items['fees']['fee_products_array'] as $i => $item) {
    $sql = "SELECT op.nid, op.data FROM {uc_orders} o, {uc_order_products} op
      WHERE
        o.uid=%d AND
        o.order_status IN ('payment_received', 'pending') AND
        o.order_id=op.order_id AND
        op.nid=%d";
    $result = db_query($sql, $student_id, $item['product_nid']);
    while ($order = db_fetch_array($result)) {
      $data = unserialize($order['data']);
      if ($data['session'] == variable_get('eduerp_current_session', '')) {
        if (isset($item['option_id'])) {
          if ($item['attribute_id'] == $data['attribute_id'] && $item['option_id'] == $data['option_id']) {
            unset($fee_items['fees']['fee_products_array'][$i]);
            unset($fee_items['fees']['description'][$i]);
          }
        }
        else {
          unset($fee_items['fees']['fee_products_array'][$i]);
          unset($fee_items['fees']['description'][$i]);
        }
      }
    }
  }

  if (empty($fee_items['fees']['fee_products_array'])) unset($fee_items['fees']);

  if (empty($fee_items['hostel']['hostel_product'])) {
    unset($fee_items['hostel']);
  }
  else {
    $sql = "SELECT op.nid, op.data FROM {uc_orders} o, {uc_order_products} op
      WHERE
        o.uid=%d AND
        o.order_status IN ('payment_received', 'pending') AND
        o.order_id=op.order_id AND
        op.nid=%d";
    $result = db_query($sql, $student_id, $fee_items['hostel']['hostel_product']['product_nid']);
    while ($order = db_fetch_array($result)) {
      $data = unserialize($order['data']);
      if ($data['session'] == variable_get('eduerp_current_session', '')) {
        unset($fee_items['hostel']);
      }
    }
  }

  return $fee_items;
}


/**
 * Handles 'student/payfees'/Pay fees menu for a Student to start the Fees Payment process
 *
 * <p>Find the Fees Setup for a Student and generate a list of Fees due (including any Hostel Payment).</p>
 * <p>Ensure the Student is eligible to Pay Fees.</p>
 * <p>Remove any pending or paid fees.</p>
 * <p>Generate a form which stores all this fee data.</p>
 * <p>Allow the Student to deselect the Hostel Payment for now.</p>
 * @uses uc_eduerp_fees_pay_fees_form_submit()
 * @uses uc_eduerp_fees_eduerp_fees()
 * @uses is_fee_setup_existing_for_student()
 * @uses student_clearance_performed()
 * @uses student_next_level()
 * @uses uc_eduerp_fees_completed_order_items()
 * @uses is_reservation_existing()
 * @param array $form_state
 * @return array Drupal Form
 */
function uc_eduerp_fees_pay_fees(&$form_state) {
  global $user;
  $student_id = $user->uid;

  db_query('INSERT IGNORE INTO {student_semaphore} VALUES (%d, 0, 0)', $student_id); // Only inserts if does not already exist

  $row = db_fetch_object(db_query('SELECT semaphore_timestamp FROM {student_semaphore} WHERE uid=%d', $student_id));
  if (time() > ($row->semaphore_timestamp + 10)) {
    // Unlock the Semaphore if 10 seconds have passed
    db_query('UPDATE {student_semaphore} SET semaphore_value=0 WHERE uid=%d', $student_id);
  }

  uc_cart_empty($student_id);

  module_load_include('inc', 'student', 'student.rules');

  $form = array();

  $fees = uc_eduerp_fees_eduerp_fees();
dsm(array('fees' => $fees));//ab
  // Check if the current user has an existing fees setup
  if(!is_fee_setup_existing_for_student($student_id)) {
    drupal_set_message(t("Sorry, you don't have a valid fees setup. Please contact bursary"), 'error');
    return FALSE;
  }

  // A student need to be cleared to progress
  if(!student_clearance_performed($student_id)) {
    drupal_set_message(t('Sorry, you need to be cleared to progress'), 'error');
    return FALSE;
  }

  // test if student is still a student (graduated or expelled)
  $session = variable_get('eduerp_current_session', '') ? variable_get('eduerp_current_session', '') : NULL;
  if(!student_next_level($student_id, $session)){
    drupal_set_message(t('Sorry. Your student record is no longer eligible to pay fees'), 'error');
    return FALSE;
  }

  // Remove any pending or paid fees...
  $fees = uc_eduerp_fees_completed_order_items($student_id, $fees);

  if (empty($fees['fees']['fee_products_array']) && empty($fees['hostel'])) {
    $message = 'All your fees items are currently in process or already paid for. Consult the bursary.';

    $rs = db_query("SELECT order_id, order_status FROM {uc_orders} WHERE uid=%d AND order_status IN ('payment_received', 'pending')", $user->uid);
    $firstone = TRUE;
    while ($r = db_fetch_object($rs)){
      if ($firstone) {
        $message .= '<br />You may regenerate your invoices by clicking on them (and bring to bank if you have not already done so)...';
        $firstone = FALSE;
      }
      $message .= '<br /><a href="' . url('user/' . $user->uid . '/order/' . $r->order_id . '/invoice/print') . '" target="_blank">Invoice: ' . $r->order_id . '</a> (' . $r->order_status . ')';
    }
    drupal_set_message($message, 'error');
    return FALSE;
  }

  if(!is_reservation_existing($student_id)) {
    unset($fees['hostel']);
  }

  $form['eduerp_fees'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pay fees'),
    '#collapsible' => TRUE,
  );

  if (!empty($fees['fees']['fee_products_array'])) {

    foreach ($fees['fees']['fee_products_array'] as $key => $product) {
      $form['eduerp_fees']["fees_$key"] = array(
        '#type' => 'checkbox',
        '#title' => strip_tags($product['item_description']),
        '#default_value' => TRUE,
        '#disabled' => TRUE
      );
    }
  }

  if (!empty($fees['hostel'])) {
    $form['eduerp_fees']['hostel'] = array(
      '#type' => 'checkbox',
      '#title' => strip_tags($fees['hostel']['description']),
      '#default_value' => TRUE,
      '#disabled' => FALSE
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Fees (Click Once Only!)')
  );
  $form['#submit'][] = 'uc_eduerp_fees_pay_fees_form_submit';

  // Pass through for processing by submit hook
  $form['#fees'] = $fees;

  return $form;
}


/**
 * submit hook for {@link uc_eduerp_fees_pay_fees_form()} to parse the Form data, empty the UberCart Shopping Cart, add items to the Cart and go to UberCart Checkout
 *
 * @uses is_scholarship_authorisation_existing()
 * @uses uc_eduerp_fees_get_profile_items()
 */
function uc_eduerp_fees_pay_fees_form_submit($form, &$form_state) {
  global $user;
  $student_id = $user->uid;

  // This is an issue because cart items can get added in parallel even though the cart will have been cleared (if someone double clicks)
  db_query('UPDATE {student_semaphore} SET semaphore_value=semaphore_value+1, semaphore_timestamp=%d WHERE uid=%d', time(), $student_id);
  $r = db_fetch_object(db_query('SELECT semaphore_value FROM {student_semaphore} WHERE uid=%d', $student_id));
  if ($r->semaphore_value != 1) {
    // Semaphore is locked so redirect
    drupal_set_message('You seem to have clicked on "Pay Fees" more than once, please wait 10 seconds and click "Pay Fees" again once only).', 'error');
    drupal_goto('student/payfees');
  }

  $transaction_token = uniqid();

  uc_cart_empty($student_id);

  $added = FALSE;
  $fees = $form['#fees'];

  if (!empty($fees['fees']['fee_products_array'])) {
    $standard_fees_options = $fees['fees']['options'];

    foreach ($fees['fees']['fee_products_array'] as $product) {

      if (array_key_exists('attribute_id', $product)) {
        $product_attribute = array('attributes' => array($product['attribute_id'] => $product['option_id']), 'attribute_id' => $product['attribute_id'], 'option_id' => $product['option_id']);
        $options = $standard_fees_options + $product_attribute;
      }
      else {
        $options = $standard_fees_options;
      }

      if (!empty($product['is_scholarship_applicable']) && $product['is_scholarship_applicable'] == '1' && is_scholarship_authorisation_existing($student_id, variable_get('eduerp_current_session', ''))) {
        $options['has_scholarship'] = '1'; // Yes, this product is free because the product is eligible for a scholarship & the student has been awarded a scholarship
      }
      else {
        $options['has_scholarship'] = '2'; // No
      }

      $options['transaction_token'] = $transaction_token;
      $options['original_amount'] = $product['amount'];
      $options['scholarship_type'] = $product['scholarship_type'];
      $options['sponsor'] = $product['sponsor'];

      $profile_items = uc_eduerp_fees_get_profile_items($student_id);
      foreach ($profile_items as $k => $v) {
        $options[$k] = $v;
      }

      if (!empty($product)) {
        uc_cart_add_item($product['product_nid'], 1, $options, $student_id, TRUE, TRUE, TRUE);
        $added = TRUE;
      }
      else {
        drupal_set_message(t('Sorry, you are not eligible to pay fees. Please contact bursary'), 'error');
        watchdog('fees', t('Fees insertion into cart failed on @uid', array('@uid' => $student_id)));
      }
    }
  }

  if (!empty($form_state['values']['hostel']) && !empty($fees['hostel'])) {
    $standard_hostel_options = $fees['hostel']['options'];
    $product = $fees['hostel']['hostel_product'];

    $options = $standard_hostel_options;

    $options['transaction_token'] = $transaction_token;
    $options['original_amount'] = $product['amount'];
    $options['scholarship_type'] = 'None';
    $options['sponsor'] = 'None';

    $profile_items = uc_eduerp_fees_get_profile_items($student_id);
    foreach ($profile_items as $k => $v) {
      $options[$k] = $v;
    }

    if (!empty($product)) {
      uc_cart_add_item($product['product_nid'], 1, $options, $student_id, TRUE, TRUE, TRUE);
      $added = TRUE;
    }
    else {
      drupal_set_message(t('Sorry, you are not eligible to pay fees. Please contact bursary'), 'error');
      watchdog('fees', t('Fees insertion into cart failed on @uid', array('@uid' => $student_id)));
    }
  }

  if ($added) {
    unset($_SESSION['cart_order']);
    drupal_goto('cart/checkout');
  }
}


/**
 * Get all fee items due including those that might have been paid or are pending
 *
 * @uses student_load_student_profile()
 * @return array
 */
function uc_eduerp_fees_eduerp_fees() {
  global $user;

  $fee_items = get_fee_items($user->uid);

  if (!empty($fee_items)) {

    $fee_items['fee_products_array'] = $fee_items['fee_item_details'];

    foreach ($fee_items['fee_products_array'] as $key => $value) {
      $description[$key] = $value['item_description'];
    }

    $profile = student_load_student_profile($user->uid);
    $fullnames = '';
    if (!empty($profile->profile_first_name) && !empty($profile->profile_last_name)) {
      $middle = '';
      if (!empty($profile->profile_middle_name)) $middle = ' ' . $profile->profile_middle_name;
      $fullnames = "$profile->profile_last_name, $profile->profile_first_name{$middle}";
    }

    $fee_items['options'] = array(
      'type' => EDUERP_FEES_NORMAL,
      'nid' => $fee_items['studentFeeSetupNID'],
      'nationality' =>  $fee_items['nationality_name'],
      'programme' => $fee_items['fee_structure_name'],
      'level_name' => $fee_items['level_name'],
      'scholarship' => $fee_items['is_student_on_scholarship'], // 1 (Yes) or 0
      'allow_instalment' => $fee_items['instalment_payment_authorised'], // 1 (Yes) or 0
      'session' => $fee_items['session_name'],
      'late_registration' => $fee_items['late_reg_info'],
      'jambno' => $profile->profile_matno,
      'fullnames' => $fullnames,
      'institution' => 1
    );

    $fee_items['options']['late_registration']['last_registration_date'] = intval(strtotime($fee_items['options']['late_registration']['last_registration_date']));

    $fee_items['hostel'] = $fee_items['hostel_info'];
    $fee_items['options']['hostel'] = array(
      'nid' => $fee_items['hostel']['product_nid'],
      'type' => EDUERP_FEES_HOSTEL,
      'session' => $fee_items['session_name'],
      'expiry_date' => intval(strtotime($fee_items['hostel']['expiry_date'])),
      'jambno' => $profile->profile_matno,
      'fullnames' => $fullnames,
      'institution' => 1
    );
  }
  else {
    $fee_items = array();
  }

  $fees = array();
  $fees['fees'] = array(
    'fee_products_array' => $fee_items['fee_products_array'],
    'description' => $description, // Possibly not used?
    'options' => $fee_items['options'],
    'type' => EDUERP_FEES_NORMAL,
    'title' => t('Fees'),
  );
  $fees['hostel'] = array(
    'hostel_product' => $fee_items['hostel'],
    'description' => $fee_items['hostel']['hostel_description'],
    'options' => $fee_items['options']['hostel'],
    'type' => EDUERP_FEES_HOSTEL,
    'title' => t('Hostel'),
  );

  return $fees;
}


/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded
 */
function uc_eduerp_fees_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'uc_eduerp_fees') . '/includes',
  );
}


/**
 * Get Student Profile items related to Fees
 *
 * @param int $uid
 * @return array
 */
function uc_eduerp_fees_get_profile_items($uid) {
  $student_profile = content_profile_load('student_profile', $uid);
  $program = $student_profile->field_profile_first_choice;
  $program_nid = $program[0]['nid'];

  $program_obj = db_fetch_object(db_query("SELECT field_programme_name_value,
    field_department_id_nid FROM {content_type_program} p
    WHERE p.nid = %d", $program_nid));

  if($program_obj) {
    $dept_nid = $program_obj->field_department_id_nid;
    $dept_result = db_result(db_query("SELECT field_college_id_nid
      FROM {content_type_department} d
      WHERE d.nid = %d", $dept_nid));

    if($dept_result) {
      $college_nid = $dept_result;
      $college = db_result(db_query("SELECT field_college_name_value
        FROM {content_type_college} c
        WHERE c.nid = %d", $college_nid));
    }
  }

  $profile_items = array(
    'course' => $program_obj->field_programme_name_value,
    'college' => $college
  );

  return $profile_items;
}