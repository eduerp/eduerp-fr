<?php

/**
 * The modules file will essentially contain hook implementations for actions that need to be performed that are institution specific
 */

/**
 * Implementation of hook_matno() to generate Student Matriculation Number and e-mail based on Institution (University) specific data
 *
 * @uses gen_veritas_style_matnum()
 * @uses gen_udusok_style_matnum()
 * @param int $studUID
 * @param int $formerProgID 'program' CCK Drupal node nid if this is a change of Programme (or 0)
 * @param bool $dont_change_matno, TRUE if Staff have decided (in UI) not to change Matriculation Number when changing a particular Student's Programme
 * @return array of new Mat Number and e-mail
 */
function me_gen_matno($studUID, $formerProgID = 0, $dont_change_matno = NULL) {
  //get the institution's choice of mat num
  $sql = "SELECT mat_num_format_id AS mat_num_format, mat_num_serial_gen_type_id AS mat_num_serial_type FROM mat_num_institution_choice ";
  $rs = db_query($sql);

  if(db_affected_rows($rs) <= 0) return false;

  $instChoice = db_fetch_object($rs);

  switch($instChoice->mat_num_format){
    case '1': //veritas style
      return gen_veritas_style_matnum($instChoice->mat_num_format, $instChoice->mat_num_serial_type, $studUID, $formerProgID);
    break;

    case '2': //udusok style
      return gen_udusok_style_matnum($instChoice->mat_num_format, $instChoice->mat_num_serial_type, $studUID, $formerProgID, $dont_change_matno);
    break;

    default:
      return false;
  }
}


/**
 * Generate a particular style of Student Matriculation Number and e-mail based on Institution specific data
 *
 * @uses programme_types()
 * @uses me_gen_send_change_email()
 * @param int $formatID
 * @param int $serialTypeID
 * @param int $studUID
 * @param int $formerProgID 'program' CCK Drupal node nid if this is a change of Programme (or 0)
 * @param bool $dont_change_matno, TRUE if Staff have decided (in UI) not to change Matriculation Number when changing a particular Student's Programme
 * @return array of new Mat Number and e-mail
 */
function gen_udusok_style_matnum($formatID, $serialTypeID, $studUID, $formerProgID = 0, $dont_change_matno = NULL) {
  /**
  This style of matno does not have separators
  example: 0611406096,  0621406096.
  The first example is for 100 level and the second one for 200 (DE).
  The first 2 digits rep. Year of entry i.e 06.
  The third digit rep. mode of entry i.e 1 for 100 level & 2 for 200 level.
  The fourth & fifth digits rep. faculty code i.e 14.
  The sixth & seventh digits rep.departmental code for that faculty i.e 06.
  The last 3 digits rep. serial number i.e 096.

  This style will be divided into

  06-1-14-06-096
  $entryYear - $entryMode - $facCode - $deptCode - $SerialNum

  The code below assumes that faculty_abbr and department_abbr will be of numeric values as above!!!
  */

  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);

  $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, ctp.field_program_type_value, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code
  	FROM {content_type_program} ctp
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid
  	WHERE ctp.nid=%d";

  $rs = db_query($sql,$student_profile->profile_first_choice);
  if (db_affected_rows($rs) <= 0) return false;
  $rsStudent = db_fetch_object($rs);

  // If only a Level change or specifically requested, Don't change the Mat No
  if (($student_profile->profile_first_choice == $formerProgID) || !empty($dont_change_matno)) {
    $return = array($student_profile->profile_matno, $student_profile->university_email);
    return $return;
  }

  //check for change of programme
  if (FALSE && $formerProgID != 0) { // FALSE Because for udusok we change the Mat No no matter what (if we get this far)
    //now if the candidate is moving within the same faculty, no new mat is required
    //get the faculty of the old programme
     $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code
  	FROM {content_type_program} ctp
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid
  	WHERE ctp.nid=%d";

     $rs = db_query($sql,$formerProgID);
     if (db_affected_rows($rs) <= 0) return false;
     $rsFormerProg = db_fetch_object($rs);

     if($rsStudent->faculty_nid == $rsFormerProg->faculty_nid){
       //the faculties are the same...so no need to proceed. Just return the current mat num
       $return = array($student_profile->profile_matno, $student_profile->university_email);
       return $return;
     }
  }

  //although we know that they are using faculty serial, who knows they may have choosen global serial. Lets just test
  //check the serial type
  if($serialTypeID == 1){
    //seems they decided to change to global serial...ok
    $sql = "SELECT next_num FROM mat_num_general_serial WHERE session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }

    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;

    //increment the counter
    $sql = "UPDATE mat_num_general_serial SET next_num=next_num + 1 WHERE session_name='%s'";
    db_query($sql, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');

  }
  else {//for Faculty Counter / Serial
    //now lets get his faculty's serial counter
    $sql = "SELECT next_num FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }

    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;

    //increment the counter
    $sql = "UPDATE mat_num_faculty_serial SET next_num=next_num + 1 WHERE faculty_nid=%d AND session_name='%s'";
    db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
  }

  $entryYear = substr(variable_get('eduerp_current_session', ''), 2, 2);
  $entryMode = strtoupper(strtolower($student_profile->profile_mode_of_entry)) == 'DE' ? '2' : '1';
  $facCode = $rsStudent->faculty_code;
  $deptCode = $rsStudent->department_code;
  $program_type = $rsStudent->field_program_type_value;
  $program_types = programme_types();

  if ($student_profile->profile_mode_of_study == 'Part_Time') {
    $mode_of_study = '2';
  }
  else {
    $mode_of_study = '1';
  }

  //because this is an open development, lets check if there exists format details...e.g prefix, separator etc.

  $sql = "SELECT mat_num_institution_prefix AS prefix, mat_num_separator AS seprator  FROM mat_num_format_details WHERE mat_num_format_id=%d";
  $rs = db_query($sql, $formatID);

  if (db_affected_rows($rs) > 0) {
    //seems they now want prefix and separators..ok
    $rsDetails = db_fetch_object($rs);

    $matNumber = ($rsDetails->prefix . $rsDetails->seprator . $entryYear . $rsDetails->seprator . $entryMode . $rsDetails->seprator . $facCode . $rsDetails->seprator . $deptCode . $rsDetails->seprator . $SerialNum);
  }
  else{
    //now bring them together

    if ($program_types[$program_type] == 'Matric') {
      $matNumber = $entryYear . '1' . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Certificate CIS') {
      $matNumber = $entryYear . '1' . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Diploma CIS') {
      $matNumber = $entryYear . '2' . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Postgraduate Diploma') {
      $matNumber = $entryYear . '1' . $mode_of_study . $facCode . $deptCode . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Postgraduate Masters') {
      $matNumber = $entryYear . '2' . $mode_of_study . $facCode . $deptCode . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Postgraduate PhD') {
      $matNumber = $entryYear . '3' . $mode_of_study . $facCode . $deptCode . $SerialNum;
    }
    elseif ($program_types[$program_type] == 'Postgraduate MPhil') {
      $matNumber = $entryYear . '4' . $mode_of_study . $facCode . $deptCode . $SerialNum;
    }
    else {
      $matNumber = $entryYear . $entryMode . $facCode . $deptCode . $SerialNum;
    }
  }

  db_query("INSERT INTO {debug_clearance_matno} SET matno=%d, first_choice=%d, uid=%d, timest=%d, type=%d", $matNumber, $student_profile->profile_first_choice, $studUID, time(), 2); //ab Debug Instumentation

  //generate the email
  $email = me_gen_email($studUID, $matNumber, $formerProgID);

  if ($formerProgID != 0) me_gen_send_change_email($studUID, $matNumber, $email);

  $return = array($matNumber, $email);
  return $return;
}


/**
 * Send an e-mail to a Student indicating Programme has been changed with details
 *
 * @param int $student_id
 * @param string $matNumber
 * @param string $email
 */
function me_gen_send_change_email($student_id, $matNumber, $email) {
  global $user;
  $user_profile = new UserProfile($student_id);

  if (!empty($user_profile->personal_email)) {
    $sql = "SELECT field_programme_name_value FROM {content_type_program} WHERE nid=%d";
    $result = db_query($sql, $user_profile->profile_first_choice);
    $row = db_fetch_object($result);

    $subject = 'Your University Programme has been Changed';

    $body = '';
    if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
      $middle = '';
      if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
      $body .= "Dear $user_profile->profile_first_name {$middle}$user_profile->profile_last_name,\n\n";
    }

    $body .= "Your University Programme has been Changed.\n\n";
    $body .= "Your new Programme is: {$row->field_programme_name_value}\n\n";
    $body .= "You now have a new Admission Number which is: {$matNumber}\n\n";
    $body .= "Please note this carefully as you will need this admission number to access the university systems.\n";
    $body .= "This admission number replaces your previous admission number that you used to login to the university system.\n";
    $body .= "Your Password remains unchanged.\n\n";
    $body .= "Your new university e-mail is: {$user_profile->university_email}\n";
    $body .= "To access your e-mail go to " . variable_get('eduerp_zimbra_webmail_url', '') . "\n";
    $body .= "To login to your university e-mail use the same username and password that you have been instructed to use to access the university system.\n\n";
    $body .= "Please see " . variable_get('eduerp_student_guidlines_url', '') . " for guidlines.\n\n";
    $body .= variable_get('eduerp_institution_current', '') . "\n";

    $message = drupal_mail('student', 'newprogramme', $user_profile->personal_email, language_default(), array(), $user->mail, FALSE);
    $message['subject'] = $subject;
    $message['body'] = $body;
    drupal_mail_send($message);
  }
}


/**
 * Generate a particular style of Student Matriculation Number and e-mail based on Institution specific data. This has NOT been kept up to date!
 *
 * @param int $formatID
 * @param int $serialTypeID
 * @param int $studUID
 * @param int $formerProgID 'program' CCK Drupal node nid if this is a change of Programme (or 0)
 * @return array of new Mat Number and e-mail
 */
function gen_veritas_style_matnum($formatID, $serialTypeID, $studUID, $formerProgID=0){
 /**
  This style of matno have separators
  example: VUG-PHY-09-003
  The first 3 chracters represent intitution prefix.
  The next 5-7 chracters represent faculty abbr.
  The next 9-10 digits rep year of entry
  The next 12-14 digits represent university-wide serial.


  This style will be divided into

  VUG-PHY-09-003
  $instPrefix - $facCode - $entryYear - $SerialNum

  The separator used is '-'
  */

  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);

  $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code
  	FROM {content_type_program} ctp
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid
  	WHERE ctp.nid=%d";

  $rs = db_query($sql,$student_profile->profile_first_choice);// $studUID,
  if (db_affected_rows($rs) <= 0) return false;
  $rsStudent = db_fetch_object($rs);

  //check for change of programme
  if($formerProgID != 0){
    //now if the candidate is moving within the same faculty, no new mat is required
    //get the faculty of the old programme
     $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code
  	FROM {content_type_program} ctp
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid
  	WHERE ctp.nid=%d";

     $rs = db_query($sql,$formerProgID);
     if (db_affected_rows($rs) <= 0) return false;
     $rsFormerProg = db_fetch_object($rs);

     if($rsStudent->faculty_nid == $rsFormerProg->faculty_nid){
       //the faculties are the same...so no need to proceed. Just return the current mat num
       $return = array($student_profile->profile_matno, $student_profile->university_email);
       return $return;
     }
  }

  //although we know that they are using institution wide serial, who knows they may have choosen faculty serial. Lets just test
  //check the serial type
  if($serialTypeID == 1){//general serial
    //ok great. Lets generate the serial
    $sql = "SELECT next_num FROM mat_num_general_serial WHERE session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }

    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;

    //increment the counter
    $sql = "UPDATE mat_num_general_serial SET next_num=next_num + 1 WHERE session_name='%s'";
    db_query($sql, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
  }
  else {//for Faculty Counter / Serial
    //seems they decided to change to faculty serial...ok
    $sql = "SELECT next_num FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' FOR UPDATE ";
    $rs = db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    if (db_affected_rows($rs) <= 0) {
      db_query('ROLLBACK');
      return false;
    }

    $rsSerial = db_fetch_object($rs);
    $SerialNum = $rsSerial->next_num;

    //increment the counter
    $sql = "UPDATE mat_num_faculty_serial SET next_num=next_num + 1 WHERE faculty_nid=%d AND session_name='%s'";
    db_query($sql, $rsStudent->faculty_nid, variable_get('eduerp_current_session', ''));
    db_query('COMMIT');
  }

  $entryYear = substr(variable_get('eduerp_current_session', ''), 2, 2);
  $facCode = $rsStudent->faculty_code;

  $sql = "SELECT mat_num_institution_prefix AS prefix, mat_num_separator AS seprator  FROM mat_num_format_details WHERE mat_num_format_id=%d";
  $rs = db_query($sql, $formatID);

  if (db_affected_rows($rs) > 0) {
    //append prefix and separators
    $rsDetails = db_fetch_object($rs);

    $matNumber = ($rsDetails->prefix . $rsDetails->seprator . $facCode . $rsDetails->seprator . $entryYear . $rsDetails->seprator . $SerialNum);
  }
  else{
    //no prefix or separator info was found so just bring them together
    $matNumber = ($facCode . $entryYear . $SerialNum);
  }

  //generate the email
  $email = me_gen_email($studUID, $matNumber, $formerProgID);

  $return = array($matNumber, $email);
  return $return;
}


/**
 * Implementation of hook_updFacultyInfo() to update 'mat_num_faculty_serial' and 'email_faculty_subdomain_description' tables for a Session
 *
 * @param int $facNID 'college' CCK Drupal node nid
 * @param string $sessionName
 * @param string $facSubDomain
 */
function me_gen_updFacultyInfo($facNID, $sessionName, $facSubDomain){
  //create entry for mat num gen
  //check if the nid exists
  $sql = "SELECT faculty_nid FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s'";
  $rs = db_query($sql, $facNID, $sessionName);
  if (db_affected_rows($rs) <= 0) {
    //we need to create the new faculty
    $sql = "INSERT INTO mat_num_faculty_serial (faculty_nid, session_name) VALUES (%d, '%s') ";
    $rs = db_query($sql, $facNID, $sessionName);
  }
  //end of entry for mat num gen

  //create entry for email gen
  //check if the nid exists
  $sql = "SELECT faculty_nid FROM email_faculty_subdomain_description WHERE faculty_nid=%d";
  $rs = db_query($sql, $facNID);
  if (db_affected_rows($rs) <= 0) {
    //we need to create the new faculty
    $sql = "INSERT INTO email_faculty_subdomain_description (faculty_nid, email_subdomain) VALUES (%d, '%s') ";
    $rs = db_query($sql, $facNID, $facSubDomain);
  }
  else {
    //update the email_subdomain
    $sql = "UPDATE {email_faculty_subdomain_description} SET email_subdomain='%s' WHERE faculty_nid=%d ";
    $rs = db_query($sql, $facSubDomain, $facNID);
  }

  //also just check general_serial
  //make sure it does not exist first
  $sql = "SELECT mat_num_general_serial_id FROM mat_num_general_serial WHERE session_name='%s' ";
  $rs = db_query($sql, $sessionName );
  if (db_affected_rows($rs) <= 0) {
    $sql = "INSERT INTO mat_num_general_serial (session_name) VALUES ('%s') ";
    db_query($sql, $sessionName);
  }
  //end of entry for email gen
}


/**
 * Generate Student e-mail based on Institution specific data
 *
 * @param int $studUID
 * @param string $matNum
 * @param int $formerProgID 'program' CCK Drupal node nid if this is a change of Programme (or 0)
 * @return string
 */
function me_gen_email($studUID, $matNum, $formerProgID=0){
  //get the institution choice

  $sql = "SELECT email_domain_format_id AS email_domain_format, email_user_format_id AS email_user_format FROM {email_institution_choice} ";
  $rs = db_query($sql);
  if (db_affected_rows($rs) <= 0) return false;

  $instChoice = db_fetch_object($rs);

  //get the candidate's program, department and faculty info
  $student_profile = new UserProfile($studUID);

  if (FALSE && $formerProgID != 0) { // Always change e-mail if we get this far
    //the candidate already has university email. Just return it
    return $student_profile->university_email;
  }

  //lets get the domain part of the email
  switch($instChoice->email_domain_format){
    case '1'://single or group domains
      //get it
      $sql = "SELECT email_domain FROM {email_general_domain_description} ";
      $rs = db_query($sql);
      if (db_affected_rows($rs) <= 0) return false;

      $row = db_fetch_object($rs);

      $domainPart = $row->email_domain;

    break;
    case '2': //for faculty based subdomains
      //get faculty info
      $sql = "SELECT ctc.nid AS faculty_nid, ctd.nid AS department_nid, ctp.nid AS programme_nid, field_department_code_value AS department_code, field_college_abbreviation_value AS faculty_code
  	FROM {content_type_program} ctp
  	INNER JOIN {content_type_department} ctd ON ctp.field_department_id_nid=ctd.nid
  	INNER JOIN {content_type_college} ctc ON ctd.field_college_id_nid=ctc.nid
  	WHERE ctp.nid=%d";

      $rs = db_query($sql,$student_profile->profile_first_choice);
      if (db_affected_rows($rs) <= 0) return false;
      $rsStudent = db_fetch_object($rs);

      //now get his faculty's subdomain

      $sql = "SELECT email_subdomain FROM email_faculty_subdomain_description WHERE faculty_nid=%d";
      $rs = db_query($sql,$rsStudent->faculty_nid);
      if (db_affected_rows($rs) <= 0) return false;

      $row = db_fetch_object($rs);

      $domainPart = $row->email_subdomain;

    break;

    default: return false;
  }

  //lets get the user part of the email

  switch($instChoice->email_user_format){
    case '1'://udusok userpart style - [last_name][last 2 digits of session_name][student_serial]
      $userPart = ($student_profile->profile_last_name . substr(variable_get('eduerp_current_session', ''), 2, 2) . substr($matNum, -3, 3));

    break;

    case '2'://veritas userpart style - matriculation number
      $userPart =  $matNum;

    break;

    default: return false;
  }

  // Convert to ASCII
  $userPart = iconv('UTF-8', 'ASCII//TRANSLIT', $userPart);

  // Note: Last name always starts with [A-Z], so first letter will always be alfa
  $cleanedUserPart = '';
  for ($i = 0; $i < strlen($userPart); $i++) {
    $chari = substr($userPart, $i, 1);
    if (preg_match('/^[a-zA-Z0-9\._-]$/', $chari)) $cleanedUserPart .= $chari;
  }

  $userEmail = $cleanedUserPart . '@' . $domainPart;

  $userEmail = strtolower(strtoupper($userEmail));

  $student_profile->university_email = $userEmail;
  $student_profile->save();

  if (empty($student_profile->personal_email)) {
    $student = user_load($studUID);

    $student_profile->personal_email = $student->mail;
    $student_profile->save();
  }

  $student = user_load($studUID);
  if (module_exists('zimbra')) {
    $zimbra = new ZimbraSoapClient(variable_get('zimbra_soap_url', ''));

    $oldZimbraMail = $student->name;
    $oldUserEmail = $oldZimbraMail . '@' . variable_get('zimbra_domain', '');
    $newZimbraMail = substr($userEmail, 0, strpos($userEmail, '@'));

    if (zimbra_login($zimbra) && ($id = zimbra_get_id($zimbra, $oldZimbraMail)) && ($result = zimbra_rename($zimbra, $id, $oldZimbraMail, $newZimbraMail))) {
      user_save($student, array('mail' => $userEmail));
      watchdog('zimbra', 'Zimbra account for %name was renamed to %name_new.', array('%name' => $oldUserEmail, '%name_new' => $userEmail));
    }
    else {
      user_save($student, array('mail' => $userEmail)); // Do it anyway because the error is not for real on mis.udusok.edu.ng
      watchdog('zimbra', 'Zimbra account for %name was not renamed to %name_new.', array('%name' => $oldUserEmail, '%name_new' => $userEmail), WATCHDOG_ERROR);
      //drupal_set_message(t('Zimbra e-mail account for %name was not renamed to %name_new. Please contact site administrator.', array('%name' => $oldUserEmail, '%name_new' => $userEmail)), 'error');
    }
  }
  else drupal_set_message('Zimbra module is not loaded so Student e-mail cannot be assigned');

  return $userEmail;
}


/**
 * Implementation of hook_createsession() to update our tables once the Session changes
 *
 * @param string $sessioname
 */
function me_gen_createsession($sessioname){
  //get all facultites
  $sql = "SELECT nid AS faculty_nid, field_college_email_subdomain_value AS faculty_subdomain
  	FROM {content_type_college} ";

  $rsFaculty = db_query($sql);
  if (db_affected_rows($rsFaculty) <= 0) return false;

  $sqlmat = "INSERT INTO mat_num_faculty_serial (faculty_nid, session_name ) VALUES ";
  $sqlemail = "INSERT INTO email_faculty_subdomain_description (faculty_nid, email_subdomain ) VALUES ";

  $foundEmail = false; $foundMat = false;
  while($row = db_fetch_object($rsFaculty)){

    //make sure it does not exist first
    $sql = "SELECT faculty_nid FROM mat_num_faculty_serial WHERE faculty_nid=%d AND session_name='%s' ";
    $rs = db_query($sql, $row->faculty_nid, $sessioname );

    if (db_affected_rows($rs) <= 0) {
      $sqlmat .= "('". $row->faculty_nid ."', '". $sessioname ."'), ";
      $foundMat = true;
    }

    //make sure it does not exist first
    $sql = "SELECT faculty_nid FROM email_faculty_subdomain_description WHERE faculty_nid=%d ";
    $rs = db_query($sql, $row->faculty_nid );

    if (db_affected_rows($rs) <= 0) {
      $sqlemail .= "('". $row->faculty_nid ."', '". $row->faculty_subdomain ."'), ";
      $foundEmail = true;
    }
  }

  if($foundMat){
    $sqlmat = substr($sqlmat, 0, -2);
    db_query($sqlmat);
  }

  if($foundEmail){
    $sqlemail = substr($sqlemail, 0, -2);
    db_query($sqlemail);
  }

  //insert for global serial
  //make sure it does not exist first
  $sql = "SELECT mat_num_general_serial_id FROM mat_num_general_serial WHERE session_name='%s' ";
  $rs = db_query($sql, $sessioname );
  if (db_affected_rows($rs) <= 0) {
    $sql = "INSERT INTO mat_num_general_serial (session_name) VALUES ('%s') ";
    db_query($sql, $sessioname);
  }
}
?>
