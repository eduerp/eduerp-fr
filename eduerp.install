<?php
include('fixtures.inc');
include_once('permissions_api.module');


/**
 * initialize the permissions for roles in this module
 */
function eduerp_perms_initialize() {
  $permissions = array(
    'authenticated user' => array(
      // 'create profile content',
      'edit own profile content',

      // 'edit field_profile_country_name',
      // 'edit field_profile_dob',
      // 'edit field_profile_first_name',
      'edit field_profile_maiden_name',
      // 'edit field_profile_gender',
      // 'edit field_profile_last_name',
      // 'edit field_profile_lga_name',
      'edit field_profile_marital_status',
      // 'edit field_profile_middle_name',
      'edit field_profile_mobile_number',
      'edit field_profile_permanent_address',
      'edit field_profile_permanent_city',
      'edit field_profile_permanent_state',
      'edit field_profile_photograph',
      'edit field_profile_religion',
      'edit field_profile_signature',
      // 'edit field_profile_state_name_origin',
      'edit field_profile_title_name',

      'view field_profile_country_name',
      'view field_profile_department_id',
      'view field_profile_dob',
      'view field_profile_first_name',
      'view field_profile_maiden_name',
      'view field_profile_gender',
      'view field_profile_last_name',
      'view field_profile_lga_name',
      'view field_profile_marital_status',
      'view field_profile_middle_name',
      'view field_profile_mobile_number',
      'view field_profile_permanent_address',
      'view field_profile_permanent_city',
      'view field_profile_permanent_state',
      'view field_profile_photograph',
      'view field_profile_religion',
      'view field_profile_signature',
      'view field_profile_state_name_origin',
      'view field_profile_title_name',
    ),

    'anonymous user' => array(
      // 'create profile content',

      'edit field_profile_country_name',
      'edit field_profile_dob',
      'edit field_profile_first_name',
      'edit field_profile_maiden_name',
      'edit field_profile_gender',
      'edit field_profile_last_name',
      'edit field_profile_lga_name',
      'edit field_profile_marital_status',
      'edit field_profile_middle_name',
      'edit field_profile_mobile_number',
      'edit field_profile_permanent_address',
      'edit field_profile_permanent_city',
      'edit field_profile_permanent_state',
      'edit field_profile_photograph',
      'edit field_profile_religion',
      'edit field_profile_signature',
      'edit field_profile_state_name_origin',
      'edit field_profile_title_name',
    ),
  );

  return $permissions;
}


function eduerp_install() {
  // Install the schemas
  drupal_install_schema('eduerp');

  // Load fixtures
  $fixtures_path = dirname(__FILE__) . "/fixtures/";
  load_fixtures('eduerp_states', $fixtures_path . "states.csv", true);
  load_fixtures('eduerp_lgas', $fixtures_path . "lgas.csv", true);
  load_fixtures('eduerp_countries', $fixtures_path . "countries.csv", true);

  //create sku gen table
  db_query("CREATE TABLE IF NOT EXISTS `gen_fee_item_sku` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sku_name` varchar(50) NOT NULL,
  `next_num` int(3) unsigned zerofill NOT NULL,
  PRIMARY KEY (`id`),
  KEY `next_num` (`next_num`)
  ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ");

  db_query("INSERT INTO `gen_fee_item_sku` (`id`, `sku_name`, `next_num`) VALUES (1, 'PRODUCT-FEE-ITEM', 001)");

  db_query("INSERT INTO eduerp_roles VALUES (1, 1,  0, 0, 'Role Assigner')");

  variable_set('user_register', 1); // This a system setting (0 => no self registrations, 1 => yes, 2 => yes, admin approval needed)
  variable_set('user_registration_help', '<b><br />IMPORTANT: When completing this form you must fill the compulsory fields that have * beside them. Your form will not be accepted if you do not fill these fields and you will be forced to fill any omitted fields.<br /><br />Session for which you are registering: 9999/9999</b>');

  // For content_profile: Set weight, registration_use (Profile & Student) & admin_user_create_use (Profile & Staff) appropriately
  variable_set('content_profile_profile', unserialize('a:8:{s:6:"weight";s:1:"0";s:12:"user_display";s:4:"full";s:9:"edit_link";i:0;s:8:"edit_tab";s:3:"sub";s:8:"add_link";i:1;s:16:"registration_use";i:1;s:21:"admin_user_create_use";i:1;s:17:"registration_hide";a:0:{}}'));
  variable_set('content_profile_student_profile', unserialize('a:8:{s:6:"weight";s:1:"1";s:12:"user_display";s:4:"full";s:9:"edit_link";i:0;s:8:"edit_tab";s:3:"sub";s:8:"add_link";i:1;s:16:"registration_use";i:1;s:21:"admin_user_create_use";i:0;s:17:"registration_hide";a:0:{}}'));
  variable_set('content_profile_staff_profile', unserialize('a:8:{s:6:"weight";s:1:"2";s:12:"user_display";s:4:"full";s:9:"edit_link";i:0;s:8:"edit_tab";s:3:"sub";s:8:"add_link";i:1;s:16:"registration_use";i:0;s:21:"admin_user_create_use";i:1;s:17:"registration_hide";a:0:{}}'));

  // Wording for Ubercart cart/checkout or any other required "Translations"
  $text = array(
    'Order information will be sent to your account e-mail listed below.'
      => 'If you are due a Scholarship and that is not reflected in the fees above, <a href="/edupay/displaycart">click here to get a summary of fees to bring to the Scholarship Board</a>.<br />You will need to come back to this page after getting a scholarship and click <b>Send Fee Details for Processing</b><br /><br />After you have clicked <b>Send Fee Details for Processing</b> below you will be brought to a page that explains next steps for those students that need to pay fees.<br /><br />Please note that all payments made at the bank will incur an additional NGN 300 transaction charge.<br /><br />Order information will be sent to your University e-mail account (you will not be able to change this).',
    'Review order' => 'Send Fee Details for Processing (Click Once Only!)',
  );
  // Note that 'incur an additional NGN 300 transaction charge' is later overwritten with correct amount from "variable_get('eduerp_bank_transaction_charge', '')"
  // ... whenever that setting is changed
  variable_set('locale_custom_strings_en', $text);

  drupal_set_message('eduerp module installed');
}


function eduerp_enable() {
  // Install the content types
  $profile_content_type = file_get_contents(dirname(__FILE__) . '/cck/cck_profile.txt');

  $profile_info = content_types('profile');

  $form_state = array(
    'values' => array(
      // Updates the content type if it's existent, if not, creates it.
      'type_name' => (is_array($profile_info) && array_key_exists('type', $profile_info)) ? 'profile' : '<create>',
      'macro' => $profile_content_type,
    ),
  );
  drupal_execute('content_copy_import_form', $form_state);

  // These are installs for the school fees module
  install_other_content_type('cck_school_fees_item_setup_details.txt', 'school_fee_item_setup_details');
  install_other_content_type('cck_school_fees_approved_instalments.txt', 'school_fee_approved_instalments');
  install_other_content_type('cck_school_fees_approved_scholarships.txt', 'school_fee_approved_scholarships');
  install_other_content_type('cck_school_fees_items.txt', 'school_fee_items');
  install_other_content_type('cck_school_fees_item_setup.txt', 'school_fee_item_setup');
  install_other_content_type('cck_school_fees_settings.txt', 'school_fee_settings');
  install_other_content_type('cck_school_fees_level_types.txt', 'school_fee_level_types');
  install_other_content_type('cck_school_fees_structure_classes.txt', 'school_fee_structure_classes');
  install_other_content_type('cck_school_fees_nationality_types.txt', 'school_fee_nationality_types');
  install_other_content_type('cck_school_fees_scholarship_types.txt', 'school_fees_scholarship_types');

  // execute raw queries
  db_query('CREATE INDEX field_fee_setup_session_value ON {content_type_school_fee_item_setup} (field_fee_setup_session_value)');
  db_query('CREATE INDEX field_sas_session_name_value ON {content_type_school_fee_approved_scholarships} (field_sas_session_name_value)');
  db_query('CREATE INDEX field_sai_session_name_value ON {content_type_school_fee_approved_instalments} (field_sai_session_name_value)');

  content_clear_type_cache();


  // set content type permissions
  $perms = eduerp_perms_initialize();

  foreach ($perms as $role => $permissions) {
    permissions_grant_permissions($role, $permissions);
  }
}


function eduerp_disable() {
  // remove content type permissions
  $perms = eduerp_perms_initialize();

  foreach ($perms as $role => $permissions) {
    permissions_revoke_permissions($role, $permissions);
  }
}


function eduerp_uninstall(){
  // uninstall the schemas
  drupal_uninstall_schema('eduerp');

  drupal_set_message('eduerp module uninstalled');
}


function eduerp_schema() {
  $schema['session'] = array(
    'description' => t('Table for storing school session data'),
    'fields' => array(
      'session_id' => array(
        'description' => t('Session ID'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sess_name' => array(
        'description' => t('Session Name e.g. 2009/2010'),
        'type' => 'varchar',
        'length' => '30',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('session_id'),
  );

  $schema['eduerp_lgas'] = array(
    'description' => t('This table stores Local Government Areas of a state'),
    'fields' => array(
      'lga_id' => array(
        'description' => t('Primary Key ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lga_rel' => array(
        'description' => t('Foreign Key to the States table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lga_name' => array(
        'description' => t('The name of the LGA'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['eduerp_countries'] = array(
    'description' => t('Stores a list of countries'),
    'fields' => array(
      'country_id' => array(
        'description' => t('Primary Key ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'country_name' => array(
        'description' => t('The name of the country'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['eduerp_states'] = array(
    'description' => t('Table for storing the states in a country'),
    'fields' => array(
      'state_id' => array(
        'description' => t('State ID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'state_name' => array(
        'description' => t('State Name'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['program_level_semester'] = array(
    'description' => t('Program Level Semester'),
    'fields' => array(
      'programme_id' => array(
        'description' => t('Programme ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'level' => array(
        'description' => t('Level'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'min_credit_load' => array(
        'description' => t('Minimum Credit Load'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'max_credit_load' => array(
        'description' => t('Maximum Credit Load'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'open_for_registrations' => array(
        'description' => t('Open for registration'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'programme_id' => array('programme_id'),
    ),
  );

  $schema['program_course'] = array(
    'description' => t('Program Course'),
    'fields' => array(
      'program_course_id' => array(
        'description' => t('Program Course ID'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'course_id' => array(
        'description' => t('Course ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'programme_id' => array(
        'description' => t('Programme'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'level' => array(
        'description' => t('Level'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'course_type' => array(
        'description' => t('Course Type - 1 is core and 2 is elective'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'lecturer_id' => array(
        'description' => t('Lecturer'),
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'historical' => array(
        'description' => t('Historical - 0 is active and 1 is not to be used for new selections'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'credit_load' => array(
        'description' => t('Credit Load for this Course in this Program'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('program_course_id'),
    'indexes' => array(
      'programme_id' => array('programme_id'),
      'course_id' => array('course_id'),
    ),
  );

  $schema['program_course_instance'] = array(
    'description' => t('Program Course Instance'),
    'fields' => array(
      'course_instance_id' => array(
        'description' => t('Course Instance ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'programme_id' => array(
        'description' => t('Programme ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'session' => array(
        'description' => t('Session'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'semester' => array(
        'description' => t('Semester'),
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'programme_id' => array('programme_id')
    )
  );

  $schema['course_grade_weightings'] = array(
    'description' => t('Course Grade Weightings'),
    'fields' => array(
      'course_id' => array(
        'description' => t('Course ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'number_of_ca' => array(
        'description' => t('Number of CAs'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ca_approved_onebyone' => array(
        'description' => t('CA approved One by One'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca1' => array(
        'description' => t('Maximum mark for CA1'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca2' => array(
        'description' => t('Maximum mark for CA2'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca3' => array(
        'description' => t('Maxmimum mark for CA3'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_ca4' => array(
        'description' => t('Maximum mark for CA4'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_mark_exam' => array(
        'description' => t('Maximum mark for exam'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca1' => array(
        'description' => t('Weighting for CA1'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca2' => array(
        'description' => t('Weighting for CA2'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca3' => array(
        'description' => t('Weighting for CA3'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_ca4' => array(
        'description' => t('Weighting for CA4'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight_exam' => array(
        'description' => t('Weighting for exam'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'course_id' => array('course_id')
    )
  );

  $schema['eduerp_roles'] = array(
    'description' => t('EduERP roles'),
    'fields' => array(
      'eduerp_role_id' => array(
        'description' => t('EduERP Role ID'),
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('User ID'),
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'department_id' => array(
        'description' => t('Department ID'),
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'college_id' => array(
        'description' => t('College ID'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
      'role' => array(
        'description' => t('Role'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('eduerp_role_id'),
    'indexes' => array(
      'uid' => array('uid'),
      'department_id' => array('department_id'),
      'college_id' => array('college_id'),
      'role' => array('role')
    )
  );

  $schema['cron_notification'] = array(
    'description' => t('CRON notifications'),
    'fields' => array(
      'approver_uid' => array(
        'description' => t('Approver UID'),
        'type' => 'int',
        'default' => 0,
      ),
      'student_uid' => array(
        'description' => t('Student UID'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gradestext' => array(
        'description' => t('Grades text'),
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'programme' => array(
        'description' => t('Programme'),
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'instruction' => array(
        'description' => t('Instruction'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
  );

  $schema['cron_edupay_send_queue'] = array(
    'description' => t('CRON Queue for POSTS to be sent to EduPay'),
    'fields' => array(
      'serial_id' => array(
        'description' => t('id used to delete processed entries'),
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => t('Serialised data to be sent to EduPay'),
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('serial_id'),
  );

  $schema['eduerp_product_options'] = array(
    'description' => 'UberCart Options for each Product/Program/Level/Nationality/Instalment.',
    'fields' => array(
      'product_nid' => array(
        'description' => 'The UC Product',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'aid' => array(
        'description' => 'The {uc_attributes}.aid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => 'The option ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'program_nid' => array(
        'description' => 'The Programme nid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'level_name' => array(
        'description' => 'The Level',
        'type' => 'varchar',
        'length' => 17,
        'not null' => TRUE,
      ),
      'nationality' => array(
        'description' => 'The Nationality',
        'type' => 'varchar',
        'length' => 13,
        'not null' => TRUE,
      ),
      'instalment' => array(
        'description' => 'The Instalment',
        'type' => 'varchar',
        'length' => 11,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array('program_nid_product_nid' => array('program_nid', 'product_nid')),
  );

  $schema['student_semaphore'] = array(
    'description' => t('Semaphores for Students'),
    'fields' => array(
      'uid' => array(
        'description' => t('Student uid'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'semaphore_value' => array(
        'description' => t('Semaphore'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'semaphore_timestamp' => array(
        'description' => t('Timestamp'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid'),
  );

  return $schema;
}


function install_other_content_type($filename, $content_type_name) {
  $content_type_data = file_get_contents(dirname(__FILE__) . '/cck/'.$filename);

  // determine if to replace content type or create it
  $content_type_info = content_types($content_type_name);

  $form_state = array(
    'values' => array(
      'type_name' => (is_array($content_type_info) && array_key_exists('type', $content_type_info)) ? $content_type_name : '<create>',
      'macro' => $content_type_data,
    ),
  );
  drupal_execute('content_copy_import_form', $form_state);
}
