<?php
include(drupal_get_path('module', 'eduerp') . '/eduerp_global.inc');

/**
 * Implementation of hook_menu(), called to generate menus when module setup at admin/build/modules is saved.
 */
function staff_menu() {
  $items['staff/semester'] = array(
    'title' => 'Semester Administration',
    'page callback' => 'semester_admin',
    'access arguments' => array('staff register course'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -36,
  );

  $items['staff/list']=array(
    'title'=>'Staff List',
    'page callback' => 'search_staff_list',
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/department']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_department_list',
    'access arguments' => array('staff department list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/viewlecturer']=array(
    'title'=>'Staff List',
    'page callback' => 'staff_course_list',
    'access arguments' => array('staff view lecturer'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/view']=array(
    'title'=>'Staff Summary',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('staff_view_form'),
    'access arguments' => array('staff list'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/assignrole'] = array(
    'title' => 'Staff Roles',
    'page callback' => 'staff_assign_role',
    'access arguments' => array('staff assign role'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/ajax']=array(
    'title' => 'AJAX Routines',
    'page callback' => '_staff_ajax',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/createeditfaculty'] = array(
    'title' => 'Create/Modify Faculty',
    'page callback' => 'staff_create_edit_faculty',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK
  );
  $items['staff/createeditdept'] = array(
    'title' => 'Create/Modify Department',
    'page callback' => 'staff_create_edit_dept',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK
  );
  $items['staff/createeditcourse']=array(
    'title'=>'Create/Modify a Course',
    'page callback' => 'staff_create_edit_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/createmodifyprog']=array(
    'title'=>'Create/Modify a Programme',
    'page callback' => 'staff_create_edit_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/specifycourse']=array(
    'title'=>'Specify Courses for a Programme',
    'page callback' => 'staff_specify_course_for_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/verifycourse']=array(
    'title'=>'Verify all Courses needed for a Programme are being run for a Semester',
    'page callback' => 'staff_verify_assigned_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );
  $items['staff/studentprogress']=array(
    'title'=>'Student Progress towards Graduation',
    'page callback' => 'staff_student_progress_qualification',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/gradesreport']=array(
    'title' => t('Grades Report'),
    'page callback' => 'staff_gradesreport',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/unregstudents']=array(
    'title'=>'List of Students who have Not Registered for a Semester',
    'page callback' => 'staff_unregistered_students',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/dropcoursereg']=array(
    'title'=>'Mark a Course Registration as Dropped',
    'page callback' => 'staff_drop_registered_course',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/manualcoursereg']=array(
    'title'=>'Manually Register a Student in a Course',
    'page callback' => 'staff_manual_course_reg',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/changeprogmme']=array(
    'title'=>"Change a Student's Programme",
    'page callback' => 'staff_change_student_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/checkverifyprogmme']=array(
    'title'=>"Check have all existing Courses required for all Programmes been Verified",
    'page callback' => 'staff_check_verify_programme_courses',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/missingcourses']=array(
    'title'=>'Check for Missing Courses for a Semester',
    'page callback' => 'staff_check_for_missing_courses',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/schoolfeesadmin'] = array(
    'title' => 'School Fees Administration',
    'page callback' => 'staff_school_fees_admin',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/createmodifyfeeitem'] = array(
    'title' => 'Create / Modify School Fee Item',
    'page callback' => 'staff_school_fees_create_modify_school_fee_item',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/createmodifyfeestup'] = array(
    'title' => 'Create / Modify School Fee Setup',
    'page callback' => 'staff_school_fees_create_modify_school_fee_setup',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/updatesettings'] = array(
    'title' => 'Update Fee Settings',
    'page callback' => 'staff_school_fees_update_settings',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/scholarshippayment'] = array(
    'title' => 'Authorise Scholarship',
    'page callback' => 'staff_school_fees_scholarship_payment',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/authoriseinstalment'] = array(
    'title' => 'Authorise Instalment Payment',
    'page callback' => 'staff_school_fees_authorise_instalment_payment',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

   $items['staff/testattributes'] = array(
    'title' => 'Testing Attributes and Options',
    'page callback' => 'staff_school_fees_test_attr',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/createmodifschlshptypes'] = array(
    'title' => 'Create / Modify Scholarship Types',
    'page callback' => 'staff_school_fees_create_modify_scholarship_types',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/removepending'] = array(
    'title' => 'Remove Pending Invoices',
    'page callback' => 'staff_school_fees_remove_pending_orders',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/add_once_off_invoice'] = array(
    'title' => 'Add Once Off Invoice',
    'page callback' => 'staff_add_once_off_invoice',
    'access arguments' => array('student payments'),
    'type' => MENU_CALLBACK
  );

  $items['staff/changeuncleared']=array(
    'title'=>"Change Programme for Uncleared Candidate",
    'page callback' => 'staff_change_uncleared_candidate_programme',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  $items['staff/archivestudent'] = array(
    'title' => 'Archive a Student who does not yet have any Exam Marks',
    'page callback' => 'staff_archive_student',
    'access arguments' => array('staff register course'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Call back to handle AJAX POSTs to update data in the HTML of a Drupal page. Handling is controlled by the '#ahah' part of a Drupal form element
 *
 * @uses get_programmes()
 * @uses _staff_ahah_render()
 * @users get_Staff_in_Department()
 */
function _staff_ajax() {
  global $user;
  $task = arg(2);

  switch ($task):
    case 'course':
      $courses[""] = "";

      $program = $_POST['programme_id'];
      $level = $_POST['level'];

      // Retrieve available courses that have not been assigned
      //we want to put the courses of the department for the level selected at the top and then others will follow
      //get the programme info
      $programInfo = db_fetch_object(get_programmes($program));
      //get the courses not assigned for the level for the department
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE c.field_level_value = '". $level ."' AND d.nid = ". $programInfo->department_nid ."
        ORDER BY field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
        c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
      $rs = db_query($sql); $courses1 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses1[$row->course_id] = $row->course_code;
        }
      }
      //get the courses not assigned for other levels for the department
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE c.field_level_value != '". $level ."' AND d.nid = ". $programInfo->department_nid ."
        ORDER BY field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
        c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
       $rs = db_query($sql); $courses2 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses2[$row->course_id] = $row->course_code;
        }
      }

        //get the courses not assigned for levels for other departments
      $sql = "SELECT DISTINCT (c.nid) AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
          INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
          INNER JOIN {content_type_program} p ON p.field_department_id_nid=d.nid
        WHERE d.nid != ". $programInfo->department_nid ."
        ORDER BY d.field_department_name_value, field_programme_name_value, c.field_level_value, c.field_semester_value, c.field_code_value ";
        /*
         c.nid NOT IN
        (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=". $program ." AND pc.level='". $level ."' AND pc.historical=0)
        AND
        */
      $rs = db_query($sql); $courses3 = array();
      if(db_affected_rows($rs) > 0) {
        while ($row = db_fetch_object($rs)) {
          $courses3[$row->course_id] = $row->course_code;
        }
      }
       //order it as required
      $courses = $courses1 + $courses2 + $courses3;
        /*
      $sql = "SELECT c.nid AS course_id, c.field_code_value AS course_code FROM {content_type_course} c
        WHERE c.nid NOT IN (SELECT pc.course_id FROM {program_course} pc WHERE pc.programme_id=%d AND pc.level='%s' AND pc.historical=0)
        ORDER BY c.field_code_value ASC";
      $rs = db_query($sql, $program, $level);
      while ($row = db_fetch_object($rs)) {
        $courses[$row->course_id] = $row->course_code;
      }
      */
      $form['course_id'] = array(
        '#type' => 'select',
        '#title' => 'Course',
        '#options' => $courses,
        '#attributes' => array('style' => 'width:100px'),
        '#required' => TRUE);

      $output = _staff_ahah_render($form, 'course_id');
      print drupal_to_js(array('data' => $output, 'status' => true));
      break;
    case 'delete':
      $allocation_id = arg(3);

      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=1 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

      if (db_affected_rows() > 0) echo "OK";
      else echo "FAIL";
      break;
    case 'deleteassignprog':
      $allocation_id = arg(3);
      //$_SESSION['eduerp_showCourseAssignment'] = 1;
      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=1 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

      if (db_affected_rows() > 0) echo "OK";
      else echo "FAIL";
      break;
    case 'modifyassignprog':
      //$allocation_id = arg(3);
      $_SESSION['eduerp_showCourseAssignment'] = 1;

      break;
    case 'makeavailable':
      $allocation_id = arg(3);
      // Delete this allocation
      $sql = "UPDATE {program_course} SET historical=0 WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);

    break;
     case 'fix_course':
      $allocation_id = arg(4);
      // get the record to be used as defaults
      $sql = "SELECT course_id, programme_id, level, semester, course_type, lecturer_id FROM {program_course} WHERE program_course_id=%d";
      $rs = db_query($sql, $allocation_id);
      $row = db_fetch_object($rs);
      $_SESSION['eduerp_fix_course']->field_course_id_nid = $row->course_id;
      $_SESSION['eduerp_fix_course']->field_semester_name_value = $row->semester;
      $_SESSION['eduerp_fix_course']->field_lecturer_uid = $row->lecturer_id;
      $_SESSION['eduerp_fix_course']->session = $_SESSION['eduerp_verify']['session'];
      $_SESSION['eduerp_fix_course']->semester = $_SESSION['eduerp_verify']['semester'];
      $_SESSION['eduerp_return_url'] = "staff/verifycourse/" . arg(3);
    break;

    case 'programmelevel':
          $programme_nid = $_POST['programme_nid'];
          //get the levels for the programme
      $sql = "SELECT DISTINCT(level) level FROM {program_level_semester} WHERE programme_id = %d ORDER BY level ";
      $rs = db_query($sql, $programme_nid);
      while($row = db_fetch_object($rs))
        $levels[$row->level] = $row->level;

      $form['level_name'] = array(
        '#type' => 'select',
        '#options' => $levels,
        '#title' => 'New Start Level',
        '#attributes' => array(
      'style' => 'width:100px'),
        '#required' => TRUE
      );

      $output = _staff_ahah_render($form, 'level_name');
      print drupal_to_js(array('data' => $output, 'status' => true));
      break;
    case 'getdeflecturer':
    	 $course_nid = $_POST['course_nid']; $id = "";
    	 //get the default lecturer for the course
        $sql = "SELECT lecturer_id id FROM {program_course} WHERE course_id = %d LIMIT 1 ";
        $rs = db_query($sql, $course_nid);
        while($row = db_fetch_object($rs))
          $id = $row->id;

  	$form['chief_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(''=>'') + get_Staff_in_Department(),
      '#title' => 'First Lecturer',
      '#required'  => TRUE,
      '#default_value' => $id
        );
        $output = _staff_ahah_render($form, 'chief_staff_nid');
        print drupal_to_js(array('data' => $output, 'status' => true));
    	    break;
    case 'getblocks': //case 'getallocblocks':
    	 $hostel_nid = $_POST['hostel_nid']; $id = "";
    	 /*
    	if($task == 'getallocblocks'){
    	  $sql = "SELECT nid, field_block_name_value FROM {content_type_blocks} WHERE field_hostel_id_nid = %d ";

    	  switch($_SESSION['eduerp_reserve_room']['gender']):
		  case 'male':
		    $sql .= " AND (field_block_type_value = 1 OR field_block_type_value = 0) "; //get blocks that are male only or mixed
			break;
		  case 'female':
		    $sql .= " AND (field_block_type_value = 2 OR field_block_type_value = 0) "; //get blocks that are female only or mixed
		    break;
		  endswitch;


    	}else
    	*/
          $sql = "SELECT nid, field_block_name_value FROM {content_type_blocks} WHERE field_hostel_id_nid = %d ";

        $rs = db_query($sql, $hostel_nid);
        while($row = db_fetch_object($rs))
          $blocks[$row->nid] = $row->field_block_name_value;

  	$form['block_nid'] = array(
      '#type' => 'select',
      '#options' => $blocks,
      '#title' => 'Block Name',
      '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='shwblocks'>",
      '#suffix' => "</div>",
      '#required' => TRUE

        );
        $output = _staff_ahah_render($form, 'block_nid');
        print drupal_to_js(array('data' => $output, 'status' => true));
    	break;
    case 'getroomsinblock':
    	 $block_nid = $_POST['block_nid']; $id = "";

          $sql = "SELECT nid, field_room_name_value FROM {content_type_rooms} WHERE field_block_id_nid = %d ";

        $rs = db_query($sql, $block_nid);
        while($row = db_fetch_object($rs))
        $rooms[$row->nid] = $row->field_room_name_value;

  	$form['room_nid'] = array(
    '#title' => 'Room Name',
    '#type' => 'select',
    '#options' => $rooms,
    '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='shwrooms'>",
      '#suffix' => "</div>",
      //'#disabled' => TRUE,
    '#required' => TRUE
    );
        $output = _staff_ahah_render($form, 'room_nid');
         print drupal_to_js(array('data' => $output, 'status' => true));
    	break;
  endswitch;
  exit();
}


/**
 * Render form elements for AHAH call back (this function is largely based on the poll module, its been simplified for reuse)
 *
 * @param array $fields is the specific form elements you want to attach via AHAH
 * @param string $name is the form fields array key... e.g. the name for $form['title'] is "title"
 * @return string HTML
 */
function _staff_ahah_render($fields, $name) {

  $form_state = array();
  $fields['__drupal_alter_by_ref'] = array(&$form_state); // Special pass by reference functionality (will avoid warnings on the empty array being passed by value using call_user_func_array())
  drupal_alter('form', $fields, 'staff_course_form'); // Note as 'staff_course_form' does not exist, this may do nothing in any case!
  //drupal_alter('form', $fields, array(), 'staff_course_form');

  $form_state = array('submitted' => FALSE,'#values'=>$_POST);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  if($form[$name]['#required'] == true){
    $fields['#required'] =  true;
  }
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
   $form_state = array('submitted' => FALSE);

  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);
}


/**
 * Implementation of hook_perm(), to tell permissions system what to display on the permissions page for staff.module
 */
function staff_perm() {
  return array('staff register','staff assign role','staff register course','staff view lecturer','staff department list','staff list', 'student data', 'staff data', 'student payments', 'student list students', 'view grading');
}


/**
 * Handles 'staff/assignrole' menu to assign EduERP roles for Staff
 *
 * @uses staff_has_eduerp_role()
 * @uses department_role_form()
 * @uses faculty_role_form()
 * @uses university_role_form()
 * @uses current_roles_list_form()
 * @uses move_department_form()
 * @uses describeroles()
 * @global stdClass $_SESSION['eduerpassignrole'] is set to contain values needed for subforms
 * @return string HTML
 */
function staff_assign_role() {
  global $user;
  if (!staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) {
      drupal_set_message('You are not authorized to access this page.');
      drupal_goto('user');
  }

  $_SESSION['eduerpassignrole']->uid = arg(2);

  $user_profile = new UserProfile($_SESSION['eduerpassignrole']->uid);
  $staffname = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = ' ' . $user_profile->profile_middle_name;
    $staffname = "{$user_profile->profile_last_name}, {$user_profile->profile_first_name}{$middle}";
  }
  $_SESSION['eduerpassignrole']->name = $staffname;
  if (!empty($user_profile->profile_department_id)) {
    $_SESSION['eduerpassignrole']->department_id = $user_profile->profile_department_id;
    $result = db_query("SELECT field_college_id_nid FROM {content_type_department} WHERE nid=%d");
    $row = db_fetch_object($result, $user_profile->profile_department_id);
    $_SESSION['eduerpassignrole']->college_id = $row->field_college_id_nid;
  }
  else {
    $_SESSION['eduerpassignrole']->department_id = 0;
    $_SESSION['eduerpassignrole']->college_id = 0;
  }

  ob_start();

  echo "<b>Assign Roles or move Home Department for {$staffname}...</b><br />";

  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('department_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('faculty_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('university_role_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('current_roles_list_form');
  echo '<br /><br /><hr /><br />';
  echo drupal_get_form('move_department_form');
  echo '<br /><br /><hr />';

  describeroles();

  return ob_get_clean();
}


/**
 * Form to assign EduERP Roles for a Department
 *
 * @uses department_role_form_submit()
 * @uses eduerp_department_roles()
 * @uses department()
 * @global stdClass $_SESSION['eduerpassignrole'] has been set to contain values needed
 * @return array Drupal Form
 */
function department_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Department role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_department_roles(),
    '#title' => 'Role',
    '#default_value' => 'Department Examination Officer',
    '#required' => TRUE);

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


/**
 * Form to assign EduERP Roles for a Faculty
 *
 * @uses faculty_role_form_submit()
 * @uses eduerp_faculty_roles()
 * @uses faculty()
 * @global stdClass $_SESSION['eduerpassignrole'] has been set to contain values needed
 * @return array Drupal Form
 */
function faculty_role_form($form_state) {
  $form['top'] = array('#value' => "Give another Faculty role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_faculty_roles(),
    '#title' => 'Role',
    '#default_value' => 'Faculty Examination Officer',
    '#required' => TRUE);

  $form['faculty'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty',
    '#default_value' => $_SESSION['eduerpassignrole']->college_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->college_id)) unset($form['faculty']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


/**
 * Form to assign EduERP Roles University wide
 *
 * @uses university_role_form_submit()
 * @uses eduerp_university_roles()
 * @global stdClass $_SESSION['eduerpassignrole'] has been set to contain values needed
 * @return array Drupal Form
 */
function university_role_form($form_state) {
  $form['top'] = array('#value' => "Give another University role to {$_SESSION['eduerpassignrole']->name}:");

  $form['role'] = array(
    '#type' => 'select',
    '#options' => eduerp_university_roles(),
    '#title' => 'Role',
    '#default_value' => 'University Examination Viewer',
    '#required' => TRUE);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Assign new role to {$_SESSION['eduerpassignrole']->name}");
  return $form;
}


/**
 * List EduERP Roles for Department
 *
 * @return array
 */
function eduerp_department_roles() {
  $options = array(
    'Department Examination Officer' => 'Department Examination Officer',
    'Department Grade Editor' => 'Department Grade Editor',
    'Head of Department' => 'Head of Department'
  );
  return $options;
}


/**
 * List EduERP Roles for Faculty
 *
 * @return array
 */
function eduerp_faculty_roles() {
  $options = array(
    'Faculty Examination Officer' => 'Faculty Examination Officer',
    'Faculty Grade Editor' => 'Faculty Grade Editor',
    'Dean of Faculty' => 'Dean of Faculty'
  );
  return $options;
}


/**
 * List EduERP Roles University wide
 *
 * @return array
 */
function eduerp_university_roles() {
  $options = array(
    'Non-Academic Staff' => 'Non-Academic Staff',
    'Academic Staff' => 'Academic Staff',
    'University Examination Viewer' => 'University Examination Viewer',
    'University Grade Editor' => 'University Grade Editor',
    'Bursar' => 'Bursar',
    'Bursary' => 'Bursary',
    'Registry' => 'Registry',
    'Registrar' => 'Registrar',
    'Vice-Chancellor' => 'Vice-Chancellor',
    'Student Affairs Officer' => 'Student Affairs Officer',
    'Role Assigner' => 'Role Assigner'
  );
  return $options;
}


/**
 * Determine if Staff member has one or more EduERP roles
 *
 * @param int $uid
 * @param int $department_id 'department' CCK Drupal node nid (or 0)
 * @param int $faculty_id 'college' CCK Drupal node nid (or 0)
 * @param array $roles
 * @return bool
 */
function staff_has_eduerp_role($uid, $department_id, $faculty_id, $roles) {
  $result = db_query("SELECT er.role FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d", $uid, $department_id, $faculty_id);

  while ($row = db_fetch_object($result)) {
    if (in_array($row->role, $roles)) return TRUE;
  }
  return FALSE;
}


/**
 * Find Faculties
 *
 * @param int $facultyNID 'college' CCK Drupal node nid (or 0)
 * @return array of nid => Name for all Faculties or one (if 0)
 */
function faculty($facultyNID=0) {
  static $options;
  if (!$options) {
    $options = array();
    if($facultyNID==0)
      $r = db_query("SELECT nid, field_college_name_value AS value FROM {content_type_college} ORDER BY field_college_name_value");
    else
      $r = db_query("SELECT nid, field_college_name_value AS value FROM {content_type_college} WHERE nid=%d ORDER BY field_college_name_value", $facultyNID);

    while ($f = db_fetch_object($r))
      $options[$f->nid] = $f->value;
  }
  return  $options;
}


/**
 * Form to allow some or all of a Staff member's EduERP Roles to be removed
 *
 * @uses current_roles_list_form_submit()
 * @global stdClass $_SESSION['eduerpassignrole'] has been set to contain values needed
 * @return array Drupal Form
 */
function current_roles_list_form($form_state) {
  $form['top'] = array('#value' => "All current roles for {$_SESSION['eduerpassignrole']->name}:<br />");

  $result = db_query("SELECT er.eduerp_role_id,
      CONCAT(er.role, IFNULL(CONCAT(' (', d.field_department_name_value, ')'), IFNULL(CONCAT(' (', c.field_college_name_value, ')'), ''))) AS name
    FROM {eduerp_roles} er
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college}    c ON er.college_id=c.nid
    WHERE er.uid=%d ORDER BY er.role", $_SESSION['eduerpassignrole']->uid);

  $form['roles'] = array('#tree' => TRUE);
  $found = FALSE;
  while ($row = db_fetch_object($result)) {
    $found = TRUE;
    $form['roles'][$row->eduerp_role_id] = array(
      '#type' => 'checkbox',
      '#title' => $row->name,
      '#default_value' => TRUE
    );
  }

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  if ($found) {
    $form['submit'] = array('#type' => 'submit', '#value' => "Remove any roles unchecked above from {$_SESSION['eduerpassignrole']->name}");
  }
  else {
    $form['noroles'] = array('#value' => '<br />No Roles Assigned<br />');
  }
  return $form;
}


/**
 * Form to allow a Staff member's Department to be changed (this has mimimal import Currently in EduERP, Department EduERP Roles are more important)
 *
 * @uses move_department_form_submit()
 * @uses department()
 * @global stdClass $_SESSION['eduerpassignrole'] has been set to contain values needed
 * @return array Drupal Form
 */
function move_department_form($form_state) {
  $user_profile = new UserProfile($_SESSION['eduerpassignrole']->uid);
  if (empty($user_profile->profile_department_id)) {
    $dept_text = 'Does not currently have a department';
  }
  else {
    $department_array = department($user_profile->profile_department_id);
    $dept_text = "Department is currently: {$department_array[$user_profile->profile_department_id]}";
  }

  $form['top'] = array('#value' => "Move {$_SESSION['eduerpassignrole']->name} to a new department:<br />({$dept_text})");

  $form['department'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department',
    '#default_value' => $_SESSION['eduerpassignrole']->department_id,
    '#required' => TRUE);
    if (empty($_SESSION['eduerpassignrole']->department_id)) unset($form['department']['#default_value']);

  $form['uid'] = array('#type' => 'value', '#value' => $_SESSION['eduerpassignrole']->uid);

  $form['submit'] = array('#type' => 'submit', '#value' => "Move {$_SESSION['eduerpassignrole']->name} to the above department");
  return $form;
}


/**
 * submit hook for {@link department_role_form()}
 *
 * @uses addrole()
 */
function department_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], $form_state['values']['department'], 0, $form_state['values']['role']);
}


/**
 * submit hook for {@link faculty_role_form()}
 *
 * @uses addrole()
 */
function faculty_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, $form_state['values']['faculty'], $form_state['values']['role']);
}


/**
 * submit hook for {@link university_role_form()}
 *
 * @uses addrole()
 */
function university_role_form_submit($form, &$form_state) {
  addrole($form_state['values']['uid'], 0, 0, $form_state['values']['role']);
}


/**
 * Add an EduERP Role to a Staff member along with a relevant Drupal Role if required
 *
 * @uses assign_drupal_role()
 * @param int $uid
 * @param int $department_id 'department' CCK Drupal node nid (or 0)
 * @param int $college_id 'college' CCK Drupal node nid (or 0)
 * @param string $role
 */
function addrole($uid, $department_id, $college_id, $role) {
  $result = db_query("SELECT 1 FROM {eduerp_roles} er WHERE er.uid=%d AND er.department_id=%d AND er.college_id=%d AND er.role='%s'",
    $uid, $department_id, $college_id, $role);
  if (!db_fetch_object($result)) {
    db_query("INSERT INTO {eduerp_roles} SET uid=%d, department_id=%d, college_id=%d, role='%s'",
      $uid, $department_id, $college_id, $role);
    drupal_set_message('Role Assigned');
  }

  if ($role === 'Registry' || $role === 'Registrar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Registry');
  }
  if ($role === 'Bursary' || $role === 'Bursar' || $role === 'Vice-Chancellor') {
    assign_drupal_role($uid, 'Bursary');
  }
  if ($role === 'Student Affairs Officer') {
    assign_drupal_role($uid, 'SA');
  }
  if ($role === 'Academic Staff' || $role === 'Non-Academic Staff') {
    // 'Staff' role allocation is now a manual admin process
    // assign_drupal_role($uid, 'Staff');
  }
}


/**
 * Add a Drupal Role to a Staff member
 *
 * @param int $uid
 * @param string $role
 */
function assign_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  $roles[$row->rid] = $role; // If it is new, it will be added, ($role is not relevent, must be something)

  user_save($staff_user, array('roles' => $roles));
}


/**
 * submit hook for {@link current_roles_list_form()} (Drop any checked EduERP Roles)
 *
 * @uses @droprole()
 */
function current_roles_list_form_submit($form, &$form_state) {
  $i = 0;
  if (!empty($form_state['values']['roles'])) {
    foreach ($form_state['values']['roles'] as $eduerp_role_id => $checked) {
      if (!$checked) {
        droprole($form_state['values']['uid'], $eduerp_role_id);
        $i++;
      }
    }
  }

  if ($i == 1) drupal_set_message('Role Removed');
  else drupal_set_message("$i Roles Removed");
}


/**
 * Drop an EduERP Role from a Staff member along with a relevant Drupal Role if required
 *
 * @uses staff_has_eduerp_role()
 * @param int $uid
 * @param int $eduerp_role_id
 */
function droprole($uid, $eduerp_role_id) {
  $result = db_query("SELECT role FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  if ($row = db_fetch_object($result)) {
    db_query("DELETE FROM {eduerp_roles} WHERE eduerp_role_id=%d", $eduerp_role_id);
  }

  if (!staff_has_eduerp_role($uid, 0, 0, array('Registry', 'Registrar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Registry');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Bursary', 'Bursar', 'Vice-Chancellor'))) {
    drop_drupal_role($uid, 'Bursary');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Student Affairs Officer'))) {
    drop_drupal_role($uid, 'SA');
  }
  if (!staff_has_eduerp_role($uid, 0, 0, array('Academic Staff', 'Non-Academic Staff'))) {
    // 'Staff' role allocation is now a manual admin process
    // drop_drupal_role($uid, 'Staff');
  }
}


/**
 * Drop a Drupal Role to a Staff member
 *
 * @param int $uid
 * @param string $role
 */
function drop_drupal_role($uid, $role) {
  $result = db_query("SELECT rid FROM {role} WHERE name='%s'", $role);
  $row = db_fetch_object($result);

  $staff_user = user_load($uid);
  $roles = $staff_user->roles;
  unset($roles[$row->rid]);

  user_save($staff_user, array('roles' => $roles));
}


/**
 * submit hook for {@link move_department_form()} (Move a Staff member to a different Department)
 */
function move_department_form_submit($form, &$form_state) {
  $user_profile = new UserProfile($form_state['values']['uid']);
  $user_profile->profile_department_id = $form_state['values']['department'];
  $user_profile->save();

  drupal_set_message("Department Moved");
}



/**
 * Handles 'staff/list' menu
 *
 * @uses staff_search_list()
 * @return string HTML
 */
function search_staff_list() {
  ob_start();

  staff_search_list();

  return ob_get_clean();
}


/**
 * Handles 'staff/viewlecturer' menu to Display Courses and Lecturers for a Department for the Current Session
 *
 * @return string HTML
 */
function staff_course_list() {
  ob_start();
  for ($i = 1; $i <= 3; $i++) {
    $query = "SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
      FROM
        (SELECT
          c.field_code_value AS code,
          c.field_coursetitle_value AS course_title,
          ci.field_lecturer_uid AS uid
        FROM {content_type_course} c, {content_type_course_instance} ci
        WHERE
          c.field_department_nid_nid=%d AND c.nid=ci.field_course_id_nid AND
          ci.field_sess_name_value='" .  variable_get('eduerp_current_session', '')  . "' AND
          ci.field_semester_name_value='{$i}'
        ) AS courses
      LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
      LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
      ORDER by code";
    $result = db_query($query, arg(2));
    echo "<b><br />Courses Running in Current Session, Semester {$i}...</b>";
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Code</b></td><td><b>Lecturer</b></td><td><b>Course</b></td></tr>
<?php
    while ($f = db_fetch_object($result)) {
?>
      <tr>
      <td><? echo $f->code; ?></td>
      <td><a href="view/<?php echo $f->uid?>"><? echo $f->staff_name; ?></a></td>
      <td><? echo $f->course_title; ?></td>
      </tr>
<?php
    }
?>
    </table>
<?php
  }

  $query = "SELECT c.field_code_value AS code, c.field_coursetitle_value AS course_title FROM {content_type_course} c WHERE c.field_department_nid_nid=%d ORDER by code";
  $result = db_query($query, arg(2));
  echo "<b><br />All Courses In this Department...</b>";
?>
  <table border='1' align='center'  cellpadding="5" cellspacing="5">
  <tr bgcolor='#ACCFCC'><td><b>Code</b></td><td><b>Course</b></td></tr>
<?php
  while ($f = db_fetch_object($result)) {
?>
    <tr>
    <td><? echo $f->code; ?></td>
    <td><? echo $f->course_title; ?></td>
    </tr>
<?php
    }
?>
    </table>
<?php

  return ob_get_clean();
}


/**
 * Handles 'staff/department' menu to Display Department, Head of Department and a link to Courses for the Department
 *
 * @return string HTML
 */
function staff_department_list() {
  ob_start();
  $r = db_query("SELECT
      d.nid AS department_id,
      d.field_department_name_value AS department_name,
      er.uid AS hod_uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS hod_name
    FROM {content_type_department} d
    LEFT JOIN {eduerp_roles} er ON d.nid=er.department_id AND er.role='Head of Department'
    LEFT JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY department_name");
?>
    <table border='1' align='center'  cellpadding="5" cellspacing="5">
    <tr bgcolor='#ACCFCC'><td><b>Department</b></td><td><b>HOD</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($r)) {
?>
      <tr>
      <td><? echo $f->department_name; ?></td>
      <td><a href="view/<?php echo $f->hod_uid?>"><? echo $f->hod_name; ?></a></td>
      <td><a href="viewlecturer/<? echo $f->department_id; ?>">View Courses/Lecturers</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  return ob_get_clean();
}


/**
 * Display Staff, their EduERP Roles and a link to Assign Roles for the Staff member (along with description of all EduERP roles)
 *
 * @uses describeroles()
 */
function staff_search_list() {
  /*
  $search_keys = array('gender', 'department_id', 'staff_type_id', 'grade_level_id', 'state');
  $search_values = array(
    'gender' => '',
    'department_id',
    'staff_type_id',
    'grade_level_id',
    'state');
  $data = array_filter($_POST);
  $condition = array();
  foreach ($search_keys as $value) {
    if (isset($data['$value'])) {
      $condition[] = "s .". $value ."='". $data[$value] ."'";
    }
  }
  if (implode(' and ', $condition) != '') {
    $condition = " where ". implode(' and ', $condition);
  }
  else {*/
    $condition  = '';
  /*}*/
  $query = "SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name,
      GROUP_CONCAT(CONCAT(er.role, IFNULL(CONCAT('(', d.field_department_name_value, ')'), ''), IFNULL(CONCAT('(', c.field_college_name_value, ')'), '')) ORDER BY er.role SEPARATOR ', ') AS role_name
    FROM {users_roles} ur
    INNER JOIN {role} r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    LEFT JOIN {eduerp_roles} er ON ur.uid=er.uid
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college} c ON er.college_id=c.nid
    $condition
    GROUP BY ur.uid ORDER BY name";
  $result = db_query($query);
?>
    <table border='1' align='center'>
    <tr bgcolor='#ACCFCC'><td colspan='4'><b>Staff List</b></td></tr>
    <tr><td><b>Name</b></td><td><b>Roles</b></td><td><b>View</b></td><td><b>Action</b></td></tr>
<?php
  while ($f = db_fetch_object($result)) {
?>
      <tr>
      <td><?php echo $f->name ?></td>
      <td><? echo $f->role_name; ?></td>
      <td><a href="view/<? echo $f->uid; ?>">View</a></td>
      <td><a href="<?php echo url('staff/assignrole/'. $f->uid)?>">Assign Roles</a></td>
      </tr>
<?php
  }
?>
    </table>
<?php
  describeroles();
}


/**
 * Display description of all EduERP roles
 */
function describeroles() {
  echo "<br />
<b>Description of roles</b><br />
Note any combination of roles can be assigned to the one staff member.<br />
<br />
<b>Department roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one department and it is not necessarily for their \"own\" department.<br />
<br />
<b><i>'Department Examination Officer'</i></b> allows a staff member to see grades for all courses in the specified department (and all grades for students in that department who have taken courses in other departments).<br />
They will also be able to see GPA and cGPA for all students in the specified department.<br />
They will be notified when a lecturer submits grades for a course in the specified department.<br />
<br />

<b><i>'Department Grade Editor'</i></b> has the same rights as <b><i>'Department Examination Officer'</i></b>.<br />
Additionally they will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified department.<br />
They can also approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b><i>'Head of Department'</i></b> has the same rights as <b><i>'Department Examination Officer'</i></b>.<br />
Additionally they can approve grades for all courses in the specified department.<br />
They can also unlock grades to allow a lecturer re-edit and re-submit changes.<br />
They can create or modify courses for the specified department.<br />
They can create or modify programmes for the specified department.<br />
<br />

<b>Faculty roles...</b><br />
<br />
Note these roles can be given to a staff member for more than one faculty and it is not necessarily for their \"own\" faculty.<br />
<br />

<b><i>'Faculty Examination Officer'</i></b> allows a staff member to see grades for all courses in the specified faculty (and all grades for students in that faculty who have taken courses in other faculties).<br />
They will also be able to see GPA and cGPA for all students in the specified faculty.<br />
They will be notified when a lecturer submits grades for a course in the specified faculty.<br />
They will be notified when grades are approved for a course in the specified faculty.<br />
<br />

<b><i>'Faculty Grade Editor'</i></b> has the same rights as <b><i>'Faculty Examination Officer'</i></b>.<br />
Additionally they will have the same rights as a course lecturer to edit and submit any grades for all courses in the specified faculty.<br />
They can also approve grades for all courses in the specified faculty.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They can also second level approve grades for all courses in the specified faculty.<br />
<br />

<b><i>'Dean of Faculty'</i></b> has the same rights as <b><i>'Faculty Examination Officer'</i></b>.<br />
Additionally they can second level approve grades for all courses in the specified faculty.<br />
<br />

<b>University roles...</b><br />
<br />
<b><i>'University Examination Viewer'</i></b> allows a staff member to see grades for all courses.<br />
They will also be able to see GPA and cGPA for all students.<br />
<br />

<b><i>'University Grade Editor'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally will have the same rights as a course lecturer to edit and submit any grades for all courses.<br />
They will be notified when a lecturer submits grades for a course.<br />
They can also approve grades for all courses.<br />
They can also unlock grades to allow a lecturer (or themselves) re-edit and re-submit changes.<br />
They will be notified when grades are approved for a course.<br />
They can also second level approve grades for all courses.<br />
They can also approve grades for all departments in place of the <b><i>'Registrar'</i></b> (if the <b><i>'Registrar'</i></b> does approve grades in this university).<br />
They can also finally approve grades for all departments in place of the Vice-Chancellor.<br />
They can edit a students's exam results even after then have been finally approved by the <b><i>'Vice-Chancellor'</i></b>. The student's GPA and cGPA will be appropriately adjusted without any further approval or notification. A record will be kept that a change has been made (as happens also for all approvals).<br />
<br />

<b><i>'Registrar'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can approve grades for all departments (if the Registrar is part of the approval chain in this university).<br />
They can perform any actions on the Semester/Programmes Admin Screen.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
<br />

<b><i>'Registry'</i></b><br />
They can perform manual additions of course registrations for a particular student including the 3rd Semester.<br />
They can mark a particular course registration for a specific student as dropped (so the student is not required to take the exam).<br />
They can change a student's programme.<br />
They can view all fully approved grading.<br />
They can see all student profiles.<br />
They can perform clearances of student applications to the university.<br />
They can see all staff profile data.<br />
<br />

<b><i>'Bursary'</i></b><br />
They can see all staff profile data.<br />
They can see all student payments.<br />
<br />

<b><i>'Bursar'</i></b> has the same rights as <b><i>'Bursary'</i></b>.<br />
They can set the various fee levels for students.<br />
They can authorise scholarships for individual students.<br />
They can authorise fee payment by instalments for individual students.<br />
<br />

<b><i>'Vice-Chancellor'</i></b> has the same rights as <b><i>'University Examination Viewer'</i></b>.<br />
Additionally they can finally approve grades for all departments.<br />
They also can do all the same things as <b><i>'Registry'</i></b>.<br />
They also can do all the same things as <b><i>'Bursary'</i></b>.<br />
<br />

<b><i>'Student Affairs Officer'</i></b><br />
They can administer hostels.<br />
They can see student profile data.<br />
<br />

<b><i>'Non-Academic Staff'</i></b> all staff should be given either <b><i>'Academic Staff'</i></b> or <b><i>'Non-Academic Staff'</i></b> but <b><i>'Non-Academic Staff'</i></b> does not actually provide anything. (Any registered Staff Drupal user does however have some basic access to the system).<br />
<br />

<b><i>'Academic Staff'</i></b><br />
They can view all fully approved grading.<br />
They can be a lecturer in a course.<br />
<br />

<b><i>'Role Assigner'</i></b><br />
They can assign any of the above roles to any Staff Drupal user.<br />
They can create or modify Faculties or Departments.<br />";
}


/**
 * Handles 'staff/view' menu to display some Staff data
 *
 * @return array Drupal Form
 */
function staff_view_form(&$obj) {
  $query = "SELECT
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name,
      GROUP_CONCAT(er.role SEPARATOR ', ') AS role_name,
      d.field_department_name_value,
      stpro.field_profile_staff_no_value AS staff_no,
      stpro.field_profile_room_value AS room_number,
      DATE_FORMAT(stpro.field_profile_appointment_date_value, '%%D %%b %%Y') AS appointment_date
    FROM {eduerp_roles} er
    INNER JOIN {node} npro ON er.uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nstpro ON er.uid=nstpro.uid AND nstpro.type='staff_profile'
    INNER JOIN {content_type_staff_profile} stpro ON nstpro.vid=stpro.vid
    LEFT  JOIN {content_type_department} d ON pro.field_profile_department_id_nid=d.nid
    WHERE er.uid=%d GROUP BY er.uid";
  $result = db_query($query, arg(2));
  $data = db_fetch_object($result);

  $form['staff_name'] = array(
    '#type' => 'item',
    '#title' => 'Staff Name',
    '#value' => $data->staff_name);
  $form['staff_number'] = array(
  '#title' => 'Staff Number',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->staff_no);
  $form['staff_department'] = array(
    '#type' => 'item',
    '#title' => 'Department',
    '#value' => $data->field_department_name_value);
  $form['staff_room'] = array(
    '#title' => 'Room',
    '#type' => 'item',
    '#size' => 20,
    '#value' => $data->room_number);
  $form['appointment_date'] = array(
    '#type' => 'item',
    '#title' => 'Appointment date',
    '#value' => $data->appointment_date);
  $form['staff_role'] = array(
    '#value' => '<b>Roles:</b><br />' . $data->role_name);
  return $form;
}


/**
 * Find all Course Codes
 *
 * @return array of sorted strings indexed Drupal node nid (with a blank option)
 */
function staff_course() {
  $titles[''] = '';
  $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} ORDER BY field_level_value, field_semester_value, field_code_value ");
  //$r = db_query("SELECT nid, CONCAT(field_coursetitle_value, ' (', field_code_value , ')') AS value FROM {content_type_course} ORDER BY field_level_value, field_semester_value, field_code_value ");
  while ($f = db_fetch_object($r))
    $titles[$f->nid] = $f->value;
  return  $titles;
}


/**
 * Find Departments
 *
 * @param int $department_nid 'department' CCK Drupal node nid (or 0)
 * @return array of nid => Name for all Departments or one (if 0)
 */
function department($department_nid=0) {

    $titles = array();
    if($department_nid !=0)
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} WHERE nid=%d ORDER BY field_department_name_value", $department_nid);
    else
      $r = db_query("SELECT nid, field_department_name_value AS value FROM {content_type_department} ORDER BY field_department_name_value");
    while ($f = db_fetch_object($r))
      $titles[$f->nid] = $f->value;

  return  $titles;
}


/**
 * Find Programmes
 *
 * @param int $programme_nid 'program' CCK Drupal node nid (or 0)
 * @param bool $forSelectList
 * @return array|mysqli_result if $forSelectList is TRUE array of nid => Name for all Programmes or one (if 0); otherwise MYSQL Result Set
 */
function get_programmes($programme_nid = 0, $forSelectList = false) {
    $where = ""; $args = "";

    if ($programme_nid != 0) {
      $where = " WHERE p.nid=$programme_nid ";
    }
    $r = db_query("SELECT p.nid programme_nid, field_college_name_value faculty_name, d.nid department_nid, field_department_name_value AS department_name,
          field_programme_name_value programme_name, c.nid faculty_nid,
          field_duration_value duration, field_program_type_value programme_type, field_max_duration_value max_duration,
          field_min_credit_load_program_value min_credit_load, field_programme_abbr_value programme_abbr
          FROM {content_type_program} p
          INNER JOIN {content_type_department} d ON d.nid = p.field_department_id_nid
          INNER JOIN {content_type_college} c ON c.nid = d.field_college_id_nid
          ". $where ."
          ORDER BY faculty_name, department_name, programme_name ");

 if ($forSelectList) {
   if (db_affected_rows($r) > 0) {
     while ($row = db_fetch_object($r))
       $programmes[$row->programme_nid] = $row->programme_name;
   }
   else
    $programmes[] = strip_tags(Error_Types(106));

  return $programmes;
 }
 else
   return $r;
}


/**
 * Find Programmes
 *
 * @param int $programme_nid 'program' CCK Drupal node nid (or 0)
 * @return array of nid => Name(Abbreviation) for all Programmes or one (if 0)
 */
function programme($programme_nid=0) {

    if($programme_nid !=0)
      $r = db_query("SELECT nid, CONCAT(field_programme_name_value, ' (', field_programme_abbr_value, ')') AS value FROM { content_type_program} WHERE nid=%d ORDER BY field_programme_name_value", $programme_nid);
    else
      $r = db_query("SELECT nid, CONCAT(field_programme_name_value, ' (', field_programme_abbr_value, ')') AS value FROM { content_type_program} ORDER BY field_programme_name_value");


    if (db_affected_rows($r) > 0) {
      while ($f = db_fetch_object($r))
        $programmes[$f->nid] = $f->value;
    }
    else
      $programmes[] = strip_tags(Error_Types(106));

  return  $programmes;
}


/**
 * Find Courses in a Department
 *
 * @param int $department_nid 'department' CCK Drupal node nid
 * @param int $semester (or 0)
 * @return array of nid => Code for all Courses (Courses normally in this Semester are first in the list)
 */
function course($department_nid, $semester = 0) {

  $course = array();
  if ($semester != 0) {
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d AND field_semester_value=%d ORDER BY field_level_value, field_code_value", $department_nid, $semester);
    while ($f = db_fetch_object($r)) {
      $course[$f->nid] = $f->value;
    }

    // Add any other department courses at the bottom of the list
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d AND field_semester_value!=%d ORDER BY field_level_value, field_code_value", $department_nid, $semester);
    while ($f = db_fetch_object($r)) {
      $course[$f->nid] = $f->value;
    }

    if (empty($course)) $course[] = strip_tags(Error_Types(106));

    return  $course;
  }
  else
    $r = db_query("SELECT nid, field_code_value AS value FROM {content_type_course} WHERE field_department_nid_nid=%d ORDER BY field_level_value, field_code_value", $department_nid);
  if (db_affected_rows($r) > 0) {
    while ($f = db_fetch_object($r))
      $course[$f->nid] = $f->value;
  }
  else
    $course[] = strip_tags(Error_Types(106));

  return  $course;
}


/**
 * Handles 'staff/semester'/Semester Administration menu
 *
 * @return string HTML
 */
function semester_admin() {
  ob_start();

  echo '<br /><hr /><br />';

  echo drupal_get_form('set_session_form');
  echo '<br /><hr /><br />';

  echo '<a href="' . url('staff/missingcourses') . '">Check for Missing Courses for a Semester (no Lecturer or Timetable Assigned)</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/checkverifyprogmme') . '">Check if all existing Courses required for all Programmes have been Verified (associated with the Programme)</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/schoolfeesadmin') . '">School Fees Administration</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('admin/build/fees') . '">School Fees Report</a>';
  echo '<br /><br /><hr /><br />';

  echo drupal_get_form('open_close_student_registration_form');
  echo '<br /><hr /><br />';

  echo drupal_get_form('open_close_student_course_registration_form');
  echo '<br /><hr /><br />';

  echo '<a href="' . url('grading/statsuni') . '">Grading Statistics for University</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/studentprogress') . '">Student Progress towards Graduation</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/gradesreport') . '">' . t('Grades Report') . '</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/unregstudents') . '">List of Students who have Not Registered for a Semester</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/department') . '">View Departments and Courses</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('liststaff') . '">List Staff</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditcourse') . '">Create or Modify Courses for a Department</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createmodifyprog') . '">Create or Modify a University Programme</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditdept') . '">Create or Modify a Department</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/createeditfaculty') . '">Create or Modify a Faculty</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/list') . '">List Staff and Assign Roles</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/manualcoursereg') . '">Manually Register a Student in a Course</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/dropcoursereg') . '">Mark a Student as Not being Required to take an Exam for a course they have enrolled in</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/changeprogmme') . '">Change a Student to a Different Programme</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/changeuncleared') . '">Change Programme for Uncleared Candidate</a>';
  echo '<br /><br /><hr /><br />';

  echo '<a href="' . url('staff/archivestudent') . '">Archive a Student who does not yet have any Exam Marks</a>';
  echo '<br /><br /><hr /><br />';

  return ob_get_clean();
}


/**
 * Form to set the Session and Semester
 *
 * @uses set_session_form_submit()
 * @uses staff_has_eduerp_role()
 * @return array Drupal Form
 */
function set_session_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'The current Session is: ' . variable_get('eduerp_current_session', '') . ' and current Semester is: ' . variable_get('eduerp_current_semester', ''));

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $current_year = intval(date('Y'));
    $sessions = array();
    $sessions[sprintf("%s/%s", $current_year - 0, $current_year + 1)] = sprintf("%s/%s", $current_year - 0, $current_year + 1);
    $sessions[sprintf("%s/%s", $current_year - 1, $current_year - 0)] = sprintf("%s/%s", $current_year - 1, $current_year - 0);
    $sessions[sprintf("%s/%s", $current_year - 2, $current_year - 1)] = sprintf("%s/%s", $current_year - 2, $current_year - 1);
    $sessions[sprintf("%s/%s", $current_year - 3, $current_year - 2)] = sprintf("%s/%s", $current_year - 3, $current_year - 2);

    $form['eduerp_current_session'] = array(
      '#type' => 'select',
      '#options' => $sessions,
      '#title' => 'Current Session',
      '#default_value' => variable_get('eduerp_current_session', sprintf("%s/%s", $current_year - 1, $current_year)),
      '#description' => 'Please specify the current session'
    );

    $form['eduerp_current_semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Current Semester',
      '#default_value' => variable_get('eduerp_current_semester', 1),
      '#description' => 'Please specify the current semester'
    );

    $form['submit'] = array('#type' => 'submit', '#value' => 'Set the Session and Semester');
  }
  return $form;
}


/**
 * submit hook for {@link set_session_form()}
 *
 * @uses me_gen_createsession()
 */
function set_session_form_submit($form, &$form_state) {

  variable_set('eduerp_current_session', $form_state['values']['eduerp_current_session']);
  variable_set('eduerp_current_semester', $form_state['values']['eduerp_current_semester']);

  $text = preg_replace('#registering: [0-9]{4,4}/[0-9]{4,4}#', 'registering: ' . $form_state['values']['eduerp_current_session'], variable_get('user_registration_help', ''));
  variable_set('user_registration_help', $text);

  // Check if the current session is in the session table
  $session_rs = db_query("SELECT sess_name FROM {session} WHERE sess_name = '%s'", $form_state['values']['eduerp_current_session']);
  if (!db_result($session_rs)) {
    db_query("INSERT INTO {session} (sess_name) VALUES ('%s')", $form_state['values']['eduerp_current_session']);
  }

  module_invoke_all('createsession', $form_state['values']['eduerp_current_session']);
}


/**
 * Form to Open or Close Registration of New Student Applicant Accounts
 *
 * @uses open_close_student_registration_form_submit()
 * @uses staff_has_eduerp_role()
 * @return array Drupal Form
 */
function open_close_student_registration_form($form_state) {
  global $user;

  // We could add a from element with more options that just on/off
  if (variable_get('user_register', 1)) { // This a system setting (0 => no self registrations, 1 => yes, 2 => yes, admin approval needed)
    $open = 'Open';
    $closeverb = 'Close';
  }
  else {
    $open = 'Closed';
    $closeverb = 'Open';
  }

  $form['top'] = array('#value' => "Student Registrations and Initial Payment are $open for the Session " . variable_get('eduerp_current_session', '') . '<br />');

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    $form['submit'] = array('#type' => 'submit', '#value' => "$closeverb Student Registrations for the Session");
  }
  return $form;
}


/**
 * submit hook for {@link open_close_student_registration_form()}
 */
function open_close_student_registration_form_submit($form, &$form_state) {

  if (variable_get('user_register', 1)) {
    variable_set('user_register', 0);
  }
  else {
    variable_set('user_register', 1);
  }
}


/**
 * Form to Open or Close Student Course Registrations for particular Programmes or All
 *
 * @uses open_close_student_course_registration_form_submit()
 * @uses listofopenprogrammes()
 * @uses staff_has_eduerp_role()
 * @uses selectlistofprogrammestoopen()
 * @uses selectlistofprogrammestoclose()
 * @return array Drupal Form
 */
function open_close_student_course_registration_form($form_state) {
  global $user;

  $form['top'] = array('#value' => 'Here are the Programmes (& Level) currenly Open for Course Registrations this Semester: ' . listofopenprogrammes());

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {

    $programmestoopen = selectlistofprogrammestoopen();
    if (!empty($programmestoopen)) {
        $form['programmestoopen'] = array(
          '#type' => 'select',
          '#options' => $programmestoopen,
          '#title' => 'Programme(level) to Open OR Open ALL',
          '#description' => 'Please specify one Programme Level to Open for Course Registrations or Open ALL'
        );
    }

    $programmestoclose = selectlistofprogrammestoclose();
    if (!empty($programmestoclose)) {
        $form['programmestoclose'] = array(
          '#type' => 'select',
          '#options' => $programmestoclose,
          '#title' => 'Programme(level) to Close OR Close ALL',
          '#description' => 'Please specify one Programme Level to Close for Course Registrations or Close ALL'
        );
    }

    if (empty($programmestoclose)) $openverb = 'Open';
    elseif (empty($programmestoopen)) $openverb = 'Close';
    else $openverb = 'Open or Close';

    $form['submit'] = array('#type' => 'submit', '#value' => "$openverb Course Registrations for this Semester");
  }
  return $form;
}


/**
 * Find Open Programmes(Level) for current Semester
 *
 * @return string
 */
function listofopenprogrammes() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $sql = "SELECT CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $names[] = $row->name;
  }
  if (empty($names)) return 'None';
  return implode('; ', $names);
}


/**
 * Find Not Opened Programmes/Level for current Semester
 *
 * @return array|bool if not FALSE sorted array of id => Name(Level) (including 'ALL' option)
 */
function selectlistofprogrammestoopen() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[''] = '';
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=0 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


/**
 * Find Opened Programmes/Level for current Semester
 *
 * @return array|bool if not FALSE sorted array of id => Name(Level) (including 'ALL' option)
 */
function selectlistofprogrammestoclose() {
  $semester = variable_get('eduerp_current_semester', 1);

  $names = array();
  $names[''] = '';
  $names[999999] = 'ALL';
  $noprogrammes = TRUE;
  $sql = "SELECT
      CONCAT(pls.programme_id, ',', pls.level, ',', pls.semester) AS id,
      CONCAT(p.field_programme_name_value, '(', pls.level, ')') AS name
    FROM {program_level_semester} pls, {content_type_program} p
    WHERE pls.open_for_registrations=1 AND pls.semester='%s' AND pls.programme_id=p.nid ORDER BY name ASC";
  $rows = db_query($sql, $semester);
  while ($row = db_fetch_object($rows)) {
    $noprogrammes = FALSE;
    $names[$row->id] = $row->name;
  }
  if ($noprogrammes) return FALSE;
  return $names;
}


/**
 * submit hook for {@link open_close_student_course_registration_form()}
 */
function open_close_student_course_registration_form_submit($form, &$form_state) {
  $semester = variable_get('eduerp_current_semester', 1);

  if     (!empty($form_state['values']['programmestoopen']) && $form_state['values']['programmestoopen'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoclose']) && $form_state['values']['programmestoclose'] == 999999) {
    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "WHERE pls.semester=$semester";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 $semesterselect");
  }
  elseif (!empty($form_state['values']['programmestoopen'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoopen']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=1 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
  elseif (!empty($form_state['values']['programmestoclose'])) {
    $prog_lev_sem = explode(',', $form_state['values']['programmestoclose']);

    if (variable_get('RegisterAllCoursesatStartofSession', 0)) $semesterselect = '';
    else $semesterselect = "AND pls.semester={$prog_lev_sem[2]}";

    db_query("UPDATE {program_level_semester} pls SET pls.open_for_registrations=0 WHERE pls.programme_id=%d AND pls.level=%d $semesterselect", $prog_lev_sem[0], $prog_lev_sem[1]);
  }
}


/**
 * Find Faculties
 *
 * @return array of nid => array of Name etc.
 */
function get_faculties() {
  $r = db_query("SELECT nid, field_college_name_value AS name, field_college_abbreviation_value AS abbr, field_college_email_subdomain_value AS fac_email_subdomain FROM {content_type_college} ORDER BY field_college_name_value");
  while ($f = db_fetch_object($r)){
    $faculties[$f->nid]['faculty_name'] = $f->name;
    $faculties[$f->nid]['faculty_abbr'] = $f->abbr;
    $faculties[$f->nid]['faculty_nid'] = $f->nid;
    $faculties[$f->nid]['faculty_email_subdomain'] = $f->fac_email_subdomain;
  }
  return $faculties;
}


/**
 * Find Departments
 *
 * @return array of nid => array of Name etc.
 */
function get_departments() {
  $r = db_query("SELECT d.nid nid, field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr, field_department_code_value AS dept_code
      FROM {content_type_department} d INNER JOIN {content_type_college} c ON d.field_college_id_nid=c.nid
      ORDER BY field_college_name_value, dept_name");
  $departments = array();
  while ($f = db_fetch_object($r)){
    $departments[$f->nid]['faculty_name'] = $f->fac_name;
    $departments[$f->nid]['faculty_abbr'] = $f->fac_abbr;
    $departments[$f->nid]['dept_nid'] = $f->nid;
    $departments[$f->nid]['dept_name'] = $f->dept_name;
    $departments[$f->nid]['dept_code'] = $f->dept_code;
  }
  return $departments;
}


/**
 * Find Courses in a Department
 *
 * @param int $department_nid 'department' CCK Drupal node nid (or 0)
 * @param int $course_nid 'course' CCK Drupal node nid (or 0)
 * @return mysqli_result
 */
function get_Available_Courses($department_nid = 0, $course_nid = 0) {
  $where = ""; $arg = 0;
  if ($department_nid != 0) {
    $where = " WHERE k.field_department_nid_nid = %d";
    $arg = $department_nid;
  }
  if ($course_nid != 0) {
    $where = " WHERE k.nid = %d";
    $arg = $course_nid;
  }

  $r = db_query("SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code,
      field_coursetitle_value AS course_title, field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_desc,
      field_prerequisite_codes_value AS prerequisite_codes, field_semester_value AS course_semester, field_course_description_value AS course_description,
      field_department_name_value AS dept_name, field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr
      FROM {content_type_course} k
      INNER JOIN {content_type_department} d ON k.field_department_nid_nid = d.nid
      INNER JOIN {content_type_college} c ON d.field_college_id_nid = c.nid
      ". $where ."
      ORDER BY field_college_name_value, dept_name, course_level, course_code ", $arg);

  return  $r;
}


/**
 * Find Courses (for display) according to criteria and highlight any issues
 *
 * @uses get_Assigned_Courses()
 * @uses get_department_running_courses()
 * @uses get_Available_Courses()
 * @uses get_Staff_in_Department()
 * @param string $session
 * @param int $semester
 * @param array $departmentInfo
 * @param int $type
 * @return string HTML
 */
function staff_display_available_courses($session, $semester, $departmentInfo = array(), $type = 0) {
  //$type; 0=available course, 1=assigned courses, 2=unassigned courses
  $department_nid = 0;$forassigned=false;
  $str = "";
  if (sizeof($departmentInfo)) {
    $key = array_keys($departmentInfo);
    $department_nid = $key[0];
  }
  switch ($type) {
    case '1':
      $courses = get_Assigned_Courses($session, $department_nid); break;//variable_get('eduerp_current_session', '')
    case '2':
      // ALAN 20110109 Does not seem to be used, verify and remove
      $courses = get_UnAssigned_Courses($session, $department_nid); break;
    case '3':
      $courses = get_department_running_courses($session, $department_nid, $semester); break; //variable_get('eduerp_current_semester', '')
    default:
      $courses = get_Available_Courses($department_nid);
  }
  if ($department_nid){
    if ($type == 1){
      $forassigned=true;
      $str  = "<b>Assigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session<br />";
    }
    elseif ($type == 2)
      $str  = "<b>UnAssigned Courses for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session </b><br />";
    elseif ($type == 3)
      $str  = "<b>List of courses that need to be run for ". $departmentInfo[$department_nid] ." Department</b> for <b>". $session ."</b> Session for Semester <b>". $semester ."</b><br />";
    else
      $str  = "<b>Available Courses for ". $departmentInfo[$department_nid] ." Department</b><br />";
  }
  else
    $str  = "<b>Available Courses</b><br />";


  if (db_affected_rows($courses) <= 0) {
    $str .= Error_Types(106);
  }
  else {

  $str .= "<div id='assigned_courses'>";
    $str .= "
    <table border=1>
      <tr>
        <th><b>#</b></th>";
        if ($type == 3)
          $str .="
          <th><b>First Lecturer</b></th>";
        if ($type != 0)
          $str .="
        <th><b>Programme Name</b></th>";
        $str .="
        <th><b>Course Level</b></th>
        <th><b>Course Code</b></th>
        <th><b>Course Title</b></th>
        <th><b>Credit load</b></th>
        <th><b>Prerequisite Codes</b></th>
        <th><b>Prerequisite Description</b></th>
        <th><b>Course Description</b></th>
        <th><b>Course Semester</b></th>";
        if ($forassigned)
          $str .="
          <th><b>Time Table</b></th>";
          $str .="
      </tr>";$i = 1; $found = false;

      while($course = db_fetch_object($courses)){
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
        //check for course to be highlighted in red
        if ($type !=0 && $course->clean_nid == "") {
          $found = true;
          $rowColor = "color='#FF0000'";

        }
        else
          $rowColor = "color='#000000'";
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>". $i++ ."</td>";
               if ($type == 3){
                 //get the staff name
                 if ($course->clean_nid != "") {
                   $staffInfo = get_Staff_in_Department(0, $course->lecturer_uid);
                   $course->staff_name = $staffInfo[$course->lecturer_uid];
                 }
                 else
                   $course->staff_name = "<i>Not Assigned yet!</i>";

                   $str .="
                 <td><font $rowColor >". $course->staff_name ."</font></td>";

               }
               if ($type != 0)
               $str .="
               <td><font $rowColor >". $course->programme_name ."</font></td>";

               $str .="
               <td><font $rowColor >". $course->course_level ."</font></td>
               <td><font $rowColor >". check_markup($course->course_code, FILTER_FORMAT_DEFAULT, FALSE) ."</font></td>
               <td><font $rowColor >". $course->course_title ."</font></td>
               <td><font $rowColor >". $course->credit_load ."</font></td>
               <td><font $rowColor >". $course->prerequisite_codes ."</font></td>
               <td><font $rowColor >". check_markup($course->prerequisite_desc, FILTER_FORMAT_DEFAULT, FALSE) ."</font></td>
               <td><font $rowColor >". check_markup($course->course_description, FILTER_FORMAT_DEFAULT, FALSE) ."</font></td>
               <td><font $rowColor >". $course->course_semester ."</font></td>";
               if ($forassigned)
                 $str .="
               <td><font $rowColor >". check_markup($course->timetable, FILTER_FORMAT_DEFAULT, FALSE) ."</font></td>";
               $str .="

             </tr>";
      }
      $str .= "
      </table>
      </div>";
  }
  $str .= "<br /><br />";
  if ($found)
    $str .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";

  return $str;
}


/**
 * Find Programmes (for display)
 *
 * @uses get_programmes()
 * @used programme_types()
 * @return string HTML
 */
function staff_display_available_programmes() {

  $str  = "<b>Available Programme</b><br />";

  $programmes = get_programmes();
  if (db_affected_rows($programmes) <= 0) {
    $str .= Error_Types(106);
  }
  else {

    $str .= "
    <table width = '50%'>
      <tr>
        <td><b>#</b></td>
        <td><b>Faculty Name</b></td>
        <td><b>Department Name</b></td>
        <td><b>Programme Name</b></td>
        <td><b>Programme Abbreviation</b></td>
        <td><b>Duration</b></td>
        <td><b>Max Duration</b></td>
        <td><b>Min. Credit Load</b></td>
        <td><b>Type</b></td>
      </tr>";$i = 1;
      $programTypes = programme_types();
      while($programme = db_fetch_object($programmes)){
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>". $i++ ."</td>
               <td>". $programme->faculty_name ."</td>
               <td>". $programme->department_name ."</td>
               <td>". $programme->programme_name ."</td>
               <td>". $programme->programme_abbr ."</td>
               <td>". $programme->duration ."</td>
               <td>". $programme->max_duration ."</td>
               <td>". $programme->min_credit_load ."</td>
               <td>". $programTypes[$programme->programme_type] ."</td>

             </tr>";
      }
      $str .= "
      </table>";
  }
  return $str;
}


/**
 * Handles 'staff/createeditfaculty' menu to Create/Update a Faculty
 *
 * @uses staff_has_eduerp_role()
 * @uses staff_create_edit_faculty_form()
 * @uses staff_update_faculty_form()
 * @uses staff_display_available_faculties()
 * @return string HTML
 */
function staff_create_edit_faculty() {
  global $user;
  ob_start();

  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;

  echo '<br /><hr /><br />';

  if (! $isAuthorized) {
    drupal_set_message(Error_Types(104), 'error');
  }
  else {
    if (arg(2)){
      echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditfaculty') ."'>Create/Modify Faculty</a>&nbsp; &raquo; &nbsp;Modify Faculty</font><br /><br />";
      echo '<hr /><br />';
      echo "<b>Modify Faculty</b> - Make any required changes to the faculty<br />";
    }
    else{
      echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create Faculty</font><br /><br />";
      echo '<hr /><br />';
      echo "<b>Create Faculty</b> - Fill the form below to create a new Faculty<br />";
    }
    echo drupal_get_form('staff_create_edit_faculty_form');
  }

  echo '<br /><hr /><br />';

  if (! arg(2)) {
    if (! $isAuthorized) {
      drupal_set_message(Error_Types(105), 'error');
    }
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Modify Faculty</b> - Select a Faculty to edit it<br />";
      echo drupal_get_form('staff_update_faculty_form');
    }
    echo '<br /><hr /><br />';

    //display existing faculties here
    echo staff_display_available_faculties();
  }
  return ob_get_clean();
}


/**
 * Handles 'staff/createeditdept' menu to Create/Update a Department
 *
 * @uses staff_has_eduerp_role()
 * @uses staff_create_edit_dept_form()
 * @uses staff_update_dept_form()
 * @uses echo staff_display_available_departments()
 * @return string HTML
 */
function staff_create_edit_dept() {
  global $user;
  ob_start();

  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Role Assigner'))) $isAuthorized = false; else $isAuthorized = true;

  echo '<br /><hr /><br />';

  if (! $isAuthorized) {
    drupal_set_message(Error_Types(104), 'error');
  }
  else {
      if (arg(2)){
      	echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditdept') ."'>Create/Modify Department</a>&nbsp; &raquo; &nbsp;Modify Department</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Modify Department</b> - Make any required changes to the Department<br />";
      }
      else{
      	echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create Department</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Create Department</b> - Fill the form below to create a new Department<br />";
      }

      echo drupal_get_form('staff_create_edit_dept_form');
  }
  echo '<br /><hr /><br />';
  if (! arg(2)) {
    if (! $isAuthorized) {
      drupal_set_message(Error_Types(105), 'error');
    }
    else {
      //if edit was selected then do not show the rest of the page
      echo "<b>Modify Department</b> - Select a Department to edit it<br />";
      echo drupal_get_form('staff_update_dept_form');

      echo '<br /><hr /><br />';
    }
    //display existing departments here
    echo staff_display_available_departments();
  }

  return ob_get_clean();
}


/**
 * Form to Create/Update a Faculty
 *
 * @uses staff_create_edit_faculty_form_validate()
 * @uses staff_create_edit_faculty_form_submit()
 * @return array Drupal Form
 */
function staff_create_edit_faculty_form() {

  if (arg(2) && is_valid_faculty(arg(2))) {
    if (empty($_POST['faculty_name'])) {
      $result = db_query('SELECT field_college_name_value AS name, field_college_abbreviation_value AS abbr, field_college_email_subdomain_value AS fac_subdomain FROM {content_type_college} WHERE nid = %d', arg(2));
      $fac_edit_record = db_fetch_object($result);
    }
  }
  $form['#title'] = 'Create New Faculty';
  $form['faculty_name'] = array(
    '#title' => 'Faculty Name',
    '#type' => 'textfield',
    '#size' => 40,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_name']['#value'] = $fac_edit_record->name;

  $form['faculty_abbreviation'] = array(
    '#title' => 'Faculty Code',
    '#type' => 'textfield',
    '#size' => 6,
    '#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_abbreviation']['#value'] = $fac_edit_record->abbr;

  $form['faculty_subdomain'] = array(
    '#title' => 'Faculty E-mail Subdomain e.g. science.xyz.com',
    '#type' => 'textfield',
    '#size' => 50,
    //'#required' => TRUE
  );
  if ($fac_edit_record) $form['faculty_subdomain']['#value'] = $fac_edit_record->fac_subdomain;

  $form['submit'] = array(
    '#value' => 'Create Faculty',
    '#type' => 'submit'
  );
  if ($fac_edit_record) $form['submit']['#value'] = 'Update Faculty';

  return $form;
}


/**
 * Form to Update a Faculty
 *
 * @uses staff_update_faculty_form_validate()
 * @uses staff_update_faculty_form_submit()
 * @uses faculty()
 * @return array Drupal Form
 */
function staff_update_faculty_form() {
  $form['#title'] = 'Update Faculty';
  $form['faculty_id'] = array(
    '#type' => 'select',
    '#options' => faculty(),
    '#title' => 'Faculty Name');
  $form['submit'] = array(
    '#value' => 'Modify Faculty',
    '#type' => 'submit'
  );
  return $form;
}


/**
 * Form to Update a Department
 *
 * @uses staff_update_dept_form_validate()
 * @uses staff_update_dept_form_submit()
 * @uses department()
 * @return array Drupal Form
 */
function staff_update_dept_form() {
  $form['#title'] = 'Update Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Modify Department',
    '#type' => 'submit'
  );
  return $form;
}


/**
 * validate hook for {@link staff_create_edit_faculty_form()}
 *
 * @uses is_valid_faculty()
 * @uses is_Faculty_Name_Existing()
 * @uses is_Faculty_Abbreviation_Existing()
 */
function staff_create_edit_faculty_form_validate($form, &$form_state) {

  if (arg(2) && is_valid_faculty(arg(2))) {//validate EDIT
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name'], arg(2)))
      form_set_error('faculty_name', Error_Types(101));

    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation'], arg(2)))
      form_set_error('faculty_abbreviation', Error_Types(102));
  }
  else {//validate CREATE
    if (is_Faculty_Name_Existing($form_state['values']['faculty_name']))
      form_set_error('faculty_name', Error_Types(101));

    if (is_Faculty_Abbreviation_Existing($form_state['values']['faculty_abbreviation']))
      form_set_error('faculty_abbreviation', Error_Types(102));
  }

  // Security checks
  $formFields = array("faculty_name", "faculty_abbreviation", "faculty_subdomain");
  foreach($formFields as $v){
    $text = $form_state['values'][$v];
    if (!empty($text)) {
      if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
        form_set_error($v, Error_Types(168));
      }
    }
  }
}


/**
 * submit hook for {@link staff_create_edit_faculty_form()}
 *
 * @uses is_valid_faculty()
 * @uses me_gen_updFacultyInfo()
 */
function staff_create_edit_faculty_form_submit($form, &$form_state) {

  if(arg(2) && is_valid_faculty(arg(2))){
    $node = node_load(arg(2));
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    $node->field_college_email_subdomain[0]['value'] = $form_state['values']['faculty_subdomain'];

    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty was updated!<br />');

  }
  else {
    $node = new stdClass();
    $node->type                                   = 'college';
    $node->uid                                    = 1;  // Admin
    $node->status                                 = 1;  // Published
    $node->promote                                = 0;
    $node->sticky                                 = 0;
    $node->comment                                = 0;
    $node->title                                  = $form_state['values']['faculty_name'];
    $node->field_college_name[0]['value']         = $form_state['values']['faculty_name'];
    $node->field_college_abbreviation[0]['value'] = $form_state['values']['faculty_abbreviation'];
    $node->field_college_email_subdomain[0]['value'] = $form_state['values']['faculty_subdomain'];

    drupal_set_message($form_state['values']['faculty_name'] . ' Faculty has been created!<br />');
  }

  node_save($node);

  module_invoke_all('updFacultyInfo', $node->nid, variable_get('eduerp_current_session', ''), $form_state['values']['faculty_subdomain']);

  drupal_goto("staff/createeditfaculty");
}


/**
 * validate hook for {@link staff_create_edit_dept_form()}
 *
 * @uses is_Department_Name_Existing()
 */
function staff_create_edit_dept_form_validate($form, &$form_state) {

  if (arg(2)) {//validate EDIT
    if (is_Department_Name_Existing($form_state['values']['department_name'], arg(2)))
      form_set_error('department_name', Error_Types(103));

  }
  else {//validate CREATE
    if(is_Department_Name_Existing($form_state['values']['department_name']))
      form_set_error('department_name', Error_Types(103));
  }

  // Security checks
  $formFields = array("department_name", "department_code");
  foreach($formFields as $v){
    $text = $form_state['values'][$v];
    if (!empty($text)) {
      if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
        form_set_error($v, Error_Types(168));
      }
    }
  }
}


/**
 * submit hook for {@link staff_create_edit_dept_form()}
 *
 * @uses is_valid_department()
 */
function staff_create_edit_dept_form_submit($form, &$form_state) {

  if (arg(2) && is_valid_department(arg(2))) {//the user is trying to edit a given department. OK!
    $node = node_load(arg(2));
    $node->title                                = $form_state['values']['department_name'];
    $node->field_department_name[0]['value']    = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']           = $form_state['values']['faculty_nid'];//
    $node->field_department_code[0]['value']    = $form_state['values']['department_code'];

    drupal_set_message($form_state['values']['department_name'] . ' Department was updated!<br />');
    unset($_SESSION['eduerp_dept_nid']);
  }
  else {
    $node = new stdClass();
    $node->type                              = 'department';
    $node->uid                               = 1;  // Admin
    $node->status                            = 1;  // Published
    $node->promote                           = 0;
    $node->sticky                            = 0;
    $node->comment                           = 0;
    $node->title                             = $form_state['values']['department_name'];
    $node->field_department_name[0]['value'] = $form_state['values']['department_name'];
    $node->field_college_id[0]['nid']        = $form_state['values']['faculty_nid'];
    $node->field_department_code[0]['value'] = $form_state['values']['department_code'];

    drupal_set_message($form_state['values']['department_name'] . ' Department has been created!<br />');
  }

  node_save($node);
  drupal_goto("staff/createeditdept");
}


/**
 * Form to Create/Update a Department
 *
 * @uses staff_create_edit_dept_form_validate()
 * @uses staff_create_edit_dept_form_submit()
 * @uses is_valid_department()
 * @uses faculty()
 * @return array Drupal Form
 */
function staff_create_edit_dept_form() {

  if (arg(2) && is_valid_department(arg(2))) {
    if (empty($_POST['department_name'])) {
      $result = db_query('SELECT field_college_id_nid AS college_nid, field_department_name_value AS dept_name, field_department_code_value AS dept_code FROM {content_type_department} WHERE nid = %d', arg(2));
      $dept_edit_record = db_fetch_object($result);
    }
  }

  $form['#title'] = 'Create New Department';
  $form['faculty_nid'] = array(
    '#type' => 'select',
    '#title' => 'Faculty Name');
  if ($dept_edit_record){
    $form['faculty_nid']['#default_value'] = $dept_edit_record->college_nid;
    $form['faculty_nid']['#options'] = faculty($dept_edit_record->college_nid);
  }
  else
    $form['faculty_nid']['#options'] = faculty();

  $form['department_name'] = array(
    '#title' => 'Department Name',
    '#type' => 'textfield',
    '#size' => 100,
    '#required' => TRUE
  );
  if ($dept_edit_record) $form['department_name']['#value'] = $dept_edit_record->dept_name;

  $form['department_code'] = array(
    '#title' => 'Department Code',
    '#type' => 'textfield',
    '#size' => 20,
    //'#required' => TRUE
  );
  if ($dept_edit_record) $form['department_code']['#value'] = $dept_edit_record->dept_code;

  $form['submit'] = array(
    '#value' => 'Create Department',
    '#type' => 'submit'
  );
  if ($dept_edit_record) $form['submit']['#value'] = 'Update Department';

  return $form;
}


/**
 * validate hook for {@link staff_update_faculty_form()}
 */
function staff_update_faculty_form_validate($form, &$form_state) {
  if ($form_state['values']['faculty_id'] == 0)
    form_set_error('faculty_id', Error_Types(114));
}


/**
 * submit hook for {@link staff_update_faculty_form()}
 */
function staff_update_faculty_form_submit($form, &$form_state) {

  drupal_goto("staff/createeditfaculty/" . $form_state['values']['faculty_id']);
}


/**
 * validate hook for {@link staff_update_dept_form()}
 */
function staff_update_dept_form_validate($form, &$form_state) {
  if ($form_state['values']['department_nid'] == 0)
    form_set_error('department_nid', Error_Types(114));
}


/**
 * submit hook for {@link staff_update_dept_form()}
 */
function staff_update_dept_form_submit($form, &$form_state) {

   drupal_goto("staff/createeditdept/" . $form_state['values']['department_nid']);
}



/**
 * Handles 'staff/createeditcourse' menu to Create/Update a Course
 *
 * @uses is_Valid_Department()
 * @uses department()
 * @uses staff_has_eduerp_role()
 * @uses staff_show_assign_course();
 * @uses is_valid_course()
 * @uses course_belongs_to_department()
 * @uses staff_create_course_form()
 * @uses staff_display_available_courses()
 * @uses staff_create_course_mini_form()
 * @uses staff_edit_course_form()
 * @uses staff_assign_course_proceed_form()
 * @uses staff_display_available_courses()
 * @global $departmentInfo
 * @global $canCreateModify
 * @global $_SESSION['eduerp_showFullForm']
 * @global $_SESSION['eduerp_showCourseAssignment']
 * @return string HTML
 */
function staff_create_edit_course() {
  global $user, $departmentInfo, $canCreateModify;
  ob_start();
  $canCreateModify = false;$hideOthers = false;

  if (isset($_SESSION['eduerp_showFullForm'])) $_POST['showFullForm'] = 1;
  if (isset($_SESSION['eduerp_showCourseAssignment'])) $_POST['showCourseAssignment'] = 1;

  echo '<br /><hr /><br />';
  $authorizeCourseEdit = false;
  if (arg(2) && is_Valid_Department(arg(2))) {//the department is valid
    //get the departments info
    $departmentInfo = department(arg(2));
    //check that he can create/modify courses
    if (staff_has_eduerp_role($user->uid, arg(2), 0, array('Head of Department', 'Department Grade Editor'))) {//allow for one db call only
      $canCreateModify = true;
    }

      //check to know if proceed with course assignment was clicked
      if (isset($_POST['showCourseAssignment']) || isset($_SESSION['eduerp_fix_course'])) {
        //allow for some easy navigation
        $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse/'. arg(2)) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;<b>Course Assignment</b></font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo staff_show_assign_course();
        $hideOthers=true;
      }
      else {
        //check if user is trying to edit record
         if (arg(3) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
          $authorizeCourseEdit = true;$hideOthers=true;
          //get the course info
          $course = db_fetch_object(get_Available_Courses(0,arg(3)));
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse/'. arg(2)) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Modify Course: <b>". $course->course_code ."</b></font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Modify Course</b> - Make any required changes to the Course: <b>". $course->course_code ."</b><br />";
        }
        else {
          //allow for some easy navigation
          $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse/'.arg(2)) ."'>". $departmentInfo[arg(2)] ." Department</a>&nbsp; &raquo; &nbsp;Create New Course</font><br /><br />";
          $navi .= '<br /><hr /><br />';
          $navi .= "<b>Create New Course</b> - Please fill the form<br />";
          ;
        }

        if (isset($_POST['showFullForm']) || arg(3)) {//expand the course creation form
          if ($canCreateModify) {
            echo $navi;
            echo drupal_get_form('staff_create_course_form');
            $hideOthers = true;
            echo '<br /><hr /><br />';
            echo staff_display_available_courses(variable_get('eduerp_current_session', ''), variable_get('eduerp_current_semester', ''), $departmentInfo);
          }
          else {
            echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';
            drupal_set_message(Error_Types(104), 'error');
          }
        }
        else {//some small navigation
          if ($canCreateModify) {
            echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';
            echo "<b>Create Course</b> - Click to proceed with Course creation<br /><br />";
            echo drupal_get_form('staff_create_course_mini_form');
          }
          else {
            echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createeditcourse') ."'>Create/Modify a Course</a>&nbsp; &raquo; &nbsp;". $departmentInfo[arg(2)] ." Department</font><br /><br />";
            echo '<br /><hr /><br />';

            drupal_set_message(Error_Types(104), 'error');
          }
        }
      }//end of else of if proceed with course assignment

    if (! $hideOthers) {//only show these things in none edit mode
      echo '<br /><hr /><br />';
      if ($canCreateModify) {
        echo "<b>Modify Course</b> - Select a Course to modify it<br />";
        echo drupal_get_form('staff_edit_course_form');
      }
      else {//user cannot modify records
        drupal_set_message(Error_Types(105), 'error');
      }
      //display form for proceed to Course assignment
      echo '<br /><hr /><br />';
      echo '<b>Assign Lecturers and Timetables for Courses - Click to proceed with assigning lecturers and timetables for courses<br /><br />';
      echo drupal_get_form('staff_assign_course_proceed_form');

      //display existing courses in the departmens here
      echo '<br /><hr /><br />';
      echo staff_display_available_courses(variable_get('eduerp_current_session', ''), variable_get('eduerp_current_semester', ''), $departmentInfo);
    }
  }
  else {

    //allow for some easy navigation
    echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create/Modify a Course</font><br /><br />";
    echo "<b>Create/Modify Course</b> - To begin select a department and Click Continue<br />";
    echo drupal_get_form('staff_create_edit_course_select_dept_form');

    echo '<br /><hr /><br />';
    //display existing departmens here
    echo staff_display_available_departments();
  }

  unset($_SESSION['eduerp_showFullForm']);unset($_SESSION['eduerp_showCourseAssignment']);
  return ob_get_clean();
}


/**
 * Form to Select a Department for Course editing
 *
 * @uses staff_create_edit_course_select_dept_form_validate()
 * @uses staff_create_edit_course_select_dept_form_submit()
 * @used department()
 * @return array Drupal Form
 */
function staff_create_edit_course_select_dept_form($form_state) {

  $form['#title'] = 'Select Department';
  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department(),
    '#title' => 'Department Name');
  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate staff_create_edit_course_select_dept_form
 */
function staff_create_edit_course_select_dept_form_validate($form, $form_state) {
  if ($form_state['values']['department_nid'] == 0)
    form_set_error('programme_nid', Error_Types(114));
}


/**
 * submit staff_create_edit_course_select_dept_form
 */
function staff_create_edit_course_select_dept_form_submit($form, $form_state) {
  drupal_goto("staff/createeditcourse/" . $form_state['values']['department_nid']);
}


/**
 * Find Faculties (for display)
 *
 * @uses get_faculties()
 * @return string HTML
 */
function staff_display_available_faculties() {
  $str = "<b>Available Faculties</b><br />
  <table border=1>
    <tr>
      <td><b>#</b></td>
      <td><b>Faculty Name</b></td>
      <td><b>Faculty Code</b></td>
      <td><b>Faculty E-mail Subdomain</b></td>
    </tr>";$i = 1;$color = 0;
    $faculties = get_faculties();
    foreach ($faculties as $v) {
      if ($i%2)$rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
      $str .= "
      <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
        <td>". $i++ ."</td>
        <td>". $v['faculty_name'] ."</td>
        <td>". $v['faculty_abbr'] ."</td>
        <td>". $v['faculty_email_subdomain'] ."</td>
      </tr>";
      }
  $str .= "
  </table>";
  return $str;
}


/**
 * Find Faculty/Departments (for display)
 *
 * @uses get_departments()
 * @return string HTML
 */
function staff_display_available_departments() {
  $str = "
  <div id='assigned_courses'>
  <b>Available Departments</b><br />";

  $departments = get_departments();

  if(! is_array($departments) || ! sizeof($departments))
    return $str .= Error_Types(106);

  $str .="
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Faculty Name</b></th>
      <th><b>Faculty Code</b></th>
      <th><b>Department Name</b></th>
      <th><b>Department Code</b></th>
    </tr>";$i = 1;

    foreach ($departments as $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $str .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td>". $i++ ."</td>
           <td>". $v['faculty_name'] ."</td>
           <td>". $v['faculty_abbr'] ."</td>
           <td>". $v['dept_name'] ."</td>
           <td>". $v['dept_code'] ."</td>
         </tr>";
      }

  //}
  $str .= "
  </table>
  </div>";
  return $str;

}


/**
 * Does Faculty Name exist?
 *
 * @param string $faculty_name
 * @param int $nid Drupal node nid for 'college' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Faculty_Name_Existing($faculty_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' AND nid != %d ", $faculty_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_name_value = '%s' ", $faculty_name);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Does Programme Name exist?
 *
 * @param string $programme_name
 * @param int $nid Drupal node nid for 'program' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Programme_Name_Existing($programme_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_name_value = '%s' AND nid != %d ", $programme_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_name_value = '%s' ", $programme_name);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Does Programme Abbreviation exist?
 *
 * @param string $programme_abbr
 * @param int $nid Drupal node nid for 'program' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Programme_Abbr_Existing($programme_abbr, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_abbr_value = '%s' AND nid != %d ", $programme_abbr, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_program} WHERE field_programme_abbr_value = '%s' ", $programme_abbr);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Does Faculty Abbreviation exist?
 *
 * @param string $faculty_abbreviation
 * @param int $nid Drupal node nid for 'college' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Faculty_Abbreviation_Existing($faculty_abbreviation, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' AND nid != %d ", $faculty_abbreviation, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_college} WHERE field_college_abbreviation_value = '%s' ", $faculty_abbreviation);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Does Department Name exist?
 *
 * @param string $department_name
 * @param int $nid Drupal node nid for 'department' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Department_Name_Existing($department_name, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value = '%s' AND nid != %d ", $department_name, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_department} WHERE field_department_name_value='%s' ", $department_name);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Does Course Code exist?
 *
 * @param string $course_code
 * @param int $nid Drupal node nid for 'course' CCK if this is Update (otherwise 0)
 * @return bool
 */
function is_Course_Code_Existing($course_code, $nid = 0) {
  //now if nid is zero then the check is coming from CREATE else it is coming from UPDATE
  if ($nid != 0)
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' AND nid !=%d ", $course_code, $nid);
  else
    $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value='%s' ", $course_code);

  if (db_fetch_object($result)) return true;

  return false;
}


/**
 * Return Error Message
 *
 * @param int $num
 * @return string HTML
 */
function Error_Types($num = 0) {
  $prifix1 = "Sorry, "; $prifix2 = "Warning! "; $prifix3 = "Test failed! ";
  switch($num){
  case '101': $msg = $prifix1 . 'Faculty Name already exists!<br />'; break;
  case '102': $msg = $prifix1 . 'Faculty Code already exists!<br />'; break;
  case '103': $msg = $prifix1 . 'Department Name already exists!<br />'; break;
  case '104': $msg = $prifix1 . 'You do not have permission to Create new Records!<br />'; break;
  case '105': $msg = $prifix1 . 'You do not have permission to Modify Records!<br /><br /><br />'; break;
  case '106': $msg = $prifix1 . 'No record(s) exists!<br />'; break;
  case '107': $msg = $prifix1 . 'Positive numeric value expected!<br />'; break;
  case '108': $msg = $prifix1 . 'Course Name already exists!<br />'; break;
  case '109': $msg = $prifix1 . 'Spaces are not allowed in Course Code!<br />'; break;
  case '110': $msg = $prifix1 . 'At least one of the Course Codes entered for Prerequisites Codes either does not exist or is invalid!<br />'; break;
  case '111': $msg = $prifix1 . 'Cannot reference self for Prerequisite Course!<br />'; break;
  case '112': $msg = $prifix1 . 'You do not have permission to Access the Department!<br />'; break;
  case '113': $msg = $prifix1 . 'Course Assignment already exists for the Course, for the Timetable, for the Semester and for the Session!<br />'; break;
  case '114': $msg = $prifix1 . 'Invalid Data was supplied!<br />'; break;
  case '115': $msg = $prifix1 . 'Programme Name already exists!<br />'; break;
  case '116': $msg = $prifix1 . 'Prerequisite Description cannot be empty!<br />'; break;
  case '117': $msg = $prifix1 . 'You do not have permission to Create or Modify records in the selected Department!<br /><br /><br />'; break;
  case '118': $msg = $prifix1 . 'Input Data not in expected format!<br />'; break;
  case '119': $msg = $prifix1 . 'Minimum Credit Load cannot be greater than Maximum Credit Load!<br />'; break;
  case '120': $msg = $prifix1 . 'Programme Abbreviation already exists!<br />'; break;
  case '121': $msg = $prifix1 . 'You do not have permission to Create or Modify records in the selected Programme!<br />'; break;
  case '122': $msg = $prifix1 . 'There is a problem with the setup of this Programme!<br />'; break;
  case '123': $msg = $prifix1 . 'The selected Course already exists for the Semester, for the Programme and for the Level!<br />'; break;
  case '124': $msg = $prifix1 . 'Either no Course Registration information exists or all have been dropped for the student for the selected Session and Semester!<br />'; break;
  case '125': $msg = $prifix1 . 'Either the Matriculation/JAMB Number does not exist or it is invalid!<br />'; break;
  case '126': $msg = $prifix1 . 'No more record(s) exists!<br />'; break;
  case '127': $msg = $prifix1 . 'You do not have permission to access this module!<br /><br /><br />'; break;
  case '128': $msg = $prifix1 . 'Either Courses have not been setup or the student has fully registered all courses for the selected Session and Semester!<br />'; break;
  case '129': $msg = $prifix1 . 'The arithmetic sum of all CA + Exam marks must be 100!<br />'; break;
  case '130': $msg = $prifix1 . 'Numeric values not greater than 3 digits expected!<br />'; break;
  case '131': $msg = $prifix1 . 'Hostel Name already exists!<br />'; break;
  case '132': $msg = $prifix1 . 'Block Name already exists in the selected Hostel!<br />'; break;
  case '133': $msg = $prifix1 . 'Room Name already exists in the selected Block!<br />'; break;
  case '134': $msg = $prifix1 . 'Room Capacity must be of Numeric type!<br />'; break;
  case '135': $msg = $prifix1 . 'The allocated and available space must be equal!<br />'; break;
  case '136': $msg = $prifix1 . 'No Room exists in the selected Block!'; break;
  case '137': $msg = $prifix1 . 'Invalid data specified!'; break;
  case '138': $msg = $prifix1 . 'Reservation already exists for the student!'; break;
  case '139': $msg = $prifix1 . 'Room allocation already exists for the student!'; break;
  case '140': $msg = $prifix1 . 'Either the student does not belong to any active category or No free Bedspace was found!'; break;
  case '141': $msg = $prifix1 . 'No Allocation Rules exists for the Block!'; break;
  case '142': $msg = $prifix1 . 'The operation was not successful. No Allocation Rules exists for at least one of the Blocks!'; break;
  case '143': $msg = $prifix1 . 'The student profile may not have been properly setup!'; break;
  case '144': $msg = $prifix1 . 'Invalid format specified for Price!'; break;
  case '145': $msg = $prifix1 . 'Either your Reservation as expired or no Reservation information was found!'; break;
  case '146': $msg = $prifix1 . 'Hostel setup error encountered. Please contact your Administrator!'; break;
  case '147': $msg = $prifix1 . 'Hostel Reservation period has expired!'; break;
  case '148': $msg = $prifix1 . 'Hostel Reservation period has not yet reached!'; break;
  case '149': $msg = $prifix1 . 'Hostel Reservation has been temporarily stopped. Please try again later!'; break;
  case '150': $msg = $prifix1 . 'The operation was not successful. Allocation Number cannot be less than Alloted Number!'; break;
  case '151': $msg = $prifix1 . 'Room Allocation failed. Please contact your Administrator!'; break; //payment was successful but for some reason the allocation was not done
  case '152': $msg = $prifix1 . 'School Fee Item already exists!<br />'; break;
  case '153': $msg = $prifix1 . "There are no existing Fee Items. Please click <a href='". url('staff/createmodifyfeeitem') ."'>HERE</a> to create Fee Items!<br />"; break;
  case '154': $msg = $prifix1 . 'First and Second Installments MUST be activated together!<br />'; break;
  case '155': $msg = $prifix1 . 'Sum Total of First and Second Installments MUST equal Sum Total of Fee Amount!<br />'; break;
  case '156': $msg = $prifix1 . 'The Fee Setup combination already exists. Please try modifying it instead!<br />'; break;
  case '157': $msg = $prifix3 . 'No Fee Setup information was found!<br />'; break;
  case '158': $msg = $prifix3 . 'Fee Setup is not complete!<br />'; break;
  case '159': $msg = $prifix1 . 'No School Fee Setup matching the Student was found!<br />'; break;
  case '160': $msg = $prifix1 . 'School Fee Payment already exists for the Student for the current Session!<br />'; break;
  case '161': $msg = $prifix1 . 'Input Data required!<br />'; break;
  case '162': $msg = $prifix1 . 'Scholarship Authorisation already exists for the Student!<br />'; break;
  case '163': $msg = $prifix1 . 'Instalment Authorisation already exists for the Student!<br />'; break;
  case '164': $msg = $prifix1 . 'First Instalment MUST be less then Full Amount!<br />'; break;
  case '165': $msg = $prifix1 . 'Full Amount MUST be specified!<br />'; break;
  case '166': $msg = $prifix1 . 'Full Amount MUST be entered for at least one Fee Item in each Fee Block!<br />'; break;
  case '167': $msg = $prifix1 . 'A similar Fee Structure already exists. Kindly consider Editing it instead!<br />'; break;
  case '168': $msg = $prifix1 . 'double quote, less than or greater than characters are not allowed!<br />'; break;
  case '169': $msg = $prifix1 . 'Multiple Room Names cannot be specified in Edit Mode!<br />'; break;
  case '170': $msg = $prifix1 . 'Name already exists!<br />'; break;
  case '171': $msg = $prifix1 . 'The operation was not successful!'; break;
  case '172': $msg = $prifix1 . 'Either the JAMB Number does not exist or it is invalid!<br />'; break;
  case '173': $msg = $prifix1 . 'The Candidate has already been cleared!<br />'; break;
  case '174': $msg = $prifix1 . 'The Operation cannot continue because No Instalment1 Amount greater than zero was found!<br />'; break;
  case '175': $msg = $prifix1 . "Problem retrieving Student's Information!<br />"; break;
  case '176': $msg = $prifix1 . "This Block has no free space for you!<br />"; break;
  case '177': $msg = $prifix1 . "There was a problem. Kindly restart the entire process again!<br />"; break;

  default:
    $msg =  $prifix2 .'Something fatal occured!<br /><br /><br />';
  }
  return $msg;
}


/**
 * Valid Faculty?
 *
 * @param int $faculty_nid Drupal node nid for 'college' CCK
 * @return bool
 */
function is_Valid_Faculty ($faculty_nid) {
  $result = db_query("SELECT nid FROM {content_type_college} WHERE nid =%d ", $faculty_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Department?
 *
 * @param int $department_nid Drupal node nid for 'department' CCK
 * @return bool
 */
function is_Valid_Department ($department_nid) {
  $result = db_query("SELECT nid FROM {content_type_department} WHERE nid =%d ", $department_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Programme?
 *
 * @param int $programme_nid Drupal node nid for 'program' CCK
 * @return bool
 */
function is_valid_programme ($programme_nid) {
  $result = db_query("SELECT nid FROM {content_type_program} WHERE nid =%d ", $programme_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Entry in 'program_course' table which assigns Courses to a Programme?
 *
 * @param int $programme_nid Drupal node nid for 'program' CCK
 * @param int $programme_course_nid id for 'program_course' table
 * @return bool
 */
function is_valid_programme_course_id ($programme_nid, $programme_course_nid) {
  $result = db_query("SELECT program_course_id FROM {program_course} WHERE program_course_id=%d AND programme_id=%d ", $programme_course_nid, $programme_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Course?
 *
 * @param int $course_nid Drupal node nid for 'course' CCK
 * @return bool
 */
function is_valid_course($course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d ", $course_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Course Instance?
 *
 * @param int $instance_nid Drupal node nid for 'course_instance' CCK
 * @return bool
 */
function is_valid_course_instance($instance_nid) {
  $result = db_query("SELECT nid FROM {content_type_course_instance} WHERE nid =%d ", $instance_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Valid Course Code?
 *
 * @param string $course_code
 * @return bool
 */
function is_valid_course_code($course_code) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE field_code_value ='%s' ", $course_code);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Does Course belong to Department?
 *
 * @param int $department_nid Drupal node nid for 'department' CCK
 * @param int $course_nid Drupal node nid for 'course' CCK
 * @return bool
 */
function course_belongs_to_department($department_nid, $course_nid) {
  $result = db_query("SELECT nid FROM {content_type_course} WHERE nid =%d AND field_department_nid_nid =%d", $course_nid, $department_nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Does Course Instance match Department and Session?
 *
 * @param int $department_nid Drupal node nid for 'department' CCK
 * @param int $course_instance_nid Drupal node nid for 'course_instance' CCK
 * @param string $session
 * @return bool
 */
function course_instance_match_department_and_session($department_nid, $course_instance_nid, $session) {
  $result = db_query("SELECT i.nid FROM {content_type_course_instance} i
        INNER JOIN {content_type_course} c ON i.field_course_id_nid = c.nid
        WHERE c.field_department_nid_nid =%d AND i.nid =%d AND i.field_sess_name_value='%s' ", $department_nid, $course_instance_nid, $session);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Form to Create Course
 *
 * @uses staff_create_course_form_validate()
 * @uses staff_create_course_form_submit()
 * @uses is_valid_course()
 * @uses course_belongs_to_department()
 * @uses get_Available_Courses()
 * @uses course_levels()
 * @uses semesters()
 * @global $_SESSION['eduerp_course_grade_weightings']
 * @return array Drupal Form
 */
function staff_create_course_form() {

 $authorizeCourseEdit = false;
 if (arg(3) && arg(2) && is_valid_course(arg(3)) && course_belongs_to_department(arg(2), arg(3))) {
   $authorizeCourseEdit = true;
   if (empty($_POST['course_code'])) {//trying to edit
     $result = get_Available_Courses(0, arg(3));
     $course = db_fetch_object($result);
   }
  }

  $form['#title'] = 'Create New Course';
  $form['course_level'] = array(
    '#type' => 'select',
    '#options' => course_levels(),
    '#title' => 'Course Level');
  if ($course) $form['course_level']['#default_value'] = $course->course_level;

  $form['course_code'] = array(
    '#title' => 'Course Code',
    '#type' => 'textfield',
    '#size' => 50,
    '#required' => TRUE
  );
  if ($course) $form['course_code']['#value'] = $course->course_code;

  $form['course_title'] = array(
    '#title' => 'Course Title',
    '#type' => 'textfield',
    '#size' => 255,
    '#required' => TRUE
  );
  if ($course) $form['course_title']['#value'] = $course->course_title;

  $form['course_description'] = array(
    '#title' => 'Course Description',
    '#type' => 'textarea',
    '#size' => 255,
    '#required' => TRUE
  );
  if ($course) $form['course_description']['#value'] = $course->course_description;

  $form['credit_load'] = array(
    '#title' => 'Credit Load',
    '#type' => 'textfield',
    '#size' => 3,
    '#required' => TRUE
  );
  if ($course) $form['credit_load']['#value'] = $course->credit_load;

  $form['prerequisites_codes'] = array(
    '#title' => 'Prerequisite Codes - List of course_code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed',
    '#type' => 'textfield',
    '#size' => 255
  );
  if ($course) $form['prerequisites_codes']['#value'] = $course->prerequisite_codes;

    $form['prerequisite_desc'] = array(
    '#title' => 'Prerequisite Description - Description of prerequisites',
    '#type' => 'textarea',
    '#size' => 255
  );
  if ($course) $form['prerequisite_desc']['#value'] = $course->prerequisite_desc;

  $form['course_semester'] = array(
    '#type' => 'select',
    '#options' => semesters(),
    '#title' => 'Course Semester',
    '#required' => TRUE);
  if ($course) $form['course_semester']['#default_value'] = $course->course_semester;

  if (isset($_POST['showFullForm'])) {
    //$form['showFullForm'] = array('#showFullForm' => '1');/*
    $form['showFullForm'] = array(
    '#title' => 'Course Description',
    '#type' => 'hidden',
    '#default_value'=> 1
   );
  }
 $form['assessment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Continuous Assessment Maximum Marks'),
      '#description' => t('e.g. If the number of CA\'s for this course is 2, select 2 in <b>Number of CA\'s</b>, enter appropriate values in fields <b>Max. Mark 1<sup>st</sup> CA</b>, <b>Max. Mark 2<sup>nd</sup> CA</b> and <b>Max. Exam Mark</b> then enter 0 (zero) in fields <b>Max. Mark 3<sup>rd</sup> CA.</b> and <b>Max. Mark 4<sup>th</sup> CA</b>. <br /><b>Note:</b> Arithmetic Sum of all marks MUST be equal to 100!'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

 $caApproval = array (0 => 'Approved Along with Exams', 1 => 'Approved Individually');
 $caNum = array(0=>'0', 1=>'1', 2=>'2', 3=>'3', 4=>'4');

 $form['assessment']['caNum'] = array('#type' => 'select', '#title' => t('Number of CA\'s'), '#options' => $caNum, '#description' => t('Describes total number of CA\'s for the course'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['caNum']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['number_of_ca'];

 $form['assessment']['caApproval'] = array('#type' => 'select', '#title' => t('CA Approval Method'), '#options' => $caApproval, '#description' => t('Describes how the CA\'s should be approved'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['caApproval']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['ca_approved_onebyone'];

 $form['assessment']['ca1'] = array('#type' => 'textfield', '#title' => t('Max. Mark 1<sup>st</sup> CA'), '#description' => t('Maximum allowable marks for 1<sup>st</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca1']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca1'];

 $form['assessment']['ca2'] = array('#type' => 'textfield', '#title' => t('Max. Mark 2<sup>nd</sup> CA'), '#description' => t('Maximum allowable marks for 2<sup>nd</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca2']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca2'];

 $form['assessment']['ca3'] = array('#type' => 'textfield', '#title' => t('Max. Mark 3<sup>rd</sup> CA'), '#description' => t('Maximum allowable marks for 3<sup>rd</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca3']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca3'];

 $form['assessment']['ca4'] = array('#type' => 'textfield', '#title' => t('Max. Mark 4<sup>th</sup> CA'), '#description' => t('Maximum allowable marks for 4<sup>th</sup> CA.'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['ca4']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_ca4'];

 $form['assessment']['exam_mark'] = array('#type' => 'textfield', '#title' => t('Max. Exam Mark'), '#description' => t('Note: If the exam is a repeat, this will be overridden to 100'), '#required' => True);
 if(isset($_SESSION['eduerp_course_grade_weightings'])) $form['assessment']['exam_mark']['#default_value'] = $_SESSION['eduerp_course_grade_weightings']['max_mark_exam'];

 if(isset($_SESSION['eduerp_course_grade_weightings'])) unset($_SESSION['eduerp_course_grade_weightings']);

  $form['submit'] = array(
    '#value' => 'Create Course',
    '#type' => 'submit'
  );
  if ($authorizeCourseEdit) $form['submit']['#value'] = 'Update Course';

  return $form;
}


/**
 * validate hook for {@link staff_create_course_form()}
 *
 * @uses is_Course_Code_Existing()
 * @uses is_valid_course_code()
 */
function staff_create_course_form_validate($form, $form_state) {
  if (isset($form_state['values']['showFullForm'])) $_POST['showFullForm'] = $form_state['values']['showFullForm'];

  if (arg(3)) {//validate EDIT
    if (is_Course_Code_Existing($form_state['values']['course_code'], arg(3)))
      form_set_error('course_code', Error_Types(108));

  }
  else {//validate CREATE
    if (is_Course_Code_Existing($form_state['values']['course_code']))
      form_set_error('course_code', Error_Types(108));
  }
  $form_state['values']['credit_load'] = (int) $form_state['values']['credit_load'];
  if (! preg_match("/^[0-9]{1,3}$/", $form_state['values']['credit_load']) || $form_state['values']['credit_load'] < 0)
      form_set_error('credit_load', Error_Types(107));

  //make sure that no spaces in course code
  if (strpos($form_state['values']['course_code'], " ") !== FALSE)
    form_set_error('course_code', Error_Types(109));

  // Security checks
  $text = $form_state['values']['course_code'];
  if (!empty($text)) {
    if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
      form_set_error('course_code', Error_Types(168));
    }
  }
  $text = $form_state['values']['course_title'];
  if (!empty($text)) {
    if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
      form_set_error('course_title', Error_Types(168));
    }
  }
  $text = $form_state['values']['prerequisites_codes'];
  if (!empty($text)) {
    if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
      form_set_error('prerequisites_codes', Error_Types(168));
    }
  }

  //if prerequisites is not empty then make sure it conforms
  if (! empty($form_state['values']['prerequisites_codes'])) {
    $bits = explode(",", $form_state['values']['prerequisites_codes']);
    if (is_array($bits) && sizeof($bits)) {
      //looks like he entered more than one course codes
      foreach ($bits as $v) {
        $v = trim($v);
        if(! empty($v)){
          if (strpos($v, '/')) {
            //a / was found..ok
            //lets break it up
            $morebits =  explode("/", $v);
            if (is_array($morebits) && sizeof($morebits)) {
              //fine now test each
              foreach ($morebits as $h) {
                $h = trim($h);
                if(! empty($h)){
                  //the data is single so check for valid course code
                  if (! is_valid_course_code($h)) //$h == $form_state['values']['course_code'] means do not allow prereqisite to reference itself
                    form_set_error('prerequisites_codes', Error_Types(110));
                  elseif (strtolower($h) == strtolower($form_state['values']['course_code']))
                    form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
                }
              }
            }
            else {
              //something spooky is going on
              form_set_error('prerequisites_codes', Error_Types(110));
            }
          }
          else {
            //the data is single so check for valid course code
            if (! is_valid_course_code($v))
              form_set_error('prerequisites_codes', Error_Types(110));
            elseif (strtolower($v) == strtolower($form_state['values']['course_code']))
              form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
          }
        }
      }
    }
    else {//seems he entered only one course code. well lets see
      //check for valid course code
      if (! is_valid_course_code(trim($form_state['values']['prerequisites_codes'])))
        form_set_error('prerequisites_codes', Error_Types(110));
      elseif (trim(strtolower($form_state['values']['prerequisites_codes'])) == strtolower($form_state['values']['course_code']))
        form_set_error('prerequisites_codes', Error_Types(111));//cannot reference self
    }

    //make sure that the description field is not empty
    if(empty($form_state['values']['prerequisite_desc']))
      form_set_error('prerequisite_desc', Error_Types(116));
  }
  $values = $form_state['values'];
  //validate continuos assessment
  if(! preg_match("/^[0-9]{1,3}$/", $values['exam_mark'])) form_set_error('exam_mark', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca1'])) form_set_error('ca1', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca2'])) form_set_error('ca2', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca3'])) form_set_error('ca3', Error_Types(130));
  if(! preg_match("/^[0-9]{1,3}$/", $values['ca4'])) form_set_error('ca4', Error_Types(130));

  // add up the enteries and make sure it is not < 0 or > 100
  $totalMarks = $values['ca1'] + $values['ca2'] + $values['ca3'] + $values['ca4'] + $values['exam_mark'];
  if ($totalMarks < 0 || $totalMarks > 100) {
    form_set_error('exam_mark', Error_Types(129));
  }
}


/**
 * submit hook for {@link staff_create_course_form()}
 *
 * @uses get_course_grade_weighting()
 * @uses create_course_weighting_entries()
 * @global $_SESSION['eduerp_course_grade_weightings']
 * @global $_SESSION['eduerp_showFullForm']
 */
function staff_create_course_form_submit($form, &$form_state){
  $values = $form_state['values'];
  //check for changes in default course weighting settings
  $defaults = get_course_grade_weighting();
  $found = false;

  $dbFields = array('caNum'=>'number_of_ca', 'caApproval'=>'ca_approved_onebyone', 'ca1'=>'max_mark_ca1', 'ca2'=>'max_mark_ca2', 'ca3'=>'max_mark_ca3', 'ca4'=>'max_mark_ca4', 'exam_mark'=>'max_mark_exam');
  foreach($dbFields as $k => $v) {
    if ($defaults[$v] != $values[$k]) { //some changes were made
      $found = true;
      break;
    }
  }

  //get default values again
  $_SESSION['eduerp_course_grade_weightings'] = $defaults;

  if(! arg(3)) $_SESSION['eduerp_showFullForm'] = 1;
  if(arg(3)){

    $node =  node_load(arg(3));
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = ( ! empty($form_state['values']['prerequisites_codes'])) ? $form_state['values']['prerequisites_codes'] : ' '; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = ( ! empty($form_state['values']['prerequisite_desc'])) ? $form_state['values']['prerequisite_desc'] : ' ';
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];
    node_save($node);

    $values['course_nid'] = $node->nid;
    if ($found) create_course_weighting_entries($values);

    drupal_set_message($form_state['values']['course_code'] . ' Course was updated!<br />');

    drupal_goto("staff/createeditcourse/" . arg(2));
  }
  else {

    // course CCK
    $node = new stdClass();
    $node->type                                 = 'course';
    $node->uid                                  = 1;  // Admin
    $node->status                               = 1;  // Published
    $node->promote                              = 0;
    $node->sticky                               = 0;
    $node->comment                              = 0;
    $node->title                                = $form_state['values']['course_title'];
    $node->field_department_nid[0]['nid']       = arg(2);
    $node->field_code[0]['value']               = $form_state['values']['course_code'];
    $node->field_coursetitle[0]['value']        = $form_state['values']['course_title'];
    $node->field_course_description[0]['value'] = $form_state['values']['course_description'];
    $node->field_creditload[0]['value']         = $form_state['values']['credit_load'];
    $node->field_prerequisite_codes[0]['value'] = ( ! empty($form_state['values']['prerequisites_codes'])) ? $form_state['values']['prerequisites_codes'] : ' '; //List of Course code(s), comma separated that have to be completed before this course, code1/code2/code3 will be alternatives, one of which must be completed
    $node->field_prerequisite[0]['value']       = ( ! empty($form_state['values']['prerequisite_desc'])) ? $form_state['values']['prerequisite_desc'] : ' ';
    $node->field_level[0]['value']              = $form_state['values']['course_level'];
    $node->field_semester[0]['value']           = $form_state['values']['course_semester'];

    drupal_set_message($form_state['values']['course_code'] . ' Course has been created!<br />');
  }

  node_save($node);

  $values['course_nid'] = $node->nid;
  if ($found) create_course_weighting_entries($values);
}


/**
 * Form to Update Course
 *
 * @uses staff_edit_course_form_validate()
 * @uses staff_edit_course_form_submit()
 * @uses course()
 * @return array Drupal Form
 */
function staff_edit_course_form(){
  $form['#title'] = 'Update Course';

    $form['course_nid'] = array(
      '#type' => 'select',
      '#options' => course(arg(2)),
      '#title' => 'Course Code');

    $form['submit'] = array(
      '#value' => 'Modify Course',
      '#type' => 'submit'
    );

  return $form;
}


/**
 * validate hook {@link for staff_edit_course_form()}
 */
function staff_edit_course_form_validate($form, $form_state){
  if ($form_state['values']['course_nid'] == 0)
    form_set_error('course_nid', Error_Types(114));
}


/**
 * submit hook for {@link staff_edit_course_form()}
 *
 * @global $_SESSION['eduerp_course_grade_weightings']
 */
function staff_edit_course_form_submit($form, $form_state){
  //get the course weightings
  $_SESSION['eduerp_course_grade_weightings'] = get_course_grade_weighting($form_state['values']['course_nid']);
  drupal_goto(drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_nid']));
}


/**
 * All valid Levels
 *
 * @return array Level => Level
 */
function course_levels() {
  foreach (range(100, 900, 100) as $number) {
    $levels[$number] = $number;
  }
  foreach (range(1, 9) as $number) {
    $levels[$number] = $number;
  }
  return $levels;
}


/**
 * Valid normal Semesters
 *
 * @return array of Semester => Semester
 */
function semesters() {
  foreach (range(1, 2) as $number) {
    $semester[$number] = $number;
  }
  return $semester;
}


/**
 * Form to Start Course Creation
 *
 * @uses staff_create_course_mini_form_submit()
 * @return array Drupal Form
 */
function staff_create_course_mini_form() {
  $form['#title'] = 'Start Course Creation';

  $form['submit'] = array(
    '#value' => 'Start Course Creation',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * submit hook for {@link staff_create_course_mini_form()}
 *
 * @uses get_course_grade_weighting()
 * @global $_SESSION['eduerp_showFullForm']
 * @global $_SESSION['eduerp_course_grade_weightings']
 */
function staff_create_course_mini_form_submit($form, &$form_state) {

  $_SESSION['eduerp_showFullForm'] = 1;
  //load default course_grade_weightings
  $_SESSION['eduerp_course_grade_weightings'] = get_course_grade_weighting();
}


/**
 * Get Staff in Department
 *
 * @param int $department_nid Drupal node nid for 'department' CCK (or 0)
 * @param int $staff_uid Drupal uid (or 0)
 * @return array uid => Name
 */
function get_Staff_in_Department($department_nid = 0, $staff_uid = 0) {
  $where = "";
  if ($department_nid != 0) {
    $where = " WHERE er.department_id=". $department_nid ."";
  }
  elseif ($staff_uid != 0)
      $where = " WHERE ur.uid = ". $staff_uid ." ";

  $sql = "
  SELECT ur.uid,
      CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS name
    FROM {users_roles} ur
    INNER JOIN {role} r ON ur.rid=r.rid AND name='Staff'
    LEFT JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    LEFT JOIN {eduerp_roles} er ON ur.uid=er.uid AND er.role='Academic Staff'
    LEFT JOIN {content_type_department} d ON er.department_id=d.nid
    LEFT JOIN {content_type_college} c ON er.college_id=c.nid
    ". $where ."
    ORDER BY name
  ";//GROUP BY ur.uid ORDER BY name

  $result = db_query($sql);

  if (db_affected_rows($result) > 0) {
    while($row = db_fetch_object($result)){
      $stafflist[$row->uid] = $row->name;
    }
  }
  else {
    $stafflist[] = strip_tags(Error_Types(106));
  }
  return $stafflist;
}


/**
 * Show Form to Assign or Modify Assigned Lecturers and Timetables for Course Instances
 *
 * @uses staff_assign_course_form()
 * @uses staff_edit_assigned_course_form()
 * @uses staff_display_available_courses()
 * @global $departmentInfo
 * @global $canCreateModify
 * @global $_SESSION['eduerp_assign_course_session']
 * @global $_SESSION['eduerp_assign_course_semester']
 * @global $_SESSION['eduerp_fix_course']
 */
function staff_show_assign_course() {
  global $departmentInfo, $canCreateModify;

  //because of referal from LIST OF COURSES NOT RUNNING, WE SHALL DEFAULT THE SESSION AND SEMESTER
  if(isset($_SESSION['eduerp_fix_course'])) {
    $_SESSION['eduerp_assign_course_session'] = $_SESSION['eduerp_fix_course']->session;
    $_SESSION['eduerp_assign_course_semester'] = $_SESSION['eduerp_fix_course']->semester;
  }
  if(! isset($_SESSION['eduerp_assign_course_session'])) variable_get('eduerp_current_session', '');
  if(! isset($_SESSION['eduerp_assign_course_semester'])) variable_get('eduerp_current_semester', '');

  if (arg(3))
    echo "<b>Modify Assigned Lecturers and Timetables for Courses</b> | Sesssion: <b>". $_SESSION['eduerp_assign_course_session'] ."</b> | Semester: <b>". $_SESSION['eduerp_assign_course_semester'] ."</b><br /><br />";
  else
    echo "<b>Assign Lecturers and Timetables for Courses</b> | Sesssion: <b>". $_SESSION['eduerp_assign_course_session'] ."</b> | Semester: <b>". $_SESSION['eduerp_assign_course_semester'] ."</b><br /><br />";

  //echo "Below is a list of all availabel Staff and Course(s) that belong to <b>". $departmentInfo[arg(2)] ."</b> Department.<br /><br />";
  if ($canCreateModify)
    echo drupal_get_form('staff_assign_course_form');
  else{
    drupal_set_message(Error_Types(104), 'error');
  }

  if (! arg(3)) {
    //show edit form
    echo '<br /><hr /><br />';
    echo "<b>Modify Assigned Lecturers and Timetables for Courses</b><br /> ";
    if ($canCreateModify)
      echo drupal_get_form('staff_edit_assigned_course_form');
    else{
     drupal_set_message(Error_Types(105), 'error');
    }

    //display missing courses in the department here
    echo '<br /><hr /><br />';
    echo staff_display_available_courses($_SESSION['eduerp_assign_course_session'], $_SESSION['eduerp_assign_course_semester'], $departmentInfo, 3);

    //display unassigned existing courses in the department here
    //echo '<br /><hr /><br />';
    //echo staff_display_available_courses($departmentInfo, 2);

    //display assigned existing courses in the department here
    //echo '<br /><hr /><br />';
    //echo staff_display_available_courses($departmentInfo, 1);
  }

  if(isset($_SESSION['eduerp_fix_course'])) unset($_SESSION['eduerp_fix_course']); if(isset($_SESSION['eduerp_return_url'])) unset($_SESSION['eduerp_return_url']);
}


/**
 * Form to Assign or Modify Assigned Lecturers and Timetables for Course Instances
 *
 * @uses staff_assign_course_form_validate()
 * @uses staff_assign_course_form_submit()
 * @uses is_valid_course_instance()
 * @uses course_instance_match_department_and_session()
 * @uses get_Course_Instance()
 * @uses course()
 * @uses get_Staff_in_Department()
 * @global $_SESSION['eduerp_assign_course_session']
 * @global $_SESSION['eduerp_assign_course_semester']
 * @global $_SESSION['eduerp_fix_course']
 * @return array Drupal Form
 */
function staff_assign_course_form() {
  if ($_SESSION['eduerp_fix_course']) //the user is trying to fix course issues
    $course_instance = $_SESSION['eduerp_fix_course'];

  //if (arg(3) && arg(2) && is_valid_course_instance(arg(3)) && course_instance_match_department_and_session(arg(2), arg(3), variable_get('eduerp_current_session', ''))) {
  if (arg(3) && arg(2) && is_valid_course_instance(arg(3)) && course_instance_match_department_and_session(arg(2), arg(3), $_SESSION['eduerp_assign_course_session'])) {
   //the record is already for the current session so no more checks...we are fine!
   $authorizeCourseEdit = true;
   if (empty($_POST['location'])) {//trying to edit
     $result = get_Course_Instance(arg(3));
     $course_instance = db_fetch_object($result);
     $courses[$course_instance->nid] = $course_instance->course_code;
   }
  }

  if(! isset($courses)) {
    $courses = course(arg(2), $_SESSION['eduerp_assign_course_semester']);
    $courses = array(0 => '') + $courses;
  }

  $form['#title'] = 'Assign Lecturers and Timetable for Course';

  $form['course_nid'] = array(
  '#type' => 'select',
  '#options' => $courses,
  '#title' => 'Course Code',
  '#ahah' => array('path' => 'staff/ajax/getdeflecturer', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'getdeflecturerz'),
  '#required'  => TRUE
  );

  if ($course_instance) $form['course_nid']['#default_value'] = $course_instance->field_course_id_nid;

  $form['chief_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(''=>'') + get_Staff_in_Department(), //arg(2)),
      '#title' => 'First Lecturer',
      '#attributes' => array(
      'style' => 'width:100px'),
      '#prefix' => "<div id='getdeflecturerz'>",
      '#suffix' => "</div>",
      '#disabled' => TRUE,
      '#required'  => TRUE
      );
  if ($course_instance) {$form['chief_staff_nid']['#default_value'] = $course_instance->field_lecturer_uid; $form['chief_staff_nid']['#disabled'] = FALSE; }

  $form['assist_staff_nid'] = array(
      '#type' => 'select',
      '#options' => array(0=>'N/A') + get_Staff_in_Department(), //arg(2)),
      '#title' => 'Second Lecturer'
      );
  if ($course_instance) $form['assist_staff_nid']['#default_value'] = (int) $course_instance->field_lecturer_alternate_uid ;

   $form['timetable'] = array(
      '#type' => 'textarea',
      '#title' => 'Time Table',
      '#required' => TRUE
      );
   if ($course_instance) $form['timetable']['#default_value'] = $course_instance->field_timetable_value;

   if (!$course_instance) {
     $form['allow_twice'] = array(
        '#type' => 'checkbox',
        '#title' => 'Allow me run the same course twice in the same semester',
        '#default_value' => FALSE
        );
   }

   $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );

  $form['submit'] = array(
      '#value' => 'Assign',
      '#type' => 'submit'
    );
  if (arg(3)) $form['submit']['#value'] = "Update Assignment";
  if(isset($_SESSION['eduerp_fix_course'])) unset($_SESSION['eduerp_fix_course']);
  return $form;
}


/**
 * Form to Start Assigning Lecturers to Courses
 *
 * @uses staff_assign_course_proceed_form_submit()
 * @uses get_all_sessions()
 * @return array Drupal Form
 */
function staff_assign_course_proceed_form() {
  $form['#title'] = 'Start Assigning Lecturers to Courses';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#default_value'=>variable_get('eduerp_current_session', ''),
    '#required' => TRUE,
    );
  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2', 3=>'3'),
    '#title' => 'Semester',
    '#default_value'=>variable_get('eduerp_current_semester', ''),
    '#required' => TRUE,
    );
  $form['submit'] = array(
    '#value' => 'Start Assigning Lecturers to Courses',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * submit hook for {@link staff_assign_course_proceed_form()}
 *
 * @global $_SESSION['eduerp_assign_course_session']
 * @global $_SESSION['eduerp_assign_course_semester']
 * @global $_SESSION['eduerp_showCourseAssignment']
 */
function staff_assign_course_proceed_form_submit($form, &$state) {
  $values = $state['values'];
  $_SESSION['eduerp_assign_course_session'] = $values['session'];
  $_SESSION['eduerp_assign_course_semester'] = $values['semester'];
  $_SESSION['eduerp_showCourseAssignment'] = 1;
}


/**
 * validate hook for {@link staff_assign_course_form()}
 *
 * @uses is_course_assignment_existing()
 */
function staff_assign_course_form_validate($form, &$form_state) {
  if ($form_state['values']['course_nid'] == 0) form_set_error('course_nid', 'Course Code is required.');

  //make sure it is unique for course/semester/session
  if (arg(3)) {//validate EDIT

    // In an edit 'course_nid' is actually a course_instance nid, so we need to get the course nid
    $row = db_fetch_object(db_query("SELECT field_course_id_nid FROM {content_type_course_instance} WHERE nid=%d", $form_state['values']['course_nid']));

    if (is_course_assignment_existing($row->field_course_id_nid, $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'], arg(3))) {
      form_set_error('course_code', Error_Types(113));
    }
  }
  else {
    if (empty($form_state['values']['allow_twice']) && is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'], 0, TRUE)) {
      form_set_error('course_code', 'You are not to run the same course twice in the same semester unless you specifically check "Allow me run the same course twice in the same semester". Maybe you should use "Modify Assigned Lecturers and Timetables for Courses" instead.');
    }

    if (is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'])) {
      form_set_error('course_code', Error_Types(113));
    }
  }
}


/**
 * submit hook for {@link staff_assign_course_form()}
 *
 * @uses get_Available_Courses()
 * @uses is_course_assignment_existing()
 * @uses get_Max_Location_ID()
 * @global $_SESSION['eduerp_showCourseAssignment']
 */
function staff_assign_course_form_submit($form, &$form_state) {
  $_SESSION['eduerp_showCourseAssignment'] = 1;

  $course = db_fetch_object(get_Available_Courses(0,$form_state['values']['course_nid']));

  if(arg(3)){
    $node =  node_load(arg(3));
    $node->title                              = $course->course_code .' - '. $_SESSION['eduerp_assign_course_session'] .' - '. $_SESSION['eduerp_assign_course_semester'] .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = $_SESSION['eduerp_assign_course_session'];
    $node->field_semester_name[0]['value']    = $_SESSION['eduerp_assign_course_semester'];
    $node->field_repeat[0]['value']           = ($_SESSION['eduerp_assign_course_semester'] == 3) ? 1 : 0;
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];
    node_save($node);
    drupal_set_message($course->course_code .' Course was updated!<br />');

    drupal_goto("staff/createeditcourse/" . arg(2));
  }
  else {
    $location = 1;
    //this check is to know wether to increase the value of Location
    if (is_course_assignment_existing($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session'], $form_state['values']['timetable'], 0, true )) {
      //it means this course already has an instance for the semester and for the session
      //now get the max Location ID
      $max = get_Max_Location_ID($form_state['values']['course_nid'], $_SESSION['eduerp_assign_course_semester'], $_SESSION['eduerp_assign_course_session']);
      $location = $max->num + 1;
    }

    $node = new stdClass();
    $node->type                               = 'course_instance';
    $node->uid                                = 1;  // Admin
    $node->status                             = 1;  // Published
    $node->promote                            = 0;
    $node->sticky                             = 0;
    $node->comment                            = 0;
    $node->title                              = $course->course_code .' - '. variable_get('eduerp_current_session', '') .' - '. variable_get('eduerp_current_semester', '') .' - '. $course->course_level .' - '. $form_state['values']['location']; //[Course Title] . ' - ' . [Session Name] . ' - ' . [Semester Name] . ' - ' . [Level Name];
    $node->field_course_id[0]['nid']          = $form_state['values']['course_nid'];
    $node->field_lecturer[0]['uid']           = $form_state['values']['chief_staff_nid'];
    $node->field_lecturer_alternate[0]['uid'] = ($form_state['values']['assist_staff_nid'] != 0) ? $form_state['values']['assist_staff_nid'] : NULL;
    $node->field_sess_name[0]['value']        = $_SESSION['eduerp_assign_course_session'];
    $node->field_semester_name[0]['value']    = $_SESSION['eduerp_assign_course_semester'];
    $node->field_repeat[0]['value']           = ($_SESSION['eduerp_assign_course_semester'] == 3) ? 1 : 0;;
    $node->field_location[0]['value']         = $location;
    $node->field_timetable[0]['value']        = $form_state['values']['timetable'];

    drupal_set_message($course->course_code. ' Course has been Assigned!<br />');
  }

  node_save($node);
  if ($_SESSION['eduerp_return_url']) drupal_goto($_SESSION['eduerp_return_url']);
}


/**
 * Form to Modify Assigned Lecturers and Timetables for Course Instances
 *
 * @uses staff_edit_assigned_course_form_validate()
 * @uses staff_edit_assigned_course_form_submit()
 * @uses get_Assigned_Courses()
 * @global $_SESSION['eduerp_assign_course_session']
 * @global $_SESSION['eduerp_assign_course_semester']
 * @return array Drupal Form
 */
function staff_edit_assigned_course_form(){
  $form['#title'] = 'Update Assigned Courses';
 //get all assigned courses for the department
 $assigned = get_Assigned_Courses($_SESSION['eduerp_assign_course_session'], arg(2), $_SESSION['eduerp_assign_course_semester']);
 if (db_affected_rows() > 0) {
   while ($row = db_fetch_object($assigned)){
     if ($row->course_instance_id != "")
       $assignedCourses[$row->course_instance_id] = check_plain($row->code);
   }
 }
 else
   $assignedCourses[] = strip_tags(Error_Types(106));

 $form['course_instance_nid'] = array(
      '#type' => 'select',
      '#options' => $assignedCourses,
      '#title' => 'Course Code');
 $form['showCourseAssignment'] = array( //used to keep showing the form
      '#type' => 'hidden',
      '#default_value' => 1
      );
 $form['submit'] = array(
      '#value' => 'Modify Assignment',
      '#type' => 'submit'
    );

  return $form;
}


/**
 * validate hook for {@link staff_edit_assigned_course_form()}
 */
function staff_edit_assigned_course_form_validate($form, &$form_state) {
  if ($form_state['values']['course_instance_nid'] == '0')
    form_set_error('course_instance_nid', Error_Types(114));
}


/**
 * submit hook for {@link staff_edit_assigned_course_form()}
 *
 * @global $_SESSION['eduerp_showCourseAssignment']
 */
function staff_edit_assigned_course_form_submit($form, $form_state) {
  $_SESSION['eduerp_showCourseAssignment'] = 1;
  drupal_goto("staff/createeditcourse/" . arg(2) .'/'. $form_state['values']['course_instance_nid']);
}


/**
 * Find Course Instances in this Department for a Session and Semester
 *
 * @param string $session
 * @param int $department_nid 'department' CCK Drupal node nid
 * @param int $semester
 * @return mysqli_result
 */
function get_Assigned_Courses($session, $department_nid, $semester) {
  $sql = "SELECT
  ci.nid AS course_instance_id,
  CONCAT(c.field_code_value, IF(ci.field_location_value > 1, CONCAT(' (', CAST(ci.field_location_value AS CHAR), ': ', LEFT(ci.field_timetable_value, 100), ')'), '')) AS code
  FROM {content_type_course} c, {content_type_course_instance} ci
    WHERE
      c.field_department_nid_nid=%d AND
      c.nid=ci.field_course_id_nid AND
      ci.field_sess_name_value='%s' AND
      ci.field_semester_name_value='%s'
      ORDER BY code";
      $r = db_query($sql,$department_nid, $session, $semester);
  return $r;
}


/**
 * Find Courses in a Department which may or may not ('clean_nid' is NULL) have a Course Instance for a Session and Semester
 *
 * @param string $session
 * @param int $department_nid 'department' CCK Drupal node nid
 * @param int $semester (or 0)
 * @return mysqli_result
 */
function get_department_running_courses($session, $department_nid, $semester = 0) {
  $morewhere = "";
  if ($semester != 0)
    $morewhere = " pc.semester='". $semester ."' AND ";

  $sql = "SELECT DISTINCT
        pc.level course_level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value dept_name,
        co.field_college_name_value,
        ci.nid clean_nid,
        ci.field_lecturer_uid lecturer_uid,
        pc.credit_load AS credit_load,
        field_prerequisite_codes_value AS prerequisite_codes,
        field_prerequisite_value AS prerequisite_desc,
        pc.semester course_semester,
        field_course_description_value AS course_description,
        field_coursetitle_value AS course_title,
        c.nid nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='". $session ."'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE  $morewhere d.nid='". $department_nid ."'
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level ";
    $r = db_query($sql);
  return $r;
}


/**
 * ALAN 20110109 Does not seem to be used, verify and remove
 * @deprecated
 */
function get_unassigned_courses($session, $department_nid = 0) {
  $where = ""; $args = "";
  if ($department_nid != 0) {
     $where = "
     WHERE k.nid NOT IN (
        SELECT course.field_course_id_nid
    FROM {content_type_course_instance} AS course
    INNER JOIN {content_type_course} AS q ON q.nid = course.field_course_id_nid
    INNER JOIN {content_type_department} AS dept ON q.field_department_nid_nid = dept.nid
    WHERE dept.nid =$department_nid AND course.field_sess_name_value = '". $session ."' )
  AND k.field_department_nid_nid =$department_nid ";
  }

  $sql = "
  SELECT k.nid nid, field_level_value AS course_level, field_code_value AS course_code, field_coursetitle_value AS course_title,
      field_creditload_value AS credit_load, field_prerequisite_value AS prerequisite_desc, field_prerequisite_codes_value AS prerequisite_codes,
      field_semester_value AS course_semester, field_course_description_value AS course_description, field_department_name_value AS dept_name,
      field_college_name_value AS fac_name, field_college_abbreviation_value AS fac_abbr, field_programme_name_value programme_name
      FROM {content_type_course} AS k
      INNER JOIN {content_type_department} AS d ON k.field_department_nid_nid = d.nid
      INNER JOIN {content_type_college} AS c ON d.field_college_id_nid = c.nid
      INNER JOIN {content_type_program} AS p ON p.field_department_id_nid = d.nid
      ". $where ."
      ORDER BY field_college_name_value, dept_name, programme_name, course_level, course_code ";
  $r = db_query($sql);

  return $r;
}


/**
 * Find Maximum Location Value for any Course Instance matching a Course in a Session and Semester
 *
 * @param int $course_nid 'course' CCK Drupal node nid
 * @param int $semester
 * @param string $session
 * @return StdClass
 */
function get_Max_Location_ID($course_nid, $semester, $session) {
  $result = db_query("SELECT IFNULL(MAX(field_location_value), 0) num FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
  return $row = db_fetch_object($result);
}


/**
 * Does a Matching Course Instance Exist?
 *
 * @param int $course_nid 'course' CCK Drupal node nid
 * @param int $semester
 * @param string $session
 * @param string $timetable
 * @param string $instance_nid  'course_instance' CCK Drupal node nid (or 0)
 * @param bool $for_location_checks
 * @return bool
 */
function is_course_assignment_existing($course_nid, $semester, $session, $timetable, $instance_nid = 0, $for_location_checks=false) {
  if ($for_location_checks) {//no need to include timetable
    if ($instance_nid != 0) {
      // Not used (Alan says)
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d ", $course_nid, $semester, $session, $instance_nid);
    }
    else {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' ", $course_nid, $semester, $session);
    }
  }
  else {//include timetable
    if ($instance_nid != 0) {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s' AND nid !=%d AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $instance_nid, $timetable);
    }
    else {
      $result = db_query("SELECT nid FROM {content_type_course_instance}
      WHERE field_course_id_nid=%d AND field_semester_name_value='%s' AND field_sess_name_value='%s'  AND field_timetable_value = '%s' ", $course_nid, $semester, $session, $timetable);
    }
  }
  if (db_affected_rows($result) > 0) return true;

  return false;
}


/**
 * Get Course Instance
 *
 * @param int $course_instance_nid 'course_instance' CCK Drupal node nid
 * @return mysqli_result
 */
function get_Course_Instance($course_instance_nid) {
  $result = db_query("SELECT field_code_value course_code, ci.nid, ci.field_lecturer_uid, ci.field_sess_name_value, ci.field_semester_name_value, ci.field_lecturer_alternate_uid, ci.field_repeat_value, ci.field_course_id_nid,  ci.field_location_value, ci.field_timetable_value
      FROM {content_type_course_instance} ci
      INNER JOIN {content_type_course} c0 ON ci.field_course_id_nid = c0.nid
      WHERE ci.nid=%d ", $course_instance_nid);
  return $result;
}


/**
 * Handles 'staff/createmodifyprog' menu to Create/Update a Programme
 *
 * @uses is_valid_programme()
 * @uses staff_create_programme_form()
 * @uses staff_create_programme_back_form()
 * @uses staff_create_programme_form2()
 * @uses staff_create_programme_back_form()
 * @uses staff_create_programme_form()
 * @uses staff_modify_programme_form()
 * @uses staff_specify_course_proceed_form()
 * @uses staff_verify_course_proceed_form()
 * @uses staff_display_available_programmes()
 * @uses staff_create_programme_back_form()
 * @uses staff_create_programme_form2()
 * @uses staff_create_programme_back_form()
 * @global stdClass $programmeInfo
 * @global bool $canCreateModify
 * @global bool $authorizeEdit;
 * @global int $_SESSION['eduerp_showOn']
 * @global int $_SESSION['eduerp_showCourseAssignment']
 * @return string HTML
 */
function staff_create_edit_programme() {
  global $user, $programmeInfo, $canCreateModify, $authorizeEdit;
  $canCreateModify = false;
  //$hideOthers = false;

  if (isset($_SESSION['eduerp_showOn'])) $_POST['showOn'] = 1;
  if (isset($_SESSION['eduerp_showCourseAssignment'])) $_POST['showCourseAssignment'] = 1;
  ob_start();
  echo '<br /><hr /><br />';
  $authorizeEdit = false;

  //check if user is trying to edit record
  if (arg(2) && is_valid_programme(arg(2))) {//the programme is valid
    //get the programme info
    $programmeInfo = db_fetch_object(get_programmes(arg(2)));
    $authorizeEdit = true;$hideOthers=true;
    /*
    if (isset($_POST['showCourseAssignment'])) {
        //allow for some easy navigation
        $navi = "<font size = '1px'><a href = '/staff/semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;<a href = '/staff/createmodifyprog/". arg(2) ."'>". $programmeInfo->programme_name ." Programme</a>&nbsp; &raquo; &nbsp;<b>Course Assignment</b></font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo show_Specify_Course_for_Programme();
        $hideOthers=true;
    }
    */
    //else {
      //allow for some easy navigation
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createmodifyprog') ."'>Create/Modify a University Programme</a>&nbsp; &raquo; &nbsp;Modify Programme: <b>". $programmeInfo->programme_name . ' ('. $programmeInfo->programme_abbr . ')' ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';

      if (! isset($_POST['showOn'])) {
        echo $navi;
        echo "<b>Modify Programme...Step 1 of 2</b> - Please make all required changes<br /><br />";
        echo drupal_get_form('staff_create_programme_form');
        //$hideOthers = true;
      }
      else {
        echo $navi;
        echo drupal_get_form('staff_create_programme_back_form') . "<br />";
        echo "<b>Modify Programme continued...Step 2 of 2</b> - Please make all required changes<br /><br />";
        if (isset($_POST['showOn'])) {
          echo "Programme Name: <b>" . $_SESSION['eduerp_bkinfo']->programme_name . "</b><br /><br />";
          echo "Programme Duration: <b>" . $_SESSION['eduerp_bkinfo']->duration . "</b><br />";
        }
        echo drupal_get_form('staff_create_programme_form2') . "<br />";
        echo drupal_get_form('staff_create_programme_back_form') . "<br />";
      }
    //}
  }
  else { //not in edit mode

    //allow for some easy navigation
    echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Create/Modify a Programme</font><br /><br />";
    echo '<br /><hr /><br /><br />';

    if (! isset($_POST['showOn'])) {
      echo "<b>Create Programme...Step 1 of 2</b> - Please fill the form<br /><br />";
      echo drupal_get_form('staff_create_programme_form');


      echo '<br /><hr /><br />';
      echo "<b>Modify Programme</b> - Select a Programme to modify it<br /><br />";
      echo drupal_get_form('staff_modify_programme_form');

      echo '<br /><hr /><br />';
      echo '<b>Specify Courses for a Programme</b> - Click to proceed with specifying course for a programme<br /><br />';
      echo drupal_get_form('staff_specify_course_proceed_form');


      echo '<br /><hr /><br />';
      echo '<b>Verify all Courses needed for a Programme are being run for a Semester</b> - Click to proceed with verifying courses<br /><br />';
      echo drupal_get_form('staff_verify_course_proceed_form');

      //display existing programmes here
      echo '<br /><hr /><br />';
      echo staff_display_available_programmes($programmeInfo);
    }
    else {
      echo drupal_get_form('staff_create_programme_back_form') . "<br />";
      echo "<b>Create Programme continued...Step 2 of 2</b> - Please fill the form<br /><br />";
      if (isset($_POST['showOn'])) {
        echo "Programme Name: <b>" . $_SESSION['eduerp_bkinfo']->programme_name . "</b><br /><br />";
        echo "Programme Duration: <b>" . $_SESSION['eduerp_bkinfo']->duration . "</b><br />";
      }
      echo drupal_get_form('staff_create_programme_form2') . "<br />";
      echo drupal_get_form('staff_create_programme_back_form') . "<br />";
    }
  }

  unset($_SESSION['eduerp_showOn']); unset($_SESSION['eduerp_goBack']);

  return ob_get_clean();
}


/**
 * Form to Create/UPdate a Programme
 *
 * @uses staff_create_programme_form_validate()
 * @uses staff_create_programme_form_submit()
 * @uses department()
 * @uses programme_types()
 * @global stdClass $programmeInfo
 * @global bool $authorizeEdit;
 * @global int $_SESSION['eduerp_goBack']
 * @global int $_SESSION['eduerp_bkinfo']
 * @return array Drupal Form
 */
function staff_create_programme_form() {
  global $authorizeEdit, $programmeInfo;

 //i am now using global variables as u can see above. Before getting here (for editing), most checks have been done. lets not do anymore db calls hmmm..
 if (isset($_SESSION['eduerp_goBack']) && $_SESSION['eduerp_bkinfo']) {$programme = $_SESSION['eduerp_bkinfo']; }

  if ($authorizeEdit) {
    if (empty($_POST['programme_name'])) {//trying to edit
      //check if data exists in program_level_semester
      if($_SESSION['eduerp_bkinfo'])
        $programme = $_SESSION['eduerp_bkinfo'];
      else
        $programme = $programmeInfo; //$_SESSION['eduerp_bkinfo']; //$programmeInfo;
      //ok fine we need to get the previous start_level that was set

      unset($programmeInfo->start_level);
      $result = db_query("SELECT * FROM {program_level_semester} WHERE programme_id = %d ORDER BY level ",arg(2));
      if (db_affected_rows($result) > 0) {
        $row = db_fetch_object($result);
        $programmeInfo->start_level = $row->level;
      }
    }
  }

  $form['#title'] = 'Create New Programme';
  $form['programme_name'] = array(
    '#title' => 'Programme Name',
    '#type' => 'textfield',
    '#size' => 100,
    '#required' => TRUE
  );
  if ($programme) $form['programme_name']['#default_value'] = $programme->programme_name;

  $form['programme_abbr'] = array(
    '#type' => 'textfield',
    '#title' => 'Programme Abbreviation',
    '#required' => TRUE
  );
  if ($programme) $form['programme_abbr']['#default_value'] = $programme->programme_abbr;

  //during modification, department_nid should not be changed so lets deal with it
  if ($programme) {//for modification
    $id = $programme->department_nid;
  }
  else {
    $id = 0;
  }

  $form['department_nid'] = array(
    '#type' => 'select',
    '#options' => department($id),
    '#title' => 'Department');
  if ($programme) $form['department_nid']['#default_value'] = $programme->department_nid;

  $form['duration'] = array(
    '#title' => 'Programme Duration - Duration in years of this programme e.g. 4',
    '#type' => 'textfield',
    '#size' => 2,
    '#required' => TRUE
  );
  if ($programme) $form['duration']['#value'] = $programme->duration;

  $form['max_duration'] = array(
    '#title' => 'Maximum Duration - Maximum semesters a student may spend completing this programme e.g. 12',
    '#type' => 'textfield',
    '#size' => 2,
    '#required' => TRUE
  );
  if ($programme) $form['max_duration']['#value'] = $programme->max_duration;

  $form['min_credit_load'] = array(
    '#title' => 'Minimum Credit Load - Minimum completed credit load before graduation',
    '#type' => 'textfield',
    '#size' => 4,
    '#required' => TRUE
  );
  if ($programme) $form['min_credit_load']['#value'] = $programme->min_credit_load;

  $form['programme_type'] = array(
    '#type' => 'select',
    '#options' => programme_types(),
    '#title' => 'Programme Type',
    '#required' => TRUE);
  if ($programme) $form['programme_type']['#default_value'] = $programme->programme_type;

  $form['start_level'] = array(
    '#type' => 'select',
    '#options' => array(100 => '100', 1 => '1'),
    '#title' => 'Start Level',
    '#required' => TRUE);
  if (isset($programmeInfo->start_level)) $form['start_level']['#default_value'] = $programmeInfo->start_level;

  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );
  if ($authorizeEdit || isset($_POST['showOn'])) $form['submit']['#value'] = 'Continue Update Programme';

  return $form;
}


/**
 * validate hook for {@link staff_create_programme_form()}
 *
 * @uses staff_has_eduerp_role()
 * @uses is_Programme_Name_Existing()
 * @uses is_Programme_Abbr_Existing()
 * @global int $_SESSION['eduerp_bkinfo']
 */
function staff_create_programme_form_validate($form, &$form_state) {
  global $user;
  unset($_SESSION['eduerp_bkinfo']);
  //make sure he can create/modify

  if (staff_has_eduerp_role($user->uid, $form_state['values']['department_nid'], 0, array('Head of Department', 'Department Grade Editor'))) {

    //make sure no duplicates
    if (arg(2)) {//validate EDIT
      if (is_Programme_Name_Existing($form_state['values']['programme_name'], arg(2)))
        form_set_error('programme_name', Error_Types(101));

      if (is_Programme_Abbr_Existing($form_state['values']['programme_abbr'], arg(2)))
        form_set_error('programme_abbr', Error_Types(120));
    }
    else {//validate CREATE
      if (is_Programme_Name_Existing($form_state['values']['programme_name']))
        form_set_error('programme_name', Error_Types(115));

      if (is_Programme_Abbr_Existing($form_state['values']['programme_abbr']))
        form_set_error('programme_abbr', Error_Types(120));
    }

    //validate for int entry
    if(! preg_match("/^[0-9]{1,2}$/", trim($form_state['values']['duration'])) || $form_state['values']['duration'] <= 0) form_set_error('duration', Error_Types(107));
    if(! preg_match("/^[0-9]{1,2}$/", trim($form_state['values']['max_duration'])) || $form_state['values']['max_duration'] <= 0) form_set_error('max_duration', Error_Types(107));
    if(! preg_match("/^[0-9]{1,3}$/", trim($form_state['values']['min_credit_load'])) || $form_state['values']['min_credit_load'] <= 0) form_set_error('min_credit_load', Error_Types(107));

    // Security checks
    $text = $form_state['values']['programme_name'];
    if (!empty($text)) {
      if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
        form_set_error('programme_name', Error_Types(168));
      }
    }
    $text = $form_state['values']['programme_abbr'];
    if (!empty($text)) {
      if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
        form_set_error('programme_abbr', Error_Types(168));
      }
    }
  }
  else
    form_set_error('department_nid', Error_Types(117));
}


/**
 * submit hook for {@link staff_create_programme_form()}
 *
 * @global int $_SESSION['eduerp_showOn']
 * @global int $_SESSION['eduerp_bkinfo']
 */
function staff_create_programme_form_submit($form, &$form_state) {

  //the form has been validated. put all in a session variable and show the next form
  $_SESSION['eduerp_showOn'] = 2; $_POST['showOn'] = 2;
  foreach ($form_state['values'] as $k  => $v)
    $bkinfo->{$k} = $v;

  $_SESSION['eduerp_bkinfo'] = $bkinfo;
}


/**
 * Form to Create/Update a Programme... Edit the 'program_level_semester' table
 *
 * @uses staff_create_programme_form2_validate()
 * @uses staff_create_programme_form2_submit()
 * @global bool $authorizeEdit;
 * @global int $_SESSION['eduerp_bkinfo']
 * @return array Drupal Form
 */
function staff_create_programme_form2() {
  global $authorizeEdit;
  if (isset($_SESSION['eduerp_bkinfo'])) {

    $form['#title'] = 'Create New Programme continued...';
    if ($authorizeEdit && empty($_POST['credit_desc11'])) {
      //check if previous rec exists in program_level_semester table
      $result = db_query("SELECT * FROM {program_level_semester} WHERE programme_id = %d ORDER BY level", arg(2));
      if (db_affected_rows($result) > 0 && db_affected_rows($result) ==  ($_SESSION['eduerp_bkinfo']->duration * 2)) {
        //the record is up for edit and the user did not change the duration. so show whats in the db as defaults
        if (strlen($_SESSION['eduerp_bkinfo']->start_level) > 1) $mul = 100; else $mul = 1;$id=$mul;$g=1;
        while($row = db_fetch_object($result)) {
          $credit_desc[$id][$row->semester] = $row->min_credit_load .', '. $row->max_credit_load;
          if ($g >= 2) {$id += $mul; $g=1;} else $g++;
        }
      }
    }

    for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
      for ($p = 1; $p <= 2; $p++) {
        $form['credit_desc'.$i.$p] = array(
          '#title' => 'Level '. $i * $_SESSION['eduerp_bkinfo']->start_level .', Semester '. $p .':<br /> Minimum and Maximum Credit Load a Student is allowed select when Registering Courses for this Semester. Note: (The Min and Max must be separated by \', \' e.g. 10,60) ',
          '#type' => 'textfield',
          '#size' => 10,
          '#required' => TRUE
        );
        if ($credit_desc) $form['credit_desc'.$i.$p]['#default_value'] = $credit_desc[$i * $_SESSION['eduerp_bkinfo']->start_level][$p];
        //we need to override the above line of some data previously existed on this page
        //if(isset($_SESSION['eduerp_page_2_bkinfo'][$i.$p]))
        //  $form['credit_desc'.$i.$p]['#default_value'] = $_SESSION['eduerp_page_2_bkinfo'][$i.$p]; //$credit_desc[$i * $_SESSION['eduerp_bkinfo']->start_level][$p];
      }
    }
   $form['showOn'] = array(//keep showing the form
    '#title' => 'Show On',
    '#type' => 'hidden',
    '#default_value' => 1
  );

    $form['submit'] = array(
      '#value' => 'Create Programme',
      '#type' => 'submit'
    );
    if ($authorizeEdit) $form['submit']['#value'] = 'Update Programme';

    return $form;
  }
}


/**
 * validate hook for {@link staff_create_programme_form2()}
 *
 * @global int $_SESSION['eduerp_bkinfo']
 */
function staff_create_programme_form2_validate($form, &$form_state) {

  for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
      for ($p = 1; $p <= 2; $p++) {
        if (strpos($form_state['values']['credit_desc'.$i.$p], ",")) {
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
          if (sizeof($prog_credit_load) != 2) form_set_error('credit_desc'.$i.$p, Error_Types(118)); //not in expected format

          else {//check each to match int
            foreach ($prog_credit_load as $v) {
                if(! preg_match("/^[0-9]{1,3}$/", trim($v))) form_set_error('credit_desc'.$i.$p, Error_Types(107));
            }
            if ($prog_credit_load[0] > $prog_credit_load[1]) form_set_error('credit_desc'.$i.$p, Error_Types(119)); //min shld not b greater than max
          }
        }
        else{
          form_set_error('credit_desc'.$i.$p, Error_Types(118)); //not in expected format
        }
      }
    }
}


/**
 * submit hook for {@link staff_create_programme_form2()}
 *
 * @global int $_SESSION['eduerp_bkinfo']
 */
function staff_create_programme_form2_submit($form, &$form_state) {

  if(arg(2)){
    $node =  node_load(arg(2));
    $node->title                            = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_name[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_abbr[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_abbr;
    $node->field_department_id[0]['nid']    = $_SESSION['eduerp_bkinfo']->department_nid;
    $node->field_duration[0]['value']       = $_SESSION['eduerp_bkinfo']->duration;
    $node->field_max_duration[0]['value']   = $_SESSION['eduerp_bkinfo']->max_duration;
    $node->field_min_credit_load_program[0]['value'] = $_SESSION['eduerp_bkinfo']->min_credit_load;
    $node->field_program_type[0]['value']   = $_SESSION['eduerp_bkinfo']->programme_type;

    node_save($node);
    drupal_set_message($_SESSION['eduerp_bkinfo']->programme_name .' Programme was updated!<br />');

    //get the status of open_for_registrations for the program
    $sql = "SELECT programme_id, level, semester, open_for_registrations FROM program_level_semester WHERE programme_id = '". arg(2) ."'";
    $rs = db_query($sql);
    //arrange in 2 dim array
    while($r = db_fetch_object($rs)){
      $open_for_reg_value[$r->level][$r->semester] = $r->open_for_registrations;

    }

    //delete all entries reping the programme.
    db_query("DELETE FROM program_level_semester WHERE programme_id = '". arg(2) ."'");

    //insert program_level_semester
    if (isset($_SESSION['eduerp_bkinfo'])) {
      $sql = "INSERT INTO program_level_semester (programme_id, level, semester, min_credit_load, max_credit_load, open_for_registrations) VALUES  ";
      for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
        for ($p = 1; $p <= 2; $p++) {
          $level = $_SESSION['eduerp_bkinfo']->start_level * $i;
          $open_for_reg = isset($open_for_reg_value[$level][$p]) ? $open_for_reg_value[$level][$p] : 0;
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
          $sql .= "('". arg(2) ."', '". $level ."', '". $p ."', '". trim($prog_credit_load[0]) ."', '". trim($prog_credit_load[1]) ."', '". $open_for_reg ."' ), ";
        }
      }
      $sql = substr($sql, 0, -2);
      db_query($sql);
      unset($_SESSION['eduerp_bkinfo']);
    }
    $_POST['showOn'] = null;
    $_SESSION['eduerp_showOn'] = null;
    drupal_goto("staff/createmodifyprog");
  }
  else {

    // program CCK
    $node = new stdClass();
    $node->type                             = 'program';
    $node->uid                              = 1;  // Admin
    $node->status                           = 1;  // Published
    $node->promote                          = 0;
    $node->sticky                           = 0;
    $node->comment                          = 0;
    $node->title                            = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_name[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_name;
    $node->field_programme_abbr[0]['value'] = $_SESSION['eduerp_bkinfo']->programme_abbr;
    $node->field_department_id[0]['nid']    = $_SESSION['eduerp_bkinfo']->department_nid;
    $node->field_duration[0]['value']       = $_SESSION['eduerp_bkinfo']->duration;
    $node->field_max_duration[0]['value']   = $_SESSION['eduerp_bkinfo']->max_duration;
    $node->field_min_credit_load_program[0]['value'] = $_SESSION['eduerp_bkinfo']->min_credit_load;
    $node->field_program_type[0]['value']   = $_SESSION['eduerp_bkinfo']->programme_type;
    node_save($node);
    $programme_nid = $node->nid;
    drupal_set_message($_SESSION['eduerp_bkinfo']->programme_name .' Programme was created!<br />');

    //insert into program_level_semester
    if (isset($_SESSION['eduerp_bkinfo'])) {
      $sql = "INSERT INTO program_level_semester (programme_id, level, semester, min_credit_load, max_credit_load, open_for_registrations) VALUES  ";
      for ($i = 1; $i <= $_SESSION['eduerp_bkinfo']->duration; $i++) {
        for ($p = 1; $p <= 2; $p++) {
          $prog_credit_load = explode(',', $form_state['values']['credit_desc'.$i.$p]);
          $level = $_SESSION['eduerp_bkinfo']->start_level * $i;
          $sql .= "('". $programme_nid ."', '". $level ."', '". $p ."', '". trim($prog_credit_load[0]) ."', '". trim($prog_credit_load[1]) ."', 0), ";
        }
      }
      $sql = substr($sql, 0, -2);
      db_query($sql);
      unset($_SESSION['eduerp_bkinfo']);
    }
  }
  $_POST['showOn'] = null;
  $_SESSION['eduerp_showOn'] = null;
}


/**
 * Form to Go Back for Programme Create/Update
 *
 * @uses staff_create_programme_back_form_validate()
 * @uses staff_create_programme_back_form_submit()
 * @return array Drupal Form
 */
function staff_create_programme_back_form() {
  //$form['#title'] = 'Create New Programme Back';
  $form['showOn'] = array(//keep showing the form
    '#title' => 'Show On',
    '#type' => 'hidden',
    '#default_value' => 1
  );

  $form['submit'] = array(
      '#value' => 'go Back',
      '#type' => 'submit'
    );

    return $form;
}


/**
 * validate hook for {@link staff_create_programme_back_form()}
 *
 * @global int $_SESSION['eduerp_goBack']
 */
function staff_create_programme_back_form_validate($form, &$form_state) {
  $_SESSION['eduerp_goBack'] = 1;
}


/**
 * submit hook for {@link staff_create_programme_back_form()}
 *
 * @global int $_SESSION['eduerp_goBack']
 * @global int $_SESSION['eduerp_showOn']
 */
function staff_create_programme_back_form_submit($form, &$form_state) {
  $_SESSION['eduerp_goBack'] = 1;
  $_SESSION['eduerp_showOn'] = null;
}


/**
 * Form to Cancel for Programme Create/Update
 *
 * @return array Drupal Form
 * @deprecated
 */
function staff_create_programme_cancel_form() {
  $form['#title'] = 'Create New Programme Cancel';
  $form['submit'] = array(
      '#value' => 'Cancel',
      '#type' => 'submit'
    );

    return $form;
}


function staff_create_programme_cancel_form_submit($form, &$form_state) {
  ;
}


/**
 * Find all Programme Types
 *
 * @return array Type => Name
 */
function programme_types() {
  return array(
    1  => 'Undergraduate',
    3  => 'Medicine Type Grades',
    6  => 'Matric',
    7  => 'Certificate CIS',
    8  => 'Diploma CIS',
    9  => 'Postgraduate Diploma',
    10 => 'Postgraduate Masters',
    11 => 'Postgraduate PhD',
    12 => 'Postgraduate MPhil',

    '-1'  => 'Closed to new entrants, Undergraduate',
    '-3'  => 'Closed to new entrants, Medicine Type Grades',
    '-6'  => 'Closed to new entrants, Matric',
    '-7'  => 'Closed to new entrants, Certificate CIS',
    '-8'  => 'Closed to new entrants, Diploma CIS',
    '-9'  => 'Closed to new entrants, Postgraduate Diploma',
    '-10' => 'Closed to new entrants, Postgraduate Masters',
    '-11' => 'Closed to new entrants, Postgraduate PhD',
    '-12' => 'Closed to new entrants, Postgraduate MPhil',
    );
}


/**
 * Form to Select Programme to Update
 *
 * @uses staff_modify_programme_form_validate()
 * @uses staff_modify_programme_form_submit()
 * @uses programme()
 * @return array Drupal Form
 */
function staff_modify_programme_form(){
  $form['#title'] = 'Modify Programme';

    $form['programme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');

    $form['submit'] = array(
      '#value' => 'Modify Programme',
      '#type' => 'submit'
    );

  return $form;
}


/**
 * validate hook for {@link staff_modify_programme_form()}
 *
 * @uses get_programmes()
 * @uses staff_has_eduerp_role()
 * @global int $_SESSION['eduerp_bkinfo']
 */
function staff_modify_programme_form_validate($form, &$form_state) {
  global $user;
  unset($_SESSION['eduerp_bkinfo']);
  //get the department attached to the programme

  $program = get_programmes($form_state['values']['programme_nid']);
  if (db_affected_rows($program) > 0) {
    $programInfo = db_fetch_object($program);
    if (staff_has_eduerp_role($user->uid, $programInfo->department_nid, 0, array('Head of Department', 'Department Grade Editor'))) {
      $authorizeEdit = true;
    }
    else
      form_set_error('programme_nid', Error_Types(121));
  }
  else
    form_set_error('programme_nid', Error_Types(114));
}


/**
 * submit hook for {@link staff_modify_programme_form()}
 */
function staff_modify_programme_form_submit($form, &$form_state) {
  drupal_goto("staff/createmodifyprog/" . $form_state['values']['programme_nid']);
}


/**
 * Specify or Modify Courses for a Programme and add JS to page
 *
 * @uses is_valid_programme()
 * @uses staff_has_eduerp_role()
 * @uses is_valid_programme_course_id()
 * @uses staff_assign_course_to_programme_form()
 * @uses get_programme_running_courses_all_semesters()
 * @uses course_specify_list()
 * @uses historical_course_list()
 * @global stdClass $programmeInfo
 * @global bool $canCreateModify
 * @global stdClass $progCourse
 * @return string HTML
 */
function staff_specify_course_for_programme() {
  global $user, $programmeInfo, $canCreateModify, $progCourse;
  ob_start();
  $programmeInfo = db_fetch_object(get_programmes(arg(2)));
  $canCreateModify = false;

  if (! arg(2) || ! is_valid_programme(arg(2)))
    drupal_goto("/staff/createmodifyprog");

  if (staff_has_eduerp_role($user->uid, $programmeInfo->department_nid, 0, array('Head of Department', 'Department Grade Editor')))
    $canCreateModify = true;
  if (arg(3)) {
    if (! is_valid_programme_course_id(arg(2), arg(3)))
      drupal_goto("/staff/specifycourse/". arg(2));
    else {
        $sql = "SELECT course_id, programme_id, level, semester, course_type, lecturer_id, credit_load FROM {program_course} WHERE program_course_id=%d";
        $rs = db_query($sql, arg(3));
        $progCourse = db_fetch_object($rs);
    }
  }

  $arg = arg(2);

  $delete_assignment_js =<<< EOD
  function delete_assignment(id) {

    if (confirm('Are you sure you want to delete this course assignment?')) {
      $.get('/staff/ajax/deleteassignprog/'+id, function(data) { location.href='/staff/specifycourse/$arg'; });
    }
  }


  function make_available(id) {
    if (confirm('Are you sure you want to make the Course available for New Registrations?')) {
      $.get('/staff/ajax/makeavailable/'+id, function(data) { location.href='/staff/specifycourse/$arg'; });
    }
  }
  function edit_assignment(id) {
      $.get('/staff/ajax/modifyassignprog/'+id, function(data) { location.href='/staff/specifycourse/$arg/'+id; });
  }
EOD;


  drupal_add_js($delete_assignment_js, 'inline');

  echo '<br /><hr /><br />';
  if (arg(3)) {
    $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createmodifyprog') ."'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/specifycourse/'. arg(2)) ."'>Specify Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</a>&nbsp; &raquo; &nbsp;Edit Course</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Modify Specified Course(s) for Programme</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />"; //. variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";
  }
  else {
    $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createmodifyprog') ."'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;Specify Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Specify Course(s) for Programme</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />";
  }

  if ($canCreateModify)
    echo drupal_get_form('staff_assign_course_to_programme_form');
  else {
    drupal_set_message(Error_Types(104), 'error');
  }

  if(! arg(3)) {
    $runningCourse = get_programme_running_courses_all_semesters($programmeInfo->programme_nid, variable_get('eduerp_current_session', ''));

    echo '<br /><hr /><br />';
    echo "<b>List of courses that need to be run this session for ". $programmeInfo->programme_name  ." Programme</b><br/><br />";

    echo "<div id='assigned_courses'>";
    course_specify_list($runningCourse);
    echo "</div>";

    echo '<br /><hr /><br />';
    echo "<b>Historical Courses not available for New Registrations</b><br/><br />";
    echo "<div id='assigned_courses'>";
    historical_course_list($programmeInfo->programme_nid);
    echo "</div>";
  }
  return ob_get_clean();
}


/**
 * Handles 'staff/verifycourse' menu to Verify all Courses needed for a Programme are being run for a Session and Semester
 *
 * @uses is_valid_programme()
 * @uses get_all_sessions()
 * @uses verify_assigned_courses()
 * @uses get_unassigned_for_programme()
 * @uses display_course_result()
 * @uses get_programme_running_courses()
 * @uses display_course_result()
 * @global array $all_sessions
 * @global stdClass $programmeInfo
 * @global array $_SESSION['eduerp_verify']
 * @global string $_SESSION['eduerp_return_url']
 * @return string HTML
 */
function staff_verify_assigned_course() {
  global $user, $all_sessions, $programmeInfo;
  ob_start();

  if (! arg(2) || ! is_valid_programme(arg(2)))
    drupal_goto("/staff/createmodifyprog");

  $all_sessions = get_all_sessions();
  $programmeInfo = db_fetch_object(get_programmes(arg(2)));
  echo '<br /><hr /><br />';
    $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/createmodifyprog') ."'>Create/Modify a Programme</a>&nbsp; &raquo; &nbsp;Verified Assigned Course(s): <b>". $programmeInfo->programme_name ."</b> Programme</font><br /><br />";
    $navi .= '<br /><hr /><br />';
    echo $navi;
    echo "<b>Verify all Courses needed for a Programme are being run for</b> | Session: <b>". $_SESSION['eduerp_verify']['session'] ."</b> | Semester: <b>". $_SESSION['eduerp_verify']['semester'] ."</b> | Programme: <b>". $programmeInfo->programme_name ."</b><br /><br />"; //. variable_get('eduerp_current_session', '') ."</b> | Semester: <b>". variable_get('eduerp_current_semester', '') ."</b><br /><br />";

    echo '<br /><hr /><br />';
    //run the verify code
    verify_assigned_courses($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);

    //test to see if all courses for the programme have been assigned
    $unassignedRecords = get_unassigned_for_programme($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);
    if (db_affected_rows($unassignedRecords) > 0) {
      //there are unassigned courses

      echo "<b>List of Missing Courses for <b>". $programmeInfo->programme_name  ."</b> Programme for ". $_SESSION['eduerp_verify']['session'] ." Session for Semester ". $_SESSION['eduerp_verify']['semester'] ."</b><br/><br />";
      echo "<div id='assigned_courses'>";
      display_course_result($unassignedRecords, true);
      echo "</div>";
      echo '<br /><hr /><br />';
    }
    else
      echo "<b>All Courses for ". $programmeInfo->programme_name ." HAVE BEEN VERIFIED (assigned a lecturer & timetable) for <b>". $_SESSION['eduerp_verify']['session'] ." Session</b> and <b>Semester ". $_SESSION['eduerp_verify']['semester'] ."</b>!!!</b><br /><br /><br /><hr /><br />";

    //test for unassigned courses for the programme
    $runningCourse = get_programme_running_courses ($programmeInfo->programme_nid, $_SESSION['eduerp_verify']['session'], $_SESSION['eduerp_verify']['semester']);

      echo "<b>List of Courses that need to be run for <b>". $programmeInfo->programme_name  ."</b> Programme for ". $_SESSION['eduerp_verify']['session'] ." Session for Semester ". $_SESSION['eduerp_verify']['semester'] ."</b><br/><br />";
      echo "<div id='assigned_courses'>";
      display_course_result($runningCourse);
      echo "</div><br /><br />";

      unset($_SESSION['eduerp_return_url']);
  return ob_get_clean();
}


/**
 * Recreate all 'program_course_instance' table entries for a Programme in a Session and Semester so that there is an entry for each Course Instance that is running that matches a Course in the Programme
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $session
 * @param int $semester
 */
function verify_assigned_courses($programme_nid, $session, $semester) {
  db_query("DELETE FROM {program_course_instance} WHERE session='%s' AND semester='%s' AND programme_id=%d", $session, $semester, $programme_nid);
   $sql = "INSERT INTO {program_course_instance}
     SELECT DISTINCT
       ci.nid AS course_instance_id,
       pc.programme_id AS programme_id,
       ci.field_sess_name_value AS session,
       ci.field_semester_name_value AS semester
     FROM {program_course} pc
     INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
     INNER JOIN {content_type_course_instance} ci
     ON
       c.nid=ci.field_course_id_nid AND
       pc.semester=ci.field_semester_name_value AND
       ci.field_sess_name_value='%s' AND
       ci.field_semester_name_value='%s'
     WHERE pc.programme_id=%d";
   $result = db_query($sql, $session, $semester, $programme_nid);
}


/**
 * ALAN 20110109 Does not seem to be used, verify and remove
 * @deprecated
 */
function show_verified_assigned_courses(&$result) {
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Course Title</th>
    <th>Course Code</th>
    <th>level</th>
    <th>Credit Load</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>
    <th>Course Semester</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    //$course_type = array('1' => 'Core', 2 => 'Elective');$i++;
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $f->course_title ."</td>
      <td>". $f->course_code ."</td>
      <td>". $f->level ."</td>
      <td>". $f->credit_load ."</td>
      <td>". $f->Prerequisites_codes ."</td>
      <td>". check_markup($f->prerequisites_description, FILTER_FORMAT_DEFAULT, FALSE) ."</td>
      <td>". $f->course_semester ."</td>

   </tr>";
  }
  $html .="
  </table>";
  echo $html;
}


/**
 * Find Courses in a Programme which may or may not ('clean_nid' is NULL) have a Course Instance for a Session and Semester
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $session
 * @param int $semester
 * @return mysqli_result
 */
function get_programme_running_courses ($programme_nid, $session, $semester) {
   $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value department_name,
        co.field_college_name_value faculty_name,
        pc.semester AS semester,
        pc.course_type,
        CONCAT( c.field_coursetitle_value, ' (', field_code_value  ,')') AS course_title,
        pc.credit_load AS credit_load,
        field_creditload_value old_credit_load,
        field_course_description_value course_description,
        field_prerequisite_codes_value prerequisites_codes,
        field_prerequisite_value prerequisites_description,
        pc.program_course_id,
        if(ci.nid IS NULL, NULL, 1) AS clean_nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE pc.semester='%s' AND p.nid=%d
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester, $programme_nid);
  return $result;
}


/**
 * Find Courses in a Programme which may or may not ('clean_nid' is NULL) have a Course Instance for a Session and all Semesters
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $session
 * @return mysqli_result
 */
function get_programme_running_courses_all_semesters($programme_nid, $session) {
   $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value department_name,
        co.field_college_name_value faculty_name,
        pc.semester AS semester,
        pc.course_type,
        CONCAT( c.field_coursetitle_value, ' (', field_code_value  ,')') AS course_title,
        pc.credit_load AS credit_load,
        field_creditload_value old_credit_load,
        field_course_description_value course_description,
        field_prerequisite_codes_value prerequisites_codes,
        field_prerequisite_value prerequisites_description,
        pc.program_course_id,
        if(ci.nid IS NULL, NULL, 1) AS clean_nid
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE p.nid=%d
      ORDER BY pc.level, pc.semester, c.field_code_value";
    $result = db_query($sql, $session, $programme_nid);
  return $result;
}


/**
 * Display Courses in a Programme, highlighting those ('clean_nid' is NULL) that do not have a Course Instance, adding JS which will jump to "Assign Lecturers and Timetables"
 *
 * @param mysqli_result $result
 * @param bool $formissing
 * @global stdClass $programmeInfo
 */
function display_course_result(&$result, $formissing = false) {
  global $programmeInfo;
  $department_nid = $programmeInfo->department_nid;
  $programme_nid = $programmeInfo->programme_nid;

   $delete_assignment_js =<<< EOD
function fix_course(id) {
  if (confirm('Proceed to fixing problem?')) {
    $.get('/staff/ajax/fix_course/$programme_nid/'+id, function(data) { location.href='/staff/createeditcourse/$department_nid'; });
  }
}
EOD;
  drupal_add_js($delete_assignment_js, 'inline');

  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
      <th>Level</th>
      <th>Course Code</th>
      <th>Department</th>";
    if ($formissing)
      $html .= "<th>Action</th>";

  $html .="

    </tr>";$i=1; $found = false;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    //check for course to be highlighted in red
    if ($f->clean_nid == "") {
      $found = true;
      $rowColor = "color='#FF0000'";
    }
    else
      $rowColor = "color='#000000'";

    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td><font $rowColor >". $i++ ."</font></td>
      <td><font $rowColor >". $f->level ."</font></td>
      <td><font $rowColor >". $f->course_code ."</font></td>
      <td><font $rowColor >". $f->department_name ."</font></td>";
      if ($formissing) {
        $html .= "<td><input type='button' class='delete_btn' value='Fix Problem' onClick=\"fix_course({$f->program_course_id});\" /></td>";
      }
      $html .= "
   </tr>";
  }
  $html .="
  </table><br />";
  if ($found)
    $html .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";
  echo $html;
}


/**
 * Form to Add a Course to a Programme (or Update added Course)
 *
 * @uses staff_assign_course_to_programme_form_validate()
 * @uses staff_assign_course_to_programme_form_submit()
 * @uses get_levels_from_programme_level_semester()
 * @uses get_semester_from_programme_level_semester()
 * @uses staff_course()
 * @uses get_Staff_in_Department()
 * @global stdClass $programmeInfo
 * @global stdClass $progCourse
 * @return array Drupal Form
 */
function staff_assign_course_to_programme_form() {
  global $programmeInfo, $progCourse;

  if ($progCourse && ! preg_match("/^[0-9]{1,12}$/", $_POST['level'])) {
    $prog_course = $progCourse;
  }
  $levels = get_levels_from_programme_level_semester($programmeInfo->programme_nid);
  if (empty($levels)) drupal_set_message(Error_Types(122), 'error');

  //we want to put the courses of the department at the top and then others will follow
  //$departmentCourses = staff_course($programmeInfo->department_nid);
  //$nonedepartmentCourses = staff_course($programmeInfo->department_nid, true);
  //merge the two
  //$allcourses = $departmentCourses + $nonedepartmentCourses;

  $form = array(
    '#theme' => 'form_panel_table',
    '#form_panel_table_attributes' => array('border' => 0));
  $form['title_test'] = array(
    '#type' => 'item',
    '#value' => '<b>Course</b>',
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 1);

  $form['programme_id'] = array(
    '#type' => 'select',
    '#options' => array($programmeInfo->programme_nid => $programmeInfo->programme_name), //staff_prg(),
    '#title' => 'Programme',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#required' => TRUE,
    '#form_panel_col' => 1,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['title_test']['#default_value'] = $prog_course->programme_id;

  $form['level'] = array(
    '#type' => 'select',
    '#options' => array('' => '' ) + $levels,
    '#title' => 'Level',
    '#required' => TRUE,
    '#ahah' => array('path' => 'staff/ajax/course', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'courses'),
    '#form_panel_col' => 2,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['level']['#default_value'] = $prog_course->level;
  if (arg(3)) $form['level']['#options'] = array($progCourse->level => $progCourse->level); // If Edit(Update) don't allow Level change

  $form['semester'] = array(
    '#type' => 'select',
    '#title' => 'Semester',
    '#required' => TRUE,
    '#options' => get_semester_from_programme_level_semester($programmeInfo->programme_nid),
    '#form_panel_col' => 3,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['semester']['#default_value'] = $prog_course->semester;
  if (arg(3)) $form['semester']['#options'] = array($progCourse->semester => $progCourse->semester); // If Edit(Update) don't allow Semester change

  $form['course_id'] = array(
    '#type' => 'select',
    '#title' => 'Course Code',
    '#options' => staff_course(),
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='courses'>",
    '#suffix' => "</div>",
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#form_panel_col' => 4,
    '#form_panel_row' => 2);
  if(isset($prog_course)) {$form['course_id']['#default_value'] = $prog_course->course_id; $form['course_id']['#disabled'] = FALSE; }
  if (arg(3)) $form['course_id']['#options'] = array($progCourse->course_id => $form['course_id']['#options'][$progCourse->course_id]); // If Edit(Update) don't allow Course change

  $form['course_type_id'] = array(
    '#type' => 'select',
    '#options' => array( 1 => 'Core', 2 => 'Elective'),
    '#title' => 'Course Type',
    '#required' => TRUE,
    '#form_panel_col' => 5,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['course_type_id']['#default_value'] = $prog_course->course_type;

  $form['credit_load'] = array(
    '#type' => 'textfield',
    '#title' => 'Credit Load',
    '#size' => 3,
    '#form_panel_col' => 6,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['credit_load']['#default_value'] = $prog_course->credit_load;

  $form['user_id'] = array(
    '#type' => 'select',
    '#options' => array('' => '' ) + get_Staff_in_Department(), //lecturer(),
    '#title' => 'Lecturer',
    '#required' => FALSE,
    '#form_panel_col' => 7,
    '#form_panel_row' => 2);
  if(isset($prog_course)) $form['user_id']['#default_value'] = $prog_course->lecturer_id;

  $form['explain'] = array(
    '#type' => 'item',
    '#value' => 'If Credit Load is not specified, it will be taken from the selected Course. Lecturer can be specified later or when Assigning Lecturers and Timetables for Courses for a Semester.',
    '#form_panel_col' => 1,
    '#form_panel_row' => 4);

  if (!empty($levels)) {
    $form['jambsubn'] = array(
      '#id' => 'edit-next',
      '#value' => 'Add',
      '#type' => 'submit',
      '#form_panel_col' => 1,
      '#form_panel_row' => 5);
    if(arg(3)) $form['jambsubn']['#value'] = "Update";;
  }
  $form['sep'] = array(
    '#type' => 'item',
    '#value' => '',
    '#form_panel_col' => 1,
    '#form_panel_row' => 6);

  return $form;
}


/**
 * validate hook for {@link staff_assign_course_to_programme_form()}
 */
function staff_assign_course_to_programme_form_validate($form, &$form_state) {
 $values = $form_state['values'];

  if (empty($values['level']))
   form_set_error('level', Error_Types(114));

  if (empty($values['semester']))
   form_set_error('semester', Error_Types(114));

  //make sure the course does not exists for the same program/level/semester
  if (arg(3)) {
    $rs = db_query("SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s' AND program_course_id !=%d ", $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], arg(3) );
    if (db_affected_rows($rs) > 0)
      form_set_error('course_id', Error_Types(123));
  }
  else {
    $rs = db_query("SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s'", $values['course_id'], $values['programme_id'], $values['level'], $values['semester'] );
    if (db_affected_rows($rs) > 0)
      form_set_error('course_id', Error_Types(123));
  }
 //return true;
}


/**
 * submit hook for {@link staff_assign_course_to_programme_form()}
 */
function staff_assign_course_to_programme_form_submit($form, &$state) {
  $values = $state['values'];

  if (empty($values['credit_load']) || !preg_match("/^[0-9]{1,3}$/", $values['credit_load'])) {
    $sql = "SELECT field_creditload_value FROM {content_type_course} WHERE nid=%d";
    $rows = db_query($sql, $values['course_id']);
    $row = db_fetch_object($rows);
    if (!($values['credit_load'] === '0' || $values['credit_load'] === 0)) { // Allow a zero credit load if explicitly entered
      $values['credit_load'] = $row->field_creditload_value;
    }
  }

  $query = "SELECT program_course_id FROM {program_course} WHERE course_id=%d AND programme_id=%d AND level='%s' AND semester='%s'";
  $result = db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester']);

  if ($row = db_fetch_object($result)) {
    $query = "UPDATE {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, credit_load=%d, lecturer_id=%d, historical=0
      WHERE program_course_id=%d";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], $values['course_type_id'], $values['credit_load'], $values['user_id'], $row->program_course_id);
  }
  else {
    $query = "INSERT INTO {program_course}
      SET course_id=%d, programme_id=%d, level='%s', semester='%s', course_type=%d, credit_load=%d, lecturer_id=%d, historical=0";
    db_query($query, $values['course_id'], $values['programme_id'], $values['level'], $values['semester'], $values['course_type_id'], $values['credit_load'], $values['user_id']);
  }

  if (arg(3))
    drupal_set_message("Course was Updated");
  else
    drupal_set_message("Course Added to Programme");

  if (arg(3)) drupal_goto("staff/specifycourse/". arg(2));
}


/**
 * Find Levels for a Programme
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @return array of Level => Level
 */
function get_levels_from_programme_level_semester($programme_nid) {
  $return = array();
  $result = db_query("SELECT DISTINCT(level) level, programme_id FROM {program_level_semester} WHERE programme_id=%d ORDER BY level", $programme_nid);
  if (db_affected_rows($result) > 0){
    while ($row = db_fetch_object($result))
      $return[$row->level] = $row->level;
  }

  return $return;
}


/**
 * Find Semesters for a Programme
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @return array of Semester => Semester
 */
function get_semester_from_programme_level_semester($programme_nid) {
  $result = db_query("SELECT DISTINCT(semester) semester, programme_id FROM {program_level_semester} WHERE programme_id=%d ORDER BY semester", $programme_nid);
  if (db_affected_rows($result) > 0){
    while ($row = db_fetch_object($result)) {
      $return[$row->semester] = $row->semester;
    }
  }
  else
   $return[] = strip_tags(Error_Types(106));

  return $return;
}


/**
 * Form to start Specifying Courses for A Programme
 *
 * @uses staff_specify_course_proceed_form_submit()
 * @uses programme()
 * @return array Drupal Form
 */
function staff_specify_course_proceed_form() {
  $form['#title'] = 'Start Specifying Courses';

  $form['sprogramme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');
  $form['showCourseAssignment'] = array(
       '#type' => 'hidden',
       '#default_value' => 1
   );
  $form['submit'] = array(
    '#value' => 'Start Specifying Course(s)',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * submit hook for {@link staff_specify_course_proceed_form()}
 */
function staff_specify_course_proceed_form_submit($form, &$form_state) {
  drupal_goto("staff/specifycourse/" . $form_state['values']['sprogramme_nid']);
}


/**
 * Form to start verifying all Courses needed for a Programme are being run for a Session and Semester
 *
 * @uses staff_verify_course_proceed_form_submit()
 * @uses get_all_sessions()
 * @uses programme()
 * @return array Drupal Form
 */
function staff_verify_course_proceed_form() {
  $form['#title'] = 'Start Verifying Courses';

  $form['session'] = array(
      '#type' => 'select',
      '#options' => get_all_sessions(),
      '#title' => 'Session');

  $form['vprogramme_nid'] = array(
      '#type' => 'select',
      '#options' => programme(),
      '#title' => 'Programme Name');

  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Semester');

  $form['showCourseAssignment'] = array(
       '#type' => 'hidden',
       '#default_value' => 1
   );
  $form['submit'] = array(
    '#value' => 'Start Verifying Course(s)',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * submit hook for {@link staff_verify_course_proceed_form()}
 *
 * @global array $_SESSION['eduerp_verify']
 */
function staff_verify_course_proceed_form_submit($form, &$form_state) {
  $_SESSION['eduerp_verify']['semester'] = $form_state['values']['semester'];
  $_SESSION['eduerp_verify']['session'] = $form_state['values']['session'];
  drupal_goto("staff/verifycourse/" . $form_state['values']['vprogramme_nid']);
}


/**
 * Display Courses for a Programme, highlighting those ('clean_nid' is NULL) that do not have a Course Instance, adding JS which will allow the Course to be Removed from the Programme (made "Historical") or have its assignment Edited
 *
 * @param mysqli_result $r
 * @global $canCreateModify
 */
function course_specify_list(&$r) {
  global $canCreateModify;

  if (db_affected_rows($r) <= 0) {
    echo  strip_tags(Error_Types(106));
    return;
  }
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Level</th>
    <th>Semester</th>
    <th>Course</th>
    <th>Course Type</th>
    <th>Credit Load</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>";
    if ($canCreateModify)
      $html .= "
    <th colspan=2 align='center'>Actions</th>";
    $html .= "
    </tr>";$i=1; $found = false;
  while ($f = db_fetch_object($r)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    $course_type = array('1' => 'Core', 2 => 'Elective');
    if ($f->clean_nid == "") { //found a course without a lectrer
      $found = true;
      $fcolor = "color='#FF0000'";
    }
    else
      $fcolor = '#000000';
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td><font $fcolor>". $i++ ."</font></td>
      <td><font $fcolor>". $f->level ."</font></td>
      <td><font $fcolor>". $f->semester ."</font></td>
      <td><font $fcolor>". $f->course_title ."</font></td>
      <td><font $fcolor>". $course_type[$f->course_type] ."</font></td>
      <td><font $fcolor>". $f->credit_load ."</font></td>
      <td><font $fcolor>". $f->prerequisites_codes ."</font></td>
      <td><font $fcolor>". check_markup($f->prerequisites_description, FILTER_FORMAT_DEFAULT, FALSE) ."</font></td>";
    if ($canCreateModify)
      $html .= "
      <td><input type='button' class='delete_btn' value='Delete' onClick=\"delete_assignment($f->program_course_id);\" /></td>
      <td><input type='button' class='delete_btn' value='Edit' onClick=\"edit_assignment($f->program_course_id);\" /></td>
   </tr>";

  }
  $html .= "
  </table><br /></br>";
  if ($found)
    $html .= "<b><font color='#ff0000'>Note: The HODs for the course(s) highlighted in Red above will have to assign a lecturer for the course(s) for this semester<br />
       If you are the HOD for those courses, you will be able to fix the problem yourself.<br />In any case, when the problem is resolved, you MUST come back to this screen to complete verification!</font></b>";

  echo $html;
}


/**
 * Display "Historical" Courses for a Programme, adding JS which will allow the Course to be Added back to the Programme (no longer "Historical")
 *
 * <p>Note: Historical Courses not available for new Course Registrations, but do continue to allow grades and credit load to be counted for students that passed the course in the past.</p>
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @global $canCreateModify
 */
function historical_course_list($programme_nid) {
  global $user_profile, $canCreateModify;

  $query = "
    SELECT courses.*, CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS staff_name
    FROM
      (SELECT
        pc.program_course_id,
        pc.course_type,
        pc.level AS level_name,
        pc.semester AS semester,
        pc.lecturer_id AS uid,
        p.field_programme_name_value AS programme_name,
        CONCAT( c.field_coursetitle_value, ' (', field_code_value  ,')') AS course_title,
        pc.credit_load AS credit_load,
        field_creditload_value old_credit_load,
        field_course_description_value course_description,
        field_prerequisite_codes_value prerequisites_codes,
        field_prerequisite_value prerequisites_description
      FROM {program_course} pc, {content_type_program} p, {content_type_course} c
      WHERE pc.programme_id=p.nid AND pc.course_id=c.nid AND p.nid=%d AND pc.historical=1
      ) AS courses
    LEFT JOIN {node} npro ON courses.uid=npro.uid AND npro.type='profile'
    LEFT JOIN {content_type_profile} pro ON npro.vid=pro.vid
    ORDER BY level_name, semester";
  $r = db_query($query, $programme_nid);
  if (db_affected_rows($r) <= 0) {
    drupal_set_message(Error_Types(106), 'error');
    return;
  }
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>";
    if ($canCreateModify)
      $html .= "
    <th>Actions</th>";
    $html .= "
    <th>Level</th><th>Semester</th>
    <th>Course</th>
    <th>Course Type</th>
    <th>Credit Load</th>
    <th>Lecturer</th>
    <th>Prerequisites Codes</th>
    <th>Prerequisites Description</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($r)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    $course_type = array('1' => 'Core', 2 => 'Elective');
    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>";
    if ($canCreateModify)
      $html .= "
      <td><input type='button' class='delete_btn' value='Make Available' onClick=\"make_available($f->program_course_id);\" /></td>";
      $html .= "
      <td>". $f->level_name ."</td>
      <td>". $f->semester ."</td>
      <td>". $f->course_title ."</td>
      <td>". $course_type[$f->course_type] ."</td>
      <td>". $f->credit_load ."</td>
      <td>". $f->staff_name ."</td>
      <td>". $f->prerequisites_codes ."</td>
      <td>". check_markup($f->prerequisites_description, FILTER_FORMAT_DEFAULT, FALSE) ."</td>
   </tr>";

  }
  $html .= "
  </table>";
  echo  $html;
}


/**
 * Handles 'staff/studentprogress' menu to Display Student Progress towards Graduation
 *
 * @uses course_levels()
 * @uses get_all_sessions()
 * @uses get_programmes()
 * @uses staff_has_eduerp_role()
 * @uses show_progress_qualification_form()
 * @uses get_progress_qualification_details()
 * @global array $eduerp_levels
 * @global array $eduerp_sessions
 * @global array $eduerp_programmes
 * @global string $eduerp_programmeName
 * @global string $_SESSION['eduerp_return_msg']
 * @global string $_SESSION['eduerp_qualification']
 * @return string HTML
 */
function staff_student_progress_qualification() {
  global $eduerp_levels, $eduerp_sessions, $eduerp_programmes, $eduerp_programmeName, $user;
  ob_start();
  if($_SESSION['eduerp_return_msg']) drupal_set_message($_SESSION['eduerp_return_msg']);

  $eduerp_levels = course_levels();
  $eduerp_sessions = get_all_sessions();
  $eduerp_programmes = programme();
  $eduerp_programmes_for_name = get_programmes(0, true);

  $str = "
  <br /><hr /><br />

  <font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Student Progress towards Graduation</b></font><br /><br />
  <br /><hr /><br />";

  $str .= "<b>Student Progress Towards Graduation</b> - Please fill the form as appropriate<br /><br />";
  $str .= drupal_get_form('show_progress_qualification_form');

  if (isset($_SESSION['eduerp_qualification'])) {
    //get faculty and department info of the programme
    $progInfo = db_fetch_object(get_programmes($_SESSION['eduerp_qualification']['programme_nid']));

    if (staff_has_eduerp_role($user->uid, 0, 0, array('University Examination Viewer', 'University Grade Editor', 'Registrar', 'Vice-Chancellor')) ||
      staff_has_eduerp_role($user->uid, $progInfo->department_nid, 0, array('Department Examination Officer', 'Department Grade Editor', 'Head of Department')) ||
      staff_has_eduerp_role($user->uid, 0, $progInfo->faculty_nid, array('Faculty Examination Officer', 'Faculty Grade Editor', 'Dean of Faculty'))) {

      $eduerp_programmeName = $eduerp_programmes_for_name[$_SESSION['eduerp_qualification']['programme_nid']];

      $str .= "<br /><hr /><br />
      Students' Progress Towards Graduation for <b>Session: ". $eduerp_sessions[$_SESSION['eduerp_qualification']['session']] ."</b> |  <b>Programme: ". $eduerp_programmeName ."</b>  |  <b>Student current level: ". $eduerp_levels[$_SESSION['eduerp_qualification']['level']] ."</b>
      <br /><br />
      <div id='assigned_courses'>";
      $str .= get_progress_qualification_details();
      $str .= "
      </div>";
    }
    else {
     drupal_set_message(Error_Types(127), 'error');
    }
  }

  echo $str;

  unset($_SESSION['eduerp_return_msg']);
  return ob_get_clean();
}


/**
 * Form to Select Session/Programme/Level in order to Display Student Progress towards Graduation
 *
 * @uses show_progress_qualification_form_submit()
 * @global array $eduerp_levels
 * @global array $eduerp_sessions
 * @global array $eduerp_programmes
 * @return array Drupal Form
 */
function show_progress_qualification_form() {
  global $eduerp_levels, $eduerp_sessions, $eduerp_programmes;
  $form['#title'] = 'Create New Programme';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => $eduerp_sessions,
    '#required' => TRUE,
    '#title' => 'Session');
  if ($_SESSION['eduerp_qualification']) $form['session']['#default_value'] = $_SESSION['eduerp_qualification']['session'];

  $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => $eduerp_programmes,
    '#required' => TRUE,
    '#title' => 'Programme Name');
  if ($_SESSION['eduerp_qualification']) $form['programme_nid']['#default_value'] = $_SESSION['eduerp_qualification']['programme_nid'];

  $form['level'] = array(
    '#type' => 'select',
    '#options' => $eduerp_levels,
    '#required' => TRUE,
    '#title' => 'Level');
  if ($_SESSION['eduerp_qualification']) $form['level']['#default_value'] = $_SESSION['eduerp_qualification']['level'];

  $form['submit'] = array(
      '#value' => 'Get Report',
      '#type' => 'submit'
    );
  return $form;
}


function show_progress_qualification_form_validate($form, &$form_state) {
  ;
}


/**
 * submit hook for {@link show_progress_qualification_form()}
 *
 * @global array $_SESSION['eduerp_qualification']
 */
function show_progress_qualification_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $_SESSION['eduerp_qualification']['session'] = $values['session'];
  $_SESSION['eduerp_qualification']['programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_qualification']['level'] = $values['level'];
}


/**
 * Return HTML for Student Progress towards Graduation for a Session/Programme/Level; ALAN 20120419 Does not seem to be used, verify and remove
 *
 * @deprecated
 * @param mysqli_result
 * @return string HTML
 */
function display_progress_towards_qualification(&$result) {
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
    <th>Student Name</th>

    <th>Credit Load Completed</th>
    <th>Session</th>
    <th>Semester</th>
    <th>Level</th>
    <th>GPA</th>

    <th>C. Credit Load Completed</th>
    <th>Elapsed Year</th>
    <th>Duration</th>

    <th>Programme Min. Credit</th>
    <th>Programme Max. Duration</th>
    <th>Mode of Entry</th>

    <th>CGPA</th>
    </tr>";$i=1;
  //while ($f = db_fetch_object($result)) {
  foreach ($result as $v) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";

    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $v['student_name'] ."</td>

      <td>". $v['field_credit_load_completed_value'] ."</td>
      <td>". $v['field_sess_name_gpa_value'] ."</td>
      <td>". $v['field_semester_name_gpa_value'] ."</td>
      <td>". $v['field_level_name_gpa_value'] ."</td>
      <td>". $v['field_gpa_value'] ."</td>

      <td>". $v['field_credit_load_completed_sp_value'] ."</td>
      <td>". $v['elapsed_years'] ."</td>
      <td>". $v['field_duration_value'] ."</td>

      <td>". $v['field_min_credit_load_program_value'] ."</td>
      <td>". $v['field_max_duration_value'] ."</td>
      <td>". $v['field_profile_mode_of_entry_value'] ."</td>

      <td>". $v['field_cgpa_sp_value'] ."</td>
   </tr>";
  }
  $html .= "
  </table>";
  return  $html;
}


/**
 * Return HTML for Student Progress towards Graduation for a Session/Programme/Level
 *
 * @uses get_students_CGPA()
 * @uses get_students_GPA()
 * @uses get_cumulative_list_of_failed_courses()
 * @uses staff_student_action_form()
 * @global int $eduerp_uid
 * @global string $eduerp_programmeName
 * @global int $eduerp_programme_nid
 * @global string $eduerp_studentName
 * @global array $_SESSION['eduerp_qualification']
 * @return string HTML
 */
function  get_progress_qualification_details() {
  global $eduerp_uid, $eduerp_programmeName, $eduerp_programme_nid, $eduerp_studentName;

  $eduerp_programme_nid = $_SESSION['eduerp_qualification']['programme_nid'];
  $session = $_SESSION['eduerp_qualification']['session'];
  $level = $_SESSION['eduerp_qualification']['level'];

  //arrange the CGPA
  $cgpa = get_students_CGPA($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($cgpa) > 0) {
    $cgpa_arr = array("field_cgpa_sp_value", "field_credit_load_completed_sp_value", "field_min_credit_load_program_value", "elapsed_years",
        "field_duration_value","field_max_duration_value", "field_profile_mode_of_entry_value", "student_name", "uid", "mat");
    while ($f = db_fetch_object($cgpa)) {
      foreach ($cgpa_arr as $v)
        $cGPA[$f->uid][$v] = $f->{$v};
    }
  }

  //arrange the GPA
  $gpa = get_students_GPA($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($gpa) > 0) {
    $gpa_arr = array("field_gpa_value", "field_credit_load_completed_value", "field_sess_name_gpa_value", "field_semester_name_gpa_value", "field_level_name_gpa_value", "uid");
    while ($f = db_fetch_object($gpa)) {
      foreach ($gpa_arr as $v)
        $GPA[$f->uid][$f->field_sess_name_gpa_value][$f->field_semester_name_gpa_value][$v] = $f->{$v};
    }
  }

  $failed_courses = get_cumulative_list_of_failed_courses($session, $eduerp_programme_nid, $level);
  if (db_affected_rows($failed_courses) > 0) {
    $failed_arr = array("failedlist");
    while ($f = db_fetch_object($failed_courses)) {
      foreach ($failed_arr as $v)
        $failed[$f->uid] = $f->{$v};
    }
  }

  //build the table
  //note i am using cGPA as the root iterator because cGPA must exist for all students
  $html = "";
  if(isset($cGPA) && is_array($cGPA)) {
  $html = "
  <table border=1>";$i=1;
  foreach($cGPA as $k=> $v){
    if (!isset($GPA[$k])) continue; // If no GPA for Student they have not have proceeded to pay and register courses

    //build cGPA
    $html .= "
    <tr>
      <th>#</th>
      <th>Name</th>
      <th>cGPA</th>
      <th>Total Credit Units Taken</th>
      <th>Total Units Required</th>
      <th>Years since Student Start</th>
      <th>Programme Duration</th>
      <th>Maximum Semesters allowed</th>
      <th>Mode of Entry</th>
   </tr>
   <tr>
            <td>". $i++ ."</td>
            <td>". $v['student_name'] . "<br />(" . $v['mat'] . ")</td>
            <td>". $v['field_cgpa_sp_value'] ."</td>
            <td>". $v['field_credit_load_completed_sp_value'] ."</td>
            <td>". $v['field_min_credit_load_program_value'] ."</td>
            <td>". $v['elapsed_years'] ."</td>
            <td>". $v['field_duration_value'] ."</td>
            <td>". $v['field_max_duration_value'] ."</td>
            <td>". $v['field_profile_mode_of_entry_value'] ."</td>
     </tr>";
    if (isset($failed[$k])) {
      //now build failed courses
      $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>Failed Course(s)</th>
            </tr>
            <tr>
              <td>". $failed[$k] ."</td>
            </tr>
          </table>
        </td>
      </tr>";
    }
    //now build GPA
    if(isset($GPA[$k])) {
    $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>GPA</th>
            <th>Credit Units Taken</th>
            <th>Session</th>
            <th>Semester</th>
            <th>Level</th>
          </tr>";
          $GPA_details = array_slice($GPA, 2);

          foreach($GPA[$k] as $p) {
                $b = array_keys($p);
                foreach($b as $t){
          $html .= "
            <tr>
              <td>". $p[$t]['field_gpa_value'] ."</td>
              <td>". $p[$t]['field_credit_load_completed_value'] ."</td>
              <td>". $p[$t]['field_sess_name_gpa_value'] ."</td>
              <td>". $p[$t]['field_semester_name_gpa_value'] ."</td>
              <td>". $p[$t]['field_level_name_gpa_value'] ."</td>
            </tr>";
                  }
            }
            $html .="
          </table>
        </td>
      </tr>";
    }
    //link to student grade view
    $html .= "
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>
          <table border=1>
            <tr>
              <th>Student Grade View</th>
              <th>Student Record View</th>
            </tr>
            <tr>
              <td><a href=" . '"' . $base_url . '/studentgradedetails?uid=' . rawurlencode($v['mat']) . '"' . ">View Student Grade Details</a></td>
              <td><a href=" . '"' . $base_url . '/studentrecords?uid=' . rawurlencode($v['mat']) . '"' . ">View Student Record</a></td>
          </table>
        </td>
      </tr>";
      //now append the form here
      $html .="
      <tr>
        <td colspan=2>&nbsp;</td>
        <td colspan=7>";
          $eduerp_uid = $v['uid'];
          $eduerp_studentName = $v['student_name'];
          $html .= drupal_get_form('staff_student_action_form');
          $str .="
        </td>
      </tr>
      ";
  }
  $html .= "
  </table>";
  }
  else{
   drupal_set_message(Error_Types(106), 'error');
  }
  return $html;
}


/**
 * Find cGPA etc. for Students in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_students_CGPA($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
        sp.field_student_ref_sp_uid AS uid,
        u.name AS mat,
        sp.field_cgpa_sp_value,
        sp.field_credit_load_completed_sp_value,
        p.field_min_credit_load_program_value,
        SUBSTRING(spro.field_profile_reg_session_value, 1, 4) - spro.field_profile_yearofentry_value + 1 AS elapsed_years,
        p.field_duration_value,
        p.field_max_duration_value,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key,
        spro.field_profile_mode_of_entry_value
      FROM {content_type_student_program} sp
      INNER JOIN {node} npro ON sp.field_student_ref_sp_uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
      INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
      INNER JOIN {content_type_program} p
      INNER JOIN {users} u ON sp.field_student_ref_sp_uid=u.uid
      WHERE
        sp.field_student_ref_sp_uid IN ($ids) AND
        sp.field_program_ref_sp_nid=spro.field_profile_first_choice_nid AND
        sp.field_program_ref_sp_nid=p.nid
      ORDER BY student_name";
  $result = db_query($sql, $programme_nid, $session, $level);
  return $result;
}


/**
 * Find GPAs etc. for Students in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_students_GPA($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
        gpa.field_student_ref_gpa_uid AS uid,
        gpa.field_gpa_value,
        gpa.field_credit_load_completed_value,
        gpa.field_sess_name_gpa_value,
        gpa.field_semester_name_gpa_value,
        gpa.field_level_name_gpa_value,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key
      FROM {content_type_student_gpa} gpa
      INNER JOIN {node} npro ON gpa.field_student_ref_gpa_uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
      INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
      WHERE
        gpa.field_student_ref_gpa_uid IN ($ids) AND
        gpa.field_program_ref_gpa_nid=spro.field_profile_first_choice_nid
      ORDER BY student_name, gpa.field_level_name_gpa_value, gpa.field_sess_name_gpa_value, gpa.field_semester_name_gpa_value";
    $result = db_query($sql, $programme_nid, $session, $level);
  return $result;
}


/**
 * Return list of Drupal User ids for each Student in Session/Programme/Level
 *
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return string of comma separated Drupal User IDs (or '-1')
 */
function get_id_list_for_students_in_programme($session, $programme_nid, $level) {
  $sql = "
    SELECT GROUP_CONCAT(nspro.uid) AS ids
    FROM {node} nspro
    INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
    WHERE nspro.type='student_profile' AND spro.field_profile_first_choice_nid='%s' AND spro.field_profile_reg_session_value='%s' AND spro.field_profile_level_name_value='%s'";
  $result = db_query($sql, $programme_nid, $session, $level);
  if ($row = db_fetch_object($result)) {
    if (!empty($row->ids)) {
      $ids = $row->ids;
    }
    else {
      $ids = '-1';
    }
  }
  else {
    $ids = '-1';
  }
  return $ids;
}


/**
 * Find any Failed (and not since passed) Courses for each Student in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_cumulative_list_of_failed_courses($session, $programme_nid, $level) {
  // failedcourses sub-query below borrows from similar query in student.module & course_grades_footer.inc

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
        failedcourses.uid,
        failedcourses.failedlist,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key
      FROM
        (
          SELECT
            exams.field_mat_no_uid AS uid,
            GROUP_CONCAT(exams.field_code_value SEPARATOR ', ') AS failedlist
          FROM (
            SELECT DISTINCT
              IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value) AS gradepoint,
              sg.field_mat_no_uid,
              CONCAT(ci.field_sess_name_value, ci.field_semester_name_value, sg.nid) AS sess_sem,
              c.field_code_value
            FROM
              {content_type_student_grades} sg,
              {content_type_course_instance} ci,
              {content_type_course} c,
              {program_course} pc,
              {node} nspro,
              {content_type_student_profile} spro
            WHERE
              sg.field_mat_no_uid IN ($ids) AND
              sg.field_course_instance_nid=ci.nid AND
              sg.field_examscorelocked_value>0 AND
              sg.field_dropped_value=0 AND
              ci.field_course_id_nid=c.nid AND
              ci.field_course_id_nid=pc.course_id AND
              pc.programme_id=spro.field_profile_first_choice_nid AND
              nspro.uid=sg.field_mat_no_uid AND
              nspro.type='student_profile' AND
              nspro.vid=spro.vid
            ) AS exams
          JOIN (
            SELECT
              sg0.field_mat_no_uid,
              MAX(CONCAT(ci0.field_sess_name_value, ci0.field_semester_name_value, sg0.nid)) AS sess_sem0,
              c0.field_code_value
            FROM
              {content_type_student_grades} sg0,
              {content_type_course_instance} ci0,
              {content_type_course} c0,
              {program_course} pc0,
              {node} nspro0,
              {content_type_student_profile} spro0
            WHERE
              sg0.field_mat_no_uid IN ($ids) AND
              sg0.field_course_instance_nid=ci0.nid AND
              sg0.field_examscorelocked_value>0 AND
              sg0.field_dropped_value=0 AND
              ci0.field_course_id_nid=c0.nid AND
              ci0.field_course_id_nid=pc0.course_id AND
              pc0.programme_id=spro0.field_profile_first_choice_nid AND
              nspro0.uid=sg0.field_mat_no_uid AND
              nspro0.type='student_profile' AND
              nspro0.vid=spro0.vid
            GROUP BY c0.field_code_value, sg0.field_mat_no_uid
            ) AS most_recent_exam
          ON
            exams.field_code_value=most_recent_exam.field_code_value AND
            exams.sess_sem=most_recent_exam.sess_sem0 AND
            exams.field_mat_no_uid=most_recent_exam.field_mat_no_uid AND
            exams.gradepoint=0
          GROUP BY exams.field_mat_no_uid
          ORDER BY exams.field_code_value
        ) AS failedcourses
      INNER JOIN {node} npro ON failedcourses.uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      ORDER BY student_name";
  $result = db_query($sql);
  return $result;
}


/**
 * Handles 'staff/gradesreport' menu to Display Grades Report for a Programme (cGPAs this & previous session and courses this session)
 *
 * @uses course_levels()
 * @uses get_all_sessions()
 * @uses get_programmes()
 * @uses staff_has_eduerp_role()
 * @uses show_gradesreport_form()
 * @uses get_gradesreport_details()
 * @global array $eduerp_gradesreport_levels
 * @global array $eduerp_gradesreport_sessions
 * @global array $eduerp_gradesreport_programmes
 * @global string $_SESSION['eduerp_gradesreport']
 * @return string HTML
 */
function staff_gradesreport() {
  global $eduerp_gradesreport_levels, $eduerp_gradesreport_sessions, $eduerp_gradesreport_programmes, $user;
  ob_start();

  $eduerp_gradesreport_levels = course_levels();
  $eduerp_gradesreport_sessions = get_all_sessions();
  $eduerp_gradesreport_programmes = programme();
  //$str = "<hr /><font size = '1px'><a href = '". url('staff/semester') ."'>" . t('Semester Administration') . "</a>&nbsp; &raquo; &nbsp;" . t('Grades Report') . "</b></font><br /><hr /><br />";
  $str = ''; // Avoid extra decoration on report

  $str .= '<b><h2>';
  $str .= variable_get('eduerp_institution_current', '') . '</h2>';
  $str .= t('Grades Report for Senate Standing Committee on Examinations') . "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . format_date(time()) . '<br /><br />';

  if (isset($_SESSION['eduerp_gradesreport'])) {
    //get faculty and department info of the programme
    $progInfo = db_fetch_object(get_programmes($_SESSION['eduerp_gradesreport']['programme_nid']));
    $str .=  t('Faculty') . ": $progInfo->faculty_name<br />";
    $str .=  t('Department') . ": $progInfo->department_name";
  }
  $str .= '</b>';

  $str .= drupal_get_form('show_gradesreport_form');

  if (isset($_SESSION['eduerp_gradesreport'])) {
    if (staff_has_eduerp_role($user->uid, 0, 0, array('University Examination Viewer', 'University Grade Editor', 'Registrar', 'Vice-Chancellor')) ||
      staff_has_eduerp_role($user->uid, $progInfo->department_nid, 0, array('Department Examination Officer', 'Department Grade Editor', 'Head of Department')) ||
      staff_has_eduerp_role($user->uid, 0, $progInfo->faculty_nid, array('Faculty Examination Officer', 'Faculty Grade Editor', 'Dean of Faculty'))) {

      $str .= "<br /><div id='assigned_courses'>";

      $str .= get_gradesreport_details();

      $str .= '</div>';
    }
    else {
      drupal_set_message(Error_Types(127), 'error');
    }
  }
  echo $str;

  return ob_get_clean();
}


/**
 * Form to Select Session/Programme/Level in order to Display Student Progress towards Graduation
 *
 * @uses show_gradesreport_form_submit()
 * @global array $eduerp_gradesreport_levels
 * @global array $eduerp_gradesreport_sessions
 * @global array $eduerp_gradesreport_programmes
 * @return array Drupal Form
 */
function show_gradesreport_form() {
  global $eduerp_gradesreport_levels, $eduerp_gradesreport_sessions, $eduerp_gradesreport_programmes;
  $form['#title'] = t('Grades Report');

  $form['session'] = array(
    '#type' => 'select',
    '#options' => $eduerp_gradesreport_sessions,
    '#required' => TRUE,
    '#title' => t('Session'));
  if ($_SESSION['eduerp_gradesreport']) $form['session']['#default_value'] = $_SESSION['eduerp_gradesreport']['session'];

  $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => $eduerp_gradesreport_programmes,
    '#required' => TRUE,
    '#title' => t('Programme Name'));
  if ($_SESSION['eduerp_gradesreport']) $form['programme_nid']['#default_value'] = $_SESSION['eduerp_gradesreport']['programme_nid'];

  $form['level'] = array(
    '#type' => 'select',
    '#options' => $eduerp_gradesreport_levels,
    '#required' => TRUE,
    '#title' => t('Level'));
  if ($_SESSION['eduerp_gradesreport']) $form['level']['#default_value'] = $_SESSION['eduerp_gradesreport']['level'];

  $form['submit'] = array(
      '#value' => t('Get Report'),
      '#type' => 'submit'
    );
  return $form;
}


function show_gradesreport_form_validate($form, &$form_state) {
  ;
}


/**
 * submit hook for {@link show_gradesreport_form()}
 *
 * @global array $_SESSION['eduerp_gradesreport']
 */
function show_gradesreport_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $_SESSION['eduerp_gradesreport']['session'] = $values['session'];
  $_SESSION['eduerp_gradesreport']['programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_gradesreport']['level'] = $values['level'];
}


/**
 * Return HTML for Grade Report for a Session/Programme/Level
 *
 * @uses get_report_CGPA()
 * @uses get_report_previous_CGPA()
 * @uses get_report_current_gradepoints()
 * @uses get_report_current_courses()
 * @uses get_report_current_courses_grades_not_submitted()
 * @uses get_cumulative_list_of_failed_courses()
 * @global int $eduerp_gradesreport_programme_nid
 * @global array $_SESSION['eduerp_gradesreport']
 * @return string HTML
 */
function get_gradesreport_details() {
  global $eduerp_gradesreport_programme_nid;

  $eduerp_gradesreport_programme_nid = $_SESSION['eduerp_gradesreport']['programme_nid'];
  $session = $_SESSION['eduerp_gradesreport']['session'];
  $level = $_SESSION['eduerp_gradesreport']['level'];

  $display_items = array();

  $cgpa = get_report_CGPA($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($cgpa)) {
    $display_items[$f->uid]['mat'] = $f->mat;
    $display_items[$f->uid]['student_name'] = $f->student_name;
    $display_items[$f->uid]['field_credit_load_completed_sp_value'] = $f->field_credit_load_completed_sp_value;
    $display_items[$f->uid]['field_gptotal_sp_value'] = $f->field_gptotal_sp_value;
    $display_items[$f->uid]['field_cgpa_sp_value'] = $f->field_cgpa_sp_value;
  }

  $last_cgpa = get_report_previous_CGPA($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($last_cgpa)) {
    $display_items[$f->uid]['last_cgpa'] = $f->cgpa;
  }

  $gp = get_report_current_gradepoints($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($gp)) {
    $display_items[$f->uid]['credit_load_completed'] = $f->credit_load_completed;
    $display_items[$f->uid]['gptotal'] = $f->gptotal;
    $display_items[$f->uid]['verify_exists'] = $f->uid;
  }

  $courses = get_report_current_courses($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($courses)) {
    $display_items[$f->uid]['courses'] = $f->courses;
  }

  $courses_not_submitted = get_report_current_courses_grades_not_submitted($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($courses_not_submitted)) {
    $display_items[$f->uid]['courses_not_submitted'] = $f->courses_not_submitted;
  }

  $failed_courses = get_cumulative_list_of_failed_courses($session, $eduerp_gradesreport_programme_nid, $level);
  while ($f = db_fetch_object($failed_courses)) {
    if (empty($f->failedlist)) $display_items[$f->uid]['failedlist'] = '';
    else $display_items[$f->uid]['failedlist'] = t('Failed') . ': ' . $f->failedlist;
  }

  $html = '';
  if(!empty($display_items)) {
    $html .= '
      <table border=1>
        <tr>
          <th>#</th>
          <th>' . t('Adm. No.') . '</th>
          <th>' . t('Name') . '</th>
          <th>' . t('Courses') . '</th>
          <th>' . t('Units TS') . '</th>
          <th>' . t('Units TD') . '</th>
          <th>' . t('GP TS') . '</th>
          <th>' . t('GP TD') . '</th>
          <th>' . t('cGPA LS') . '</th>
          <th>' . t('cGPA TD') . '</th>
          <th>' . t('Remarks') . '</th>
       </tr>';

    $i = 1;
    foreach($display_items as $display_item) {
      if (empty($display_item['verify_exists'])) continue; // If no GPA for Student they have not have proceeded to pay and register courses

      $html .= '<tr>';
      $html .= '<td>' . $i++ . '</td>';
      $html .= '<td>' . $display_item['mat'] . '</td>';
      $html .= '<td>' . $display_item['student_name'] . '</td>';
      $html .= '<td>' . $display_item['courses'] . '</td>';
      $html .= '<td>' . $display_item['credit_load_completed'] . '</td>';
      $html .= '<td>' . $display_item['field_credit_load_completed_sp_value'] . '</td>';
      $html .= '<td>' . $display_item['gptotal'] . '</td>';
      $html .= '<td>' . $display_item['field_gptotal_sp_value'] . '</td>';
      $html .= '<td>' . $display_item['last_cgpa'] . '</td>';
      $html .= '<td>' . $display_item['field_cgpa_sp_value'] . '</td>';
      $not_submitted = '';
      if (!empty($display_item['courses_not_submitted'])) {
        if (!empty($display_item['failedlist'])) $not_submitted = '<br />';
        $not_submitted .= t('Not Submitted by Lecturer') . ': ' . $display_item['courses_not_submitted'];
      }
      $html .= '<td>' . $display_item['failedlist'] . $not_submitted . '</td>';
      $html .= '</tr>';
    }
    $html .= '</table>';
  }
  else {
    drupal_set_message(Error_Types(106), 'error');
  }
  return $html;
}


/**
 * Find cGPA for Students in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_report_CGPA($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
        sp.field_student_ref_sp_uid AS uid,
        u.name AS mat,
        sp.field_cgpa_sp_value,
        sp.field_credit_load_completed_sp_value,
        sp.field_gptotal_sp_value,
        p.field_min_credit_load_program_value,
        SUBSTRING(spro.field_profile_reg_session_value, 1, 4) - spro.field_profile_yearofentry_value + 1 AS elapsed_years,
        p.field_duration_value,
        p.field_max_duration_value,
        CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name, pro.nid student_key,
        spro.field_profile_mode_of_entry_value
      FROM {content_type_student_program} sp
      INNER JOIN {node} npro ON sp.field_student_ref_sp_uid=npro.uid AND npro.type='profile'
      INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
      INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
      INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
      INNER JOIN {content_type_program} p
      INNER JOIN {users} u ON sp.field_student_ref_sp_uid=u.uid
      WHERE
        sp.field_student_ref_sp_uid IN ($ids) AND
        sp.field_program_ref_sp_nid=spro.field_profile_first_choice_nid AND
        sp.field_program_ref_sp_nid=p.nid
      ORDER BY u.name";
  $result = db_query($sql);
  return $result;
}


/**
 * Find cGPAs for Students for all sessions up to PREVIOUS Session (but not current one) for Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_report_previous_CGPA($session, $programme_nid, $level) {
  /*
    Similar to (derived from) UPDATE Query for
      sp.field_gptotal_sp_value,
      sp.field_credit_load_completed_sp_value,
      sp.field_cgpa_sp_value,
    in approve_grades_lecturer_form_submit() in course_grades_footer.inc.
    Uses a different set of uid(s)
    Could be simplified somewhat but kept the same as that as much as possible

    Note: using a session parameter different from the current session is not very relevant except for those students who have left the university
      or alternatively at the start of the session before the students have registered courses
  */

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "
    SELECT
      cgpatoset.gradepoints,
      cgpatoset.totalload,
      IF(cgpatoset.calc_type=3,
        IF(cgpatoset.allpassed=0, '-', 'Pass'),
        FORMAT(IF(cgpatoset.totalload=0, 0, cgpatoset.gradepoints/cgpatoset.totalload), 2)
      ) AS cgpa,
      cgpatoset.uid
    FROM
      (
        SELECT
          exams.field_mat_no_uid AS uid,
          MAX(exams.field_calc_type_value) AS calc_type,
          SUM(exams.gradepoint*exams.credit_load) AS gradepoints,
          MIN(exams.gradepoint) AS allpassed,
          SUM(exams.credit_load) AS totalload
        FROM (
          SELECT DISTINCT
            IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value) AS gradepoint,
            sg.field_mat_no_uid,
            sg.field_calc_type_value,
            CONCAT(ci.field_sess_name_value, ci.field_semester_name_value, sg.nid) AS sess_sem,
            c.field_code_value,
            sg.field_credit_load_sg_value AS credit_load,
            c.field_creditload_value AS old_credit_load
          FROM
            {content_type_student_grades} sg,
            {content_type_course_instance} ci,
            {content_type_course} c,
            {program_course} pc,
            {node} nspro,
            {content_type_student_profile} spro
          WHERE
            sg.field_mat_no_uid IN ($ids) AND
            sg.field_course_instance_nid=ci.nid AND
            sg.field_examscorelocked_value>0 AND
            sg.field_dropped_value=0 AND
            ci.field_course_id_nid=c.nid AND
            ci.field_course_id_nid=pc.course_id AND
            pc.programme_id=spro.field_profile_first_choice_nid AND
            nspro.uid=sg.field_mat_no_uid AND
            nspro.type='student_profile' AND
            nspro.vid=spro.vid AND
            ci.field_sess_name_value<'%s'
          ) AS exams
        JOIN (
          SELECT
            sg0.field_mat_no_uid,
            MAX(CONCAT(ci0.field_sess_name_value, ci0.field_semester_name_value, sg0.nid)) AS sess_sem0,
            c0.field_code_value
          FROM
            {content_type_student_grades} sg0,
            {content_type_course_instance} ci0,
            {content_type_course} c0,
            {program_course} pc0,
            {node} nspro0,
            {content_type_student_profile} spro0
          WHERE
            sg0.field_mat_no_uid IN ($ids) AND
            sg0.field_course_instance_nid=ci0.nid AND
            sg0.field_examscorelocked_value>0 AND
            sg0.field_dropped_value=0 AND
            ci0.field_course_id_nid=c0.nid AND
            ci0.field_course_id_nid=pc0.course_id AND
            pc0.programme_id=spro0.field_profile_first_choice_nid AND
            nspro0.uid=sg0.field_mat_no_uid AND
            nspro0.type='student_profile' AND
            nspro0.vid=spro0.vid AND
            ci0.field_sess_name_value<'%s'
          GROUP BY c0.field_code_value, sg0.field_mat_no_uid
          ) AS most_recent_exam
        ON
          exams.field_code_value=most_recent_exam.field_code_value AND
          exams.sess_sem=most_recent_exam.sess_sem0 AND
          exams.field_mat_no_uid=most_recent_exam.field_mat_no_uid
        GROUP BY exams.field_mat_no_uid
      ) AS cgpatoset";
  $result = db_query($sql, $session, $session);
  return $result;
}


/**
 * Find Units and Grade Points for whole Session for Students in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_report_current_gradepoints($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
      gpa.field_student_ref_gpa_uid AS uid,
      SUM(gpa.field_credit_load_completed_value) AS credit_load_completed,
      SUM(IF(gpa.field_gptotal_value='-', 0, gpa.field_gptotal_value)) AS gptotal
    FROM {content_type_student_gpa} gpa
    INNER JOIN {node} npro ON gpa.field_student_ref_gpa_uid=npro.uid AND npro.type='profile'
    INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
    INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
    INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
    WHERE
      gpa.field_student_ref_gpa_uid IN ($ids) AND
      gpa.field_program_ref_gpa_nid=spro.field_profile_first_choice_nid AND
      gpa.field_sess_name_gpa_value='%s'
    GROUP BY gpa.field_student_ref_gpa_uid";
  $result = db_query($sql, $session);
  return $result;
}


/**
 * Find Courses for whole Session for Students in Session/Programme/Level
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_report_current_courses($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
      sg.field_mat_no_uid AS uid,
      GROUP_CONCAT(DISTINCT CONCAT(c.field_code_value, '-', sg.field_credit_load_sg_value, '-', sg.field_grade_value) ORDER BY c.field_code_value SEPARATOR ', ') AS courses
    FROM
      {content_type_student_grades} sg,
      {content_type_course_instance} ci,
      {content_type_course} c,
      {program_course} pc,
      {node} nspro,
      {content_type_student_profile} spro
    WHERE
      sg.field_mat_no_uid IN ($ids) AND
      sg.field_course_instance_nid=ci.nid AND
      sg.field_examscorelocked_value>0 AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_course_id_nid=pc.course_id AND
      ci.field_sess_name_value='%s' AND
      pc.programme_id=spro.field_profile_first_choice_nid AND
      nspro.uid=sg.field_mat_no_uid AND
      nspro.type='student_profile' AND
      nspro.vid=spro.vid
    GROUP BY sg.field_mat_no_uid";
  $result = db_query($sql, $session);
  return $result;
}


/**
 * Find Courses for whole Session for Students in Session/Programme/Level which have not had their grades submitted by lecturer
 *
 * @uses get_id_list_for_students_in_programme()
 * @param string $session
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $level
 * @return mysqli_result
 */
function get_report_current_courses_grades_not_submitted($session, $programme_nid, $level) {

  $ids = get_id_list_for_students_in_programme($session, $programme_nid, $level);

  $sql = "SELECT
      sg.field_mat_no_uid AS uid,
      GROUP_CONCAT(DISTINCT c.field_code_value ORDER BY c.field_code_value SEPARATOR ', ') AS courses_not_submitted
    FROM
      {content_type_student_grades} sg,
      {content_type_course_instance} ci,
      {content_type_course} c,
      {program_course} pc,
      {node} nspro,
      {content_type_student_profile} spro
    WHERE
      sg.field_mat_no_uid IN ($ids) AND
      sg.field_course_instance_nid=ci.nid AND
      sg.field_examscorelocked_value=0 AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_course_id_nid=pc.course_id AND
      ci.field_sess_name_value='%s' AND
      pc.programme_id=spro.field_profile_first_choice_nid AND
      nspro.uid=sg.field_mat_no_uid AND
      nspro.type='student_profile' AND
      nspro.vid=spro.vid
    GROUP BY sg.field_mat_no_uid";
  $result = db_query($sql, $session);
  return $result;
}


/**
 * Find all Sessions
 *
 * @return array of Session => Session
 */
function get_all_sessions() {
  $result = db_query($sql = "SELECT session_id, sess_name FROM {session} ORDER BY sess_name DESC ");
  if (db_affected_rows($result) > 0) {
    while ($row = db_fetch_object($result))
      $session[$row->sess_name] = $row->sess_name;
  }
  else
    $session[] = strip_tags(Error_Types(106));
  return $session;
}


/**
 * Find Courses in a Programme which do not have a Course Instance for a Session and a Semester
 *
 * @param int $programme_nid 'program' CCK Drupal node nid
 * @param string $session
 * @param int $semester
 * @return mysqli_result
 */
function get_unassigned_for_programme($programme, $session, $semester) {
  $sql ="
  SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        d.field_department_name_value department_name,
        program_course_id
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      WHERE pc.semester='%s' AND p.nid=%d AND ci.nid IS NULL
      ORDER BY d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester, $programme);
    return $result;
}


/**
 * Handles 'staff/unregstudents' menu to List of Students who have Not Registered for a Semester
 *
 * @uses get_all_sessions()
 * @uses show_unregistered_course_form()
 * @uses get_unregistered_students()
 * @uses display_list_of_unregistered_students()
 * @global array $sessions
 * @global array $_SESSION['eduerp_unreg']
 * @return string HTML
 */
function staff_unregistered_students() {
 global $sessions;
  ob_start();
  $sessions = get_all_sessions();
  $str = "
  <br /><hr /><br />

  <font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;List of Students who have Not Registered for a Semester</b></font><br /><br />
  <br /><hr /><br />

  <b>List of Students who have Not Registered for a Semester</b> - Please fill the form as appropriate<br /><br />";

  $str .= drupal_get_form('show_unregistered_course_form');

  if ($_SESSION['eduerp_unreg']) {

    $unregStudents = get_unregistered_students($sessions[$_SESSION['eduerp_unreg']['session']], $_SESSION['eduerp_unreg']['semester']);

    $str .="
    <br /><hr /><br />
    <b>List of Students who have Not Registered for ". $sessions[$_SESSION['eduerp_unreg']['session']] ." Session | Semester ". $_SESSION['eduerp_unreg']['semester'] ."</b><br /><br />";
    if (db_affected_rows($unregStudents) > 0) {
      $str  .= display_list_of_unregistered_students($unregStudents);
    }
    else{
      drupal_set_message(Error_Types(106), 'error');
    }
  }
  echo $str;
  return ob_get_clean();
}


/**
 * Return HTML for List of Students who have Not Registered for a Semester
 *
 * @param mysqli_result $result
 * @return string HTML
 */
function display_list_of_unregistered_students(&$result) {
  $html = "
  <table border ='1'>
    <tr>
      <th>#</th>
      <th>Student Name</th>
      <th>Matriculation Number</th>
      <th>Programme</th>
      <th>Level</th>
    </tr>";$i=1;
  while ($f = db_fetch_object($result)) {
    if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";

    $html .="
    <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
      <td>". $i++ ."</td>
      <td>". $f->student_name ."</td>
      <td>". $f->mat ."</td>
      <td>". $f->programme_name ."</td>
      <td>". $f->level ."</td>
    </tr>";
  }
  $html .= "
  </table>";
  return  $html;
}


/**
 * Form to Select Session/Semester for List of Students who have Not Registered for a Semester
 *
 * @uses show_unregistered_course_form_submit()
 * @global array $_SESSION['eduerp_unreg']
 * @return array Drupal Form
 */
function show_unregistered_course_form() {
  global $sessions;
  $form['#title'] = 'Unregistered Course form';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => $sessions,
    '#required' => TRUE,
    '#title' => 'Session');
  if ($_SESSION['eduerp_unreg']) $form['session']['#default_value'] = $_SESSION['eduerp_unreg']['session'];

  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2'),
    '#required' => TRUE,
    '#title' => 'Semester');
  if ($_SESSION['eduerp_unreg']) $form['semester']['#default_value'] = $_SESSION['eduerp_unreg']['semester'];

  $form['submit'] = array(
      '#value' => 'Check Now',
      '#type' => 'submit'
    );
  return $form;
}


/**
 * submit hook for {@link show_unregistered_course_form()}
 *
 * @global array $_SESSION['eduerp_unreg']
 */
function show_unregistered_course_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $_SESSION['eduerp_unreg']['session'] = $values['session'];
  $_SESSION['eduerp_unreg']['semester'] = $values['semester'];
}


/**
 * Find List of Students who have Not Registered for a Semester
 *
 * @param string $session
 * @param int $semester
 * @return mysqli_result
 */
function get_unregistered_students($session, $semester) {
  $sql = "
  SELECT DISTINCT
    ur.uid,
    u.name AS mat,
    p.field_programme_name_value AS programme_name,
    spro.field_profile_level_name_value AS level,
    CONCAT(pro.field_profile_last_name_value, ', ', pro.field_profile_first_name_value, ' ', IFNULL(pro.field_profile_middle_name_value, '')) AS student_name
  FROM {role} r
  INNER JOIN {users_roles} ur ON r.rid=ur.rid
  INNER JOIN {node} npro ON ur.uid=npro.uid AND npro.type='profile'
  INNER JOIN {content_type_profile} pro ON npro.vid=pro.vid
  INNER JOIN {node} nspro ON npro.uid=nspro.uid AND nspro.type='student_profile'
  INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
  INNER JOIN {content_type_student_program} sp ON ur.uid=sp.field_student_ref_sp_uid AND spro.field_profile_first_choice_nid=sp.field_program_ref_sp_nid
  INNER JOIN {content_type_program} p ON spro.field_profile_first_choice_nid=p.nid
  INNER JOIN {users} u ON ur.uid=u.uid
  LEFT JOIN {content_type_student_record} sr
  ON ur.uid=sr.field_student_ref_sr_uid AND
    sp.field_program_ref_sp_nid=sr.field_student_program_sr_nid AND
    sr.field_event_sr_value IN ('Graduated', 'Left Voluntarily', 'Left Forced')
  WHERE
    r.name='Student' AND
    (spro.field_profile_reg_session_value!='%s' OR spro.field_profile_reg_semester_value!='%s') AND
    sr.field_student_ref_sr_uid IS NULL
  ORDER BY programme_name, level, student_name
  ";
  $result = db_query($sql, $session, $semester);
  return $result;
}


/**
 * Form to Add a Student Record Entry (CCK 'student_record')
 *
 * @uses staff_student_action_form_validate()
 * @uses staff_student_action_form_submit()
 * @uses get_all_sessions()
 * @global int $eduerp_uid
 * @global string $eduerp_programmeName
 * @global int $eduerp_programme_nid
 * @global string $eduerp_studentName
 * @return array Drupal Form
 */
function staff_student_action_form() {
  global $eduerp_uid, $eduerp_programmeName, $eduerp_programme_nid, $eduerp_studentName;
  $form = array(
    '#theme' => 'form_panel_table',
    '#form_panel_table_attributes' => array('border' => 0));
  $form['#title'] = 'Student Action';

  $form['comment'] = array(
    '#title' => 'Comment',
    '#type' => 'textfield',
    '#size' => 25,
    '#form_panel_col' => 1,
    '#form_panel_row' => 1
  );
  $form['uid'] = array(
    '#title' => 'uid',
    '#type' => 'hidden',
    '#default_value' => $eduerp_uid
  );
  $form['programmeName'] = array(
    '#title' => 'programmeName',
    '#type' => 'hidden',
    '#default_value' => $eduerp_programmeName
  );
  $form['programmeUID'] = array(
    '#title' => 'programmeUID',
    '#type' => 'hidden',
    '#default_value' => $eduerp_programme_nid
  );
  $form['studentName'] = array(
    '#title' => 'studentName',
    '#type' => 'hidden',
    '#default_value' => $eduerp_studentName
  );
  $form['event'] = array(
    '#type' => 'select',
    '#options' => array('Graduated'=>'Graduated','Left Voluntarily'=>'Left Voluntarily','Repeat Session'=>'Repeat Session','Defer Session'=>'Defer Session','Left Forced'=>'Left Forced','Note'=>'Note'),
    '#title' => 'Event',
    '#form_panel_col' => 2,
    '#form_panel_row' => 1
    );
    $form['degree'] = array(
    '#type' => 'select',
    '#options' => array('None'=>'None','First Class'=>'First Class', 'Second Class Upper'=>'Second Class Upper', 'Second Class Lower'=>'Second Class Lower','Third Class'=>'Third Class', 'Pass'=>'Pass'),
    '#title' => 'Degree',
    '#form_panel_col' => 3,
    '#form_panel_row' => 1
    );
  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#form_panel_col' => 4,
    '#form_panel_row' => 1
    );
  $form['submit'] = array(
    '#value' => 'Add to Student Record',
    '#type' => 'submit',
    '#form_panel_col' => 5,
    '#form_panel_row' => 1
  );

  return $form;
}


/**
 * validate hook for {@link staff_student_action_form()}
 */
function staff_student_action_form_validate($form, &$state) {
  $values = $state['values'];

  $degrees = array("First Class", "Second Class Upper", "Second Class Lower", "Third Class", "Pass");

  if(($values['event'] == 'Graduated' && $values['degree'] == 'None') || ($values['event'] != 'Graduated' && in_array($values['degree'], $degrees))) {
    form_set_error('degree1', "Wrong 'Degree' specified for 'Event'.");
  }
}


/**
 * submit hook for {@link staff_student_action_form()}
 *
 * @uses create_student_record_cck()
 */
function staff_student_action_form_submit($form, &$state) {
  $values = $state['values'];
  // student_record CCK

  $studentRecord = array('title' =>  $values['studentName'] .' - '. $values['programmeName'],
  	                 'uid' => $values['uid'], 'event' => $values['event'], 'degree' => $values['degree'],
  	                 'session' => $values['session'], 'programmeUID' => $values['programmeUID'], 'comment' => $values['comment']
  	  );
  create_student_record_cck($studentRecord);
  drupal_set_message('<b>' . $values['event'] .'</b> with <b>'. $values['degree'] .'</b> for <b>'. $values['session'] .'</b> session was applied to <b>'. $values['studentName'] .'</b>');
}


/**
 * Add a Student Record Entry (CCK 'student_record')
 *
 * @param int $studentRecord
 */
function create_student_record_cck(&$studentRecord) {
  global $user;
  $node = new stdClass();
  $node->type                               = 'student_record';
  $node->uid                                = 1;  // Admin
  $node->status                             = 1;  // Published
  $node->promote                            = 0;
  $node->sticky                             = 0;
  $node->comment                            = 0;
  $node->title                              = $studentRecord['title']; //[Student Name] . ' - ' . [Programme Name];
  $node->field_student_ref_sr[0]['uid']     = $studentRecord['uid']; //uid of Student;
  $node->field_event_sr[0]['value']         = $studentRecord['event']; //select from Graduated, Left Voluntarily, Left Forced, Repeat Session
  $node->field_degree_sr[0]['value']        = $studentRecord['degree']; //select from degree class (None, First Class, Second Class Upper, Second Class Lower, Third Class, Pass
  $node->field_session_sr[0]['value']       = $studentRecord['session']; //session user graduated from or has been forced to repeat e.g. 2009/2010
  $node->field_student_program_sr[0]['nid'] = $studentRecord['programmeUID']; //node ID of program CCK that this record refers to
  $node->field_approver_sr[0]['uid']        = $user->uid; //uid of user who created this record;
  $node->field_comment_sr[0]['value'] = ! empty($studentRecord['comment']) ? $studentRecord['comment'] : null;
  node_save($node);
}


/**
 * Handles 'staff/dropcoursereg' menu to Mark a Course Registration as Dropped
 *
 * @uses staff_has_eduerp_role()
 * @uses get_student_course_instance_form()
 * @uses get_student_drop_course_form()
 * @global stdClass $_SESSION['eduerp_drop_on']
 * @global stdClass $_SESSION['eduerp_drop_course_info']
 * @return string HTML
 */
function staff_drop_registered_course() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Mark a Course Registration as Dropped</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {
    if (! isset($_SESSION['eduerp_drop_on']) && ! isset($_POST['eduerp_drop_on'])) {
      echo $navi;
      echo "<b>Get Student Registered Courses</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_course_instance_form');
    }
    else {//show form to allow him drop courses
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/dropcoursereg') ."'>Mark a Course Registration as Dropped</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['mat_no'] ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';
      echo $navi;
      echo "<b>List of Registered Courses by</b> | <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['mat_no'] ."</b>
      | <b>". $_SESSION['eduerp_drop_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_drop_course_info']['semester'] ."</b>
      | <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['current_programme_name'] ."</b>
      | Student current level <b>". $_SESSION['eduerp_drop_course_info']['studentInfo']['level'] ." </b>
      <br /><br />- Select a Course to Drop it<br /><br />";
      echo drupal_get_form('get_student_drop_course_form');
    }
  }
  else {
    echo $navi;
    drupal_set_message(Error_Types(127), 'error');
  }
  unset($_SESSION['eduerp_drop_on']);
  return ob_get_clean();
}


/**
 * Form to Mark a Student's Course Registration as Dropped
 *
 * @uses get_student_drop_course_form_validate()
 * @uses get_student_drop_course_form_submit()
 * @uses get_student_registered_courses()
 * @global stdClass $_SESSION['eduerp_drop_course_info']
 * @return array Drupal Form
 */
function get_student_drop_course_form() {
  $form['#title'] = 'Drop Course Form';
  $courses = array();
  if(isset($_SESSION['eduerp_drop_course_info'])) {
    $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);

    if (db_affected_rows($result) > 0) {
      while($r = db_fetch_object($result))
      $courses[$r->nid] = $r->course_code;
    }
  }

 $form['student_grade_nid'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + $courses,
    '#title' => 'Registered Courses',
    '#required' =>TRUE
  );

  $form['eduerp_drop_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Drop Course',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_student_drop_course_form()}
 *
 * @uses get_student_registered_courses()
 * @global stdClass $_SESSION['eduerp_drop_on']
 * @global stdClass $_SESSION['eduerp_drop_course_info']
 */
function get_student_drop_course_form_validate($form, &$state) {
  $_SESSION['eduerp_drop_on'] = 1;//keep showing the form

  //check for remainders
  $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126). 'error');
}


/**
 * submit hook for {@link get_student_drop_course_form()}
 *
 * @uses update_credit_load_registered()
 * @uses get_student_registered_courses()
 * @global stdClass $_SESSION['eduerp_drop_on']
 * @global stdClass $_SESSION['eduerp_drop_course_info']
 */
function get_student_drop_course_form_submit($form, &$state) {
  $values = $state['values'];
  $_SESSION['eduerp_drop_on'] = 1;//keep showing the form
  $sql = "UPDATE {content_type_student_grades} SET field_dropped_value = 1 WHERE nid = %d";
  db_query($sql, $values['student_grade_nid']);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  update_credit_load_registered($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);

  drupal_set_message('The Course has been dropped!');
  //check for remainders
  $result = get_student_registered_courses($_SESSION['eduerp_drop_course_info']['studentInfo']['uid'], $_SESSION['eduerp_drop_course_info']['session'], $_SESSION['eduerp_drop_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126), 'error');
}


/**
 * Form to Select a Student in order to Mark a Course Registration as Dropped
 *
 * @uses get_student_course_instance_form_validate()
 * @uses get_all_sessions()
 * @return array Drupal Form
 */
function get_student_course_instance_form() {
  $form['#title'] = 'Get Student Registered Courses By Session and Semester ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

 $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session'
  );
  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2', 3=>'3'),
      '#title' => 'Semester'
   );
  $form['submit'] = array(
      '#value' => 'Get Registered Courses',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_student_course_instance_form()}
 *
 * @uses get_student_registered_courses()
 * @uses get_programmes()
 * @global stdClass $_SESSION['eduerp_drop_on']
 * @global stdClass $_SESSION['eduerp_drop_course_info']
 */
function get_student_course_instance_form_validate($form, &$state) {
  $values = $state['values'];
  $studentInfo = user_load(array('name'=>$values['mat_no']));

  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {
     //check for registered course
    $registeredCourses = get_student_registered_courses($studentInfo->uid, $values['session'], $values['semester']);
    if (db_affected_rows($registeredCourses) <= 0) {
      drupal_set_message(Error_Types(124), 'error');
    }
    else {//course reg info exists

      $student_profile = new UserProfile($studentInfo->uid);

      $rs = get_programmes($student_profile->profile_first_choice);
      $programmeInfo = db_fetch_object($rs);

      //build tableField=>formElement array
      $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
        'level'=>$student_profile->profile_level_name,
        'current_programme_nid'=>$programmeInfo->programme_nid,
        'current_programme_name'=>$programmeInfo->programme_name
      );
      $_SESSION['eduerp_drop_on'] = 1;//keep showing the form
      unset($_SESSION['eduerp_drop_course_info']);
      //ini_ses($studentInfo->uid, "eduerp_drop_course_info");
      $_SESSION['eduerp_drop_course_info'] = array('studentInfo' => $studInfo, 'session' => $values['session'], 'semester' => $values['semester']);
    }
  }
}


/**
 * Find Courses Registered for a Student in a Session/Semester
 *
 * @param int $studentUID Drupal uid
 * @param string $session
 * @param string $semester
 * @return mysqli_result
 */
function get_student_registered_courses($studentUID, $session, $semester) {
  $sql = "SELECT g.nid nid, t.nid ctci_nid, c.field_code_value course_code
  FROM {content_type_student_grades} g
    INNER JOIN {content_type_course_instance} t ON g.field_course_instance_nid = t.nid AND t.field_sess_name_value = '%s' AND t.field_semester_name_value = '%s'
    INNER JOIN {content_type_course} c ON t.field_course_id_nid = c.nid
    WHERE g.field_mat_no_uid = %d AND g.field_dropped_value=0 ";
  $result = db_query($sql, $session, $semester, $studentUID);

  return $result;
}


/**
 * Handles 'staff/manualcoursereg' menu to Manually Register a Student in a Course
 *
 * @uses staff_has_eduerp_role()
 * @uses get_student_unreg_course_form()
 * @uses get_student_reg_course_form()
 * @global stdClass $_SESSION['eduerp_reg_on']
 * @global stdClass $_SESSION['eduerp_reg_course_info']
 * @return string HTML
 */
function staff_manual_course_reg() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Manual Course Registration</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {
    if (! isset($_SESSION['eduerp_reg_on']) && ! isset($_POST['eduerp_reg_on'])) {
      echo $navi;
      echo "<b>Get Student unRegistered Courses</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_unreg_course_form');
    }
    else {//show form to allow him register courses
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/manualcoursereg') ."'>Manual Course Registration</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['mat_no'] ."</b></font><br /><br />";
      $navi .= '<br /><hr /><br />';
      echo $navi;
      echo "<b>List of unRegistered Courses for</b> | <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['fname'] ."</b> - <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['mat_no'] ."</b>
      | <b>". $_SESSION['eduerp_reg_course_info']['session'] ." Session</b>  |  <b>Semester ". $_SESSION['eduerp_reg_course_info']['semester'] ."</b>
      | <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['current_programme_name'] ."</b>
      |  Student current level <b>". $_SESSION['eduerp_reg_course_info']['studentInfo']['level'] ." </b>
      <br /><br />- Select a Course to Register it<br /><br />";
      echo drupal_get_form('get_student_reg_course_form');
    }
  }
  else {
    echo $navi;
    drupal_set_message(Error_Types(127), 'error');
  }
  unset($_SESSION['eduerp_reg_on']);
  return ob_get_clean();
}


/**
 * Form to Select a Student in order to Manually Register a Student in a Course
 *
 * @uses get_all_sessions()
 * @uses get_student_unreg_course_form_validate()
 * @return array Drupal Form
 */
function get_student_unreg_course_form() {
  $form['#title'] = 'Get Student unRegistered Courses By Session and Semester ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

 $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session'
  );
  $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2', 3=>'3'),
      '#title' => 'Semester'
   );
  $form['submit'] = array(
      '#value' => 'Get unRegistered Courses',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_student_unreg_course_form()}
 *
 * @uses get_student_unregistered_courses()
 * @uses get_programmes()
 * @global stdClass $_SESSION['eduerp_reg_on']
 * @global stdClass $_SESSION['eduerp_reg_course_info']
 */
function get_student_unreg_course_form_validate($form, &$state) {
  $values = $state['values'];

  $studentInfo = user_load(array('name'=>$values['mat_no']));

  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {

    //check for unregistered course
    $unRegisteredCourses = get_student_unregistered_courses($studentInfo->uid, $values['session'], $values['semester']);
    if (db_affected_rows($unRegisteredCourses) <= 0) {
      drupal_set_message(Error_Types(128), 'error');
    }
    else {//course reg info exists
      $student_profile = new UserProfile($studentInfo->uid);

      $rs = get_programmes($student_profile->profile_first_choice);
      $programmeInfo = db_fetch_object($rs);

      //build tableField=>formElement array
      $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
        'level'=>$student_profile->profile_level_name,
        'current_programme_nid'=>$programmeInfo->programme_nid,
        'current_programme_name'=>$programmeInfo->programme_name
      );
      $_SESSION['eduerp_reg_on'] = 1;//keep showing the form

      unset($_SESSION['eduerp_reg_course_info']);
      $_SESSION['eduerp_reg_course_info'] = array('studentInfo' => $studInfo, 'session'=>$values['session'] , 'semester'=>$values['semester'] );
    }
  }
}


/**
 * Form to Select a Course Instance in order to Manually Register a Student in a Course
 *
 * @uses get_student_reg_course_form_validate()
 * @uses get_student_reg_course_form_submit()
 * @uses get_student_unregistered_courses()
 * @global stdClass $_SESSION['eduerp_reg_course_info']
 * @return array Drupal Form
 */
function get_student_reg_course_form() {
  $form['#title'] = 'Register Course Form';
  $courses = array();
  if(isset($_SESSION['eduerp_reg_course_info'])) {
    $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester']);

    if (db_affected_rows($result) > 0) {
      while($r = db_fetch_object($result))
      $courses[$r->course_instance] = check_plain($r->course_code);
    }
  }

 $form['course_instance_id'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + $courses,
    '#title' => 'unRegistered Courses',
    '#required' =>TRUE
  );

  $form['eduerp_reg_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Register Course',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_student_reg_course_form()}
 *
 * @uses get_student_unregistered_courses()
 * @global stdClass $_SESSION['eduerp_reg_on']
 * @global stdClass $_SESSION['eduerp_reg_course_info']
 */
function get_student_reg_course_form_validate($form, &$state) {
  $_SESSION['eduerp_reg_on'] = 1;//keep showing the form

  $values = $state['values'];

  // Insure that there is no already existing 'student_grades' CCK for the same student, session and semester for the same course
  $sql = "SELECT sg.nid, ci.nid, c.nid
    FROM {content_type_student_grades} sg
    INNER JOIN {content_type_course_instance} ci ON sg.field_course_instance_nid = ci.nid AND ci.field_sess_name_value = '%s' AND ci.field_semester_name_value = '%s'
    INNER JOIN {content_type_course} c ON ci.field_course_id_nid = c.nid
    WHERE sg.field_mat_no_uid = %d AND sg.field_dropped_value = 0 AND c.nid IN
      (
        SELECT c0.nid
        FROM {content_type_course} c0
        INNER JOIN {content_type_course_instance} ci0 ON c0.nid = ci0.field_course_id_nid
        WHERE ci0.nid = %d
      )";
  $result = db_query($sql, $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester'], $_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $values['course_instance_id']);

  if (db_affected_rows($result) > 0)
    form_set_error('course_instance_id', 'That course is already registered for this session and semester');

  //check for remainders
  $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $_SESSION['eduerp_reg_course_info']['session'], $_SESSION['eduerp_reg_course_info']['semester']);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126), 'error');
}


/**
 * submit hook for {@link get_student_reg_course_form()}
 *
 * @uses create_student_gpa()
 * @uses create_student_grades()
 * @uses update_credit_load_registered()
 * @uses get_student_unregistered_courses()
 * @global stdClass $_SESSION['eduerp_reg_on']
 * @global stdClass $_SESSION['eduerp_reg_course_info']
 */
function get_student_reg_course_form_submit($form, &$state) {
  $_SESSION['eduerp_reg_on'] = 1;//keep showing the form
  $values = $state['values'];

  $studentUID = $_SESSION['eduerp_reg_course_info']['studentInfo']['uid'];
  $student_profile = new UserProfile($studentUID);
  $session = $_SESSION['eduerp_reg_course_info']['session'];
  $semester = $_SESSION['eduerp_reg_course_info']['semester'];
  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  // Find the program type
  $sql = "SELECT field_program_type_value FROM {content_type_program} WHERE nid=%d";
  $result = db_query($sql, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);
  $program_type = abs($row->field_program_type_value);
  if ($program_type == 3 && $student_profile->profile_level_name == '100') $program_type = 0; // First year medicine does not use medicine type scales

  // Find the existing student_program
  $sql = "SELECT nid FROM {content_type_student_program} WHERE field_student_ref_sp_uid=%d AND field_program_ref_sp_nid=%d";
  $result = db_query($sql, $studentUID, $student_profile->profile_first_choice);
  $row = db_fetch_object($result);
  $student_program = $row->nid;

  $student->uid = $studentUID;
  $student_gpa = create_student_gpa($student, $student_profile, $studentname, $student_program, $session, $semester, 0);

  create_student_grades($student, $values['course_instance_id'], $student_gpa, $studentname, $program_type);

  update_credit_load_registered($studentUID, $session, $semester);

  drupal_set_message('Course was Registered Successfully!');

  //check for remainders
  $result = get_student_unregistered_courses($_SESSION['eduerp_reg_course_info']['studentInfo']['uid'], $session, $semester);
  if(db_affected_rows($result) <= 0)
    drupal_set_message(Error_Types(126), 'error');
}


/**
 * Find Courses Not Registered for a Student in a Session/Semester
 *
 * @uses get_student_registered_courses()
 * @param int $studentUID Drupal uid
 * @param string $session
 * @param string $semester
 * @return mysqli_result
 */
function get_student_unregistered_courses($studentUID, $session, $semester) {
  //get the student's profile info
  $student_profile = new UserProfile($studentUID);
  $studInfo['fname'] = $student_profile->profile_first_name;

  //we need to get the courses he may have registered for reason being we will not be including those
  $registeredCourses = get_student_registered_courses($studentUID, $session, $semester);
  $strRegisteredCourses = "";
  if(db_affected_rows($registeredCourses) > 0) {
    //these are the courses he already registered for the session/semester
    //build content_type_instance_id array
    while ($r = db_fetch_object($registeredCourses)) {
      $exclude[] = $r->ctci_nid;
    }
    if (is_array($exclude) && sizeof($exclude)) {
      $registered_nids = implode (", ", $exclude);
      $strRegisteredCourses = " AND ci.nid NOT IN (". $registered_nids .") ";
    }
  }

  $sql = "SELECT DISTINCT
        ci.nid AS course_instance,
        CONCAT(c.field_code_value, IF(ci.field_location_value > 1, CONCAT(' (', CAST(ci.field_location_value AS CHAR), ': ', LEFT(ci.field_timetable_value, 100), ')'), '')) AS course_code
      FROM
        {content_type_course_instance} ci,
        {content_type_course} c,
        {program_course} pc
      WHERE
        ci.field_sess_name_value='%s' AND
        ci.field_semester_name_value='%s' AND
        ci.field_course_id_nid=c.nid AND
        c.nid=pc.course_id AND
        pc.programme_id=%d
        ". $strRegisteredCourses ."
      ORDER BY course_code";
  $result = db_query($sql, $session, $semester, $student_profile->profile_first_choice);
  return $result;
}


/**
 * Update the Credit Load for a Student in a Session/Semester
 *
 * @param int $uid Drupal uid
 * @param string $session
 * @param int $semester
 */
function update_credit_load_registered($uid, $session, $semester) {
  $sql = "
    SELECT SUM(sg.field_credit_load_sg_value) AS total_registered
    FROM {content_type_student_gpa} gpa
    INNER JOIN {content_type_student_grades} sg ON gpa.nid = sg.field_student_gpa_nid
    WHERE
      gpa.field_student_ref_gpa_uid = %d AND gpa.field_sess_name_gpa_value = '%s' AND gpa.field_semester_name_gpa_value = '%s' AND
      sg.field_dropped_value = 0";
  $sql = "
    SELECT SUM(sg.field_credit_load_sg_value) AS total_registered
    FROM {content_type_student_gpa} gpa
    INNER JOIN {content_type_student_grades} sg ON gpa.nid = sg.field_student_gpa_nid
    INNER JOIN {content_type_course_instance} ci ON sg.field_course_instance_nid = ci.nid
    INNER JOIN {content_type_course} c ON ci.field_course_id_nid = c.nid
    WHERE
      gpa.field_student_ref_gpa_uid = %d AND gpa.field_sess_name_gpa_value = '%s' AND gpa.field_semester_name_gpa_value = '%s' AND
      sg.field_dropped_value = 0";
  if ($semester != '3') {
      // Suppress courses failed in previous semesters which should not be counted towards registered credit (see same SQL in student_course_form_validate())
      // (except that in semester 3 they should be included)
      $sql .= " AND
      c.field_code_value NOT IN(
        SELECT DISTINCT
          cx.field_code_value
        FROM
          {content_type_student_grades} sgx,
          {content_type_course_instance} cix,
          {content_type_course} cx,
          {program_course} pcx,
          {node} nsprox,
          {content_type_student_profile} sprox
        WHERE
          IF(sgx.field_gradepoint_value='-', 0, sgx.field_gradepoint_value)=0 AND
          sgx.field_mat_no_uid=%d AND
          sgx.field_course_instance_nid=cix.nid AND
          sgx.field_examscorelocked_value>0 AND
          sgx.field_dropped_value=0 AND
          cix.field_course_id_nid=cx.nid AND
          cix.field_course_id_nid=pcx.course_id AND
          CONCAT(cix.field_sess_name_value, cix.field_semester_name_value)<'%s%s' AND
          pcx.programme_id=sprox.field_profile_first_choice_nid AND
          nsprox.uid=sgx.field_mat_no_uid AND
          nsprox.type='student_profile' AND
          nsprox.vid=sprox.vid
        )";
    $result = db_query($sql, $uid, $session, $semester, $uid, $session, $semester);
  }
  else {
    $result = db_query($sql, $uid, $session, $semester);
  }
  $r = db_fetch_object($result);

  $sql = "UPDATE {content_type_student_gpa} gpa1 SET field_credit_load_registered_value = %d
    WHERE gpa1.field_student_ref_gpa_uid = %d AND gpa1.field_sess_name_gpa_value = '%s' AND gpa1.field_semester_name_gpa_value = '%s'";
  db_query($sql, $r->total_registered, $uid, $session, $semester);
  cache_clear_all('content:', content_cache_tablename(), TRUE);
}


/**
 * Handles 'staff/changeprogmme' menu to Change a Student's Programme
 *
 * @uses staff_has_eduerp_role()
 * @uses get_student_info_form()
 * @uses staff_student_change_programme_form()
 * @uses get_courses_passed_by_student()
 * @global stdClass $_SESSION['eduerp_change_prog_on']
 * @global stdClass $_SESSION['eduerp_change_prog_info']
 * @return string HTML
 */
function staff_change_student_programme() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Change a Student's Programme</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if(isset($_SESSION['eduerp_change_prog_on'])) $_POST['eduerp_change_prog_on'] = $_SESSION['eduerp_change_prog_on'];

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {
    if (! isset($_SESSION['eduerp_change_prog_on']) && ! isset($_POST['eduerp_change_prog_on'])) {
      echo $navi;
      echo "<b>Get Student Info</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_student_info_form');
    }
    elseif ($_POST['eduerp_change_prog_on'] == 1) {//page1
        $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/changeprogmme') ."'>Change a Student's Programme</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>&nbsp; &raquo; &nbsp; Select New Programme</font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo "<b>Student Current Info</b> | <b>". $_SESSION['eduerp_change_prog_info']['fname'] ."</b> - <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>
        | <b>". $_SESSION['eduerp_change_prog_info']['current_programme_name'] ."</b>
        | Student current level <b>". $_SESSION['eduerp_change_prog_info']['level'] ."</b>
        <br /><br />- Select a New Programme for the Student<br /><br />";
        echo drupal_get_form('staff_student_change_programme_form');
        echo "<font color=#FF0000><b>Do NOT do this until the session in which the student will be taking courses for the new program has started (otherwise the student's level will get increased for the new session)</b></font>";
      }
      elseif($_POST['eduerp_change_prog_on'] == 2) { //page 2
        $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/changeprogmme') ."'>Change a Student's Programme</a>&nbsp; &raquo; &nbsp; Student: <b>". $_SESSION['eduerp_change_prog_info']['mat_no'] ."</b>&nbsp; &raquo; &nbsp; Effect New Programme</font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;

        echo "<b>Student New Info</b> | <b>". $_SESSION['eduerp_change_prog_info']['fname'] ."</b> - ".
        $_SESSION['eduerp_change_prog_info']['new_mat_no'] ."
        | <b>". $_SESSION['eduerp_change_prog_info']['new_programme_name'] ."</b>
        | Student new level <b>". $_SESSION['eduerp_change_prog_info']['new_programme_level'] ." </b> ";

        echo '<br /><hr /><br />';
        echo '<b>List of Passed Courses</b>';
        echo '<br /><br />';
        echo "<p>Below is the list of all Courses previously entered for and passed by this student.<br />
        The student most probably is expected to move with some of their earned credits to the new programme.<br />
        The Courses ticked below will automatically be credited to the new Programme.<br />
        Those unticked will not be.<br />
        If you wish the student to carry the credits of the unticked Courses over to the new Programme,<br />
        then the HOD for the Programme (or you if you have rights) should go to the<br />
        'Specify Courses for a Programme' part of <a href='createmodifyprog' target='_new'>Create/Modify a Programme</a>.<br />
        Add the courses to the Programme and immediately \"Delete\" them from the Programme so that they are<br />
        marked as 'Historical' so they cannot be registered by students selecting courses for a semester.<br />
        You can also click on the links below to get there faster.</p>";

        echo get_courses_passed_by_student($_SESSION['eduerp_change_prog_info']['new_programme_nid'], $_SESSION['eduerp_change_prog_info']['uid']);
      }
  }
  else {
    echo $navi;
    drupal_set_message(Error_Types(127), 'error');
  }
  unset($_SESSION['eduerp_change_prog_on']);
  return ob_get_clean();
}


/**
 * Form to Select a Student in order to Change a Student's Programme
 *
 * @uses get_student_info_form_validate()
 * @return array Drupal Form
 */
function get_student_info_form() {
  $form['#title'] = 'Get Student Information ';

  $form['mat_no'] = array(
    '#type' => 'textfield',
    '#title' => 'Matriculation Number',
    '#required' => TRUE
  );

  $form['submit'] = array(
      '#value' => 'Get Student Info',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_student_info_form()}
 *
 * @uses get_programmes()
 * @global stdClass $_SESSION['eduerp_change_prog_on']
 * @global stdClass $_SESSION['eduerp_change_prog_info']
 */
function get_student_info_form_validate($form, &$state) {
  $values = $state['values'];
  $studentInfo = user_load(array('name'=>$values['mat_no']));

  if( ! $studentInfo) {
    form_set_error('mat_no', Error_Types(125));
  }
  else {

    //build tableField=>formElement array

    $student_profile = new UserProfile($studentInfo->uid);
    //get the current programme name
    $rs = get_programmes($student_profile->profile_first_choice);
    $programmeInfo = db_fetch_object($rs);

    $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_first_name, 'mat_no'=>$studentInfo->name,
          'level'=>$student_profile->profile_level_name,
          'current_programme_nid'=>$programmeInfo->programme_nid,
          'current_programme_name'=>$programmeInfo->programme_name
          );

    unset($_SESSION['eduerp_change_prog_info']);
    $_SESSION['eduerp_change_prog_on'] = 1;//keep showing the form
    //ini_ses($studentInfo->uid, "eduerp_change_prog_info");
    $_SESSION['eduerp_change_prog_info'] = $studInfo;
  }
}


/**
 * submit hook for {@link staff_student_change_programme_form()}, Change Programme and Add Student Record(s)
 *
 * @uses get_programmes()
 * @uses change_student_program()
 * @uses create_student_record_cck()
 * @global stdClass $_SESSION['eduerp_change_prog_on']
 * @global stdClass $_SESSION['eduerp_change_prog_info']
 */
function staff_student_change_programme_form_submit($form, &$state) {
  $values = $state['values'];
  $rs = get_programmes($values['programme_nid']);
  $programmeInfo = db_fetch_object($rs);
  $student_profile = new UserProfile($_SESSION['eduerp_change_prog_info']['uid']);
  $_SESSION['eduerp_change_prog_info']['new_programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_change_prog_info']['new_programme_name'] = $programmeInfo->programme_name;
  $_SESSION['eduerp_change_prog_info']['new_programme_level'] = $values['level_name'];

  $first_choice = $_SESSION['eduerp_change_prog_info']['new_programme_nid'];
  $level = $_SESSION['eduerp_change_prog_info']['new_programme_level'];
  //so go ahead with the change
  change_student_program($student_profile, $first_choice, $level, $values['dont_change_matno']);

  //create the content_type_student_record here
  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }
  if ($student_profile->profile_reg_session !== variable_get('eduerp_current_session', '')) {

    $studentRecord = array('title' =>  $studentname .' - '. $_SESSION['eduerp_change_prog_info']['new_programme_name'],
  	                 'uid' => $_SESSION['eduerp_change_prog_info']['uid'], 'event' => 'Changed from Old Programme', 'degree' => 'None',
  	                 'session' => $student_profile->profile_reg_session, 'programmeUID' => $_SESSION['eduerp_change_prog_info']['new_programme_nid'],
  	                 'comment' => 'Changed from Old Programme'
  	  );

    create_student_record_cck($studentRecord);
  }

  $studentRecord = array('title' =>  $studentname .' - '. $_SESSION['eduerp_change_prog_info']['new_programme_name'],
  	                 'uid' => $_SESSION['eduerp_change_prog_info']['uid'], 'event' => 'Changed to New Programme', 'degree' => 'None',
  	                 'session' => variable_get('eduerp_current_session', ''), 'programmeUID' => $_SESSION['eduerp_change_prog_info']['new_programme_nid'],
  	                 'comment' => 'Changed to New Programme'
  	  );
   create_student_record_cck($studentRecord);

  drupal_set_message('The Student\'s Programme was changed successfully!');

  //get students new mat no
  $student_profile = new UserProfile($_SESSION['eduerp_change_prog_info']['uid']);
  $_SESSION['eduerp_change_prog_info']['new_mat_no'] = $student_profile->profile_matno;
  $_SESSION['eduerp_change_prog_on'] = 2;
  drupal_goto('staff/changeprogmme');//force a refresh
}


/**
 * validate hook for {@link staff_student_change_programme_form()}
 */
function staff_student_change_programme_form_validate($form, &$state) {
  if (empty($state['values']['programme_nid'])) form_set_error('programme_nid', 'You must Select a Programme');
  if (empty($state['values']['level_name'])) form_set_error('level_name', 'You must Select a Level');
}


/**
 * Form to Change a Student's Programme
 *
 * @uses get_programmes()
 * @uses staff_student_change_programme_form_validate()
 * @uses staff_student_change_programme_form_submit()
 * @uses get_programmes()
 * @return array Drupal Form
 */
function staff_student_change_programme_form() {
  $form['#title'] = "Change a Student's Programme";

 $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + get_programmes(0, true),
    '#title' => 'New Programme for Student',
    '#ahah' => array('path' => 'staff/ajax/programmelevel', 'event' => 'change', 'method' => 'replace', 'wrapper' => 'programmelevels'),
    '#required' => TRUE
  );

 $form['level_name'] = array(
    '#type' => 'select',
    '#options' => array(''=>''),
    '#title' => 'New Start Level',
    '#attributes' => array(
      'style' => 'width:100px'),
    '#prefix' => "<div id='programmelevels'>",
    '#suffix' => "</div>",
    '#disabled' => TRUE,
    '#required' => TRUE
  );

  $form['dont_change_matno'] = array(
    '#type' => 'checkbox',
    '#title' => "Check this if you Don't want the Student's Admission Number to be Changed",
    '#default_value' => FALSE
  );

 $form['eduerp_change_prog_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Change Student Programme Now',
      '#type' => 'submit'
  );
  return $form;
}


/**
 * ALAN 20120419 Does not seem to be used, verify and remove
 * @deprecated
 */
function get_student_current_GPA($studentUID, $level) {
  //note we do not need to apply session here because the student may have come after say 2 years to continue. We only need to use his last ever level

  $sql = "SELECT field_gpaforstudent_value gpa_value, field_semester_name_gpa_value semester FROM {content_type_student_gpa} WHERE field_student_ref_gpa_uid = %d AND field_level_name_gpa_value = '%s'";
  $rs = db_query($sql, $studentUID, $level);
  return $rs;
}


/**
 * ALAN 20120419 Does not seem to be used, verify and remove
 * @deprecated
 */
function get_programme_faculty($programm_nid) {
  $sql = "SELECT f.nid FROM {content_type_program} p
    INNER JOIN {content_type_department} d ON p.field_department_id_nid = d.nid
    INNER JOIN {content_type_college} f ON f.nid = d.field_college_id_nid
    WHERE p.nid = %d ";

  $rs = db_query($sql, $programm_nid);
  $r = db_fetch_object($rs);
  return $r->nid;
}


/**
 * Find all Courses passed by A Student, indicating those whose Grades count towards cGPA and Credit Load in a Programme
 *
 * @param int $first_choice 'program' CCK Drupal node nid
 * @param int $uid Drupal uid
 * @return string HTML
 */
function get_courses_passed_by_student($first_choice, $uid) {
  $sql = "SELECT DISTINCT c.field_code_value, pc.course_id
       FROM {content_type_student_grades} sg,
 {content_type_course_instance}
  ci, {content_type_course} c
       LEFT JOIN {program_course} pc ON c.nid=pc.course_id AND
 pc.programme_id=%d
       WHERE
         sg.field_mat_no_uid=%d AND
         sg.field_course_instance_nid=ci.nid AND
         sg.field_examscorelocked_value>0 AND
         sg.field_dropped_value=0 AND
         ci.field_course_id_nid=c.nid AND
         IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value)>0";
     $result = db_query($sql, $first_choice, $uid);
     $html = '';
     if (db_affected_rows($result) > 0) {
       $html = "
         <table border=1>
           <tr>
             <th>#</th>
             <th>&nbsp;</th>
             <th>Course Code</th>
           </tr>";$i=1;
       while ($row = db_fetch_object($result)) {
         if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
         $html .="
           <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
             <td>". $i++ ."</td>";
         if (empty($row->course_id) || is_null($row->course_id))
           $html .="
             <td><input type='checkbox' disabled></td>
             <td><a href='specifycourse/$first_choice' target='_new'>". $row->field_code_value ."</a></td>";
         else
           $html .="
             <td><input type='checkbox' disabled checked></td>
             <td>". $row->field_code_value ."</td>";
         $html .= "
           </tr>";
       }
       $html .= "
         </table>";
     }
     else{
       drupal_set_message(Error_Types(106), 'error');
     }

     return $html;
}


/**
 * Handles 'staff/checkverifyprogmme' menu to Check have all existing Courses required for all Programmes been Verified ('program_course_instance' table entry exists for each Course Instance that matches a Course in the Programme for a Semester)
 *
 * <p>Note there could be Course Instances missing for a Semester which is checked for separately in staff_check_for_missing_courses()</p>
 * @uses display_verify_required_courses_for_programme()
 * @uses get_verify_required_courses_for_programme_form()
 * @global array $_SESSION['eduerp_required']
 * @return string HTML
 */
function staff_check_verify_programme_courses() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Check have all existing Courses required for all Programmes been Verified</font><br /><br />";
      $navi .= '<br /><hr /><br />';

    if (isset($_SESSION['eduerp_required']) ) {
      $str = display_verify_required_courses_for_programme() ."<br />";
    }
    echo $navi;
    echo "<b>Verify Courses for all Programmes</b> - Please fill the form as appropriate<br /><br />";
    echo drupal_get_form('get_verify_required_courses_for_programme_form');
    echo $str;

  if(isset($_SESSION['eduerp_required'])) unset($_SESSION['eduerp_required']);
  return ob_get_clean();
}


/**
 * Form to select Session/Semester in order to check have all existing Courses required for all Programmes been Verified
 *
 * @uses get_verify_required_courses_for_programme_form_submit()
 * @uses get_all_sessions()
 * @return array Drupal Form
 */
function get_verify_required_courses_for_programme_form() {
  $form['#title'] = 'Verify Required Courses for A Programme';

  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#title' => 'Session',
    '#default_value'=>variable_get('eduerp_current_session', ''),
    '#required' => TRUE,
    );
  $form['semester'] = array(
    '#type' => 'select',
    '#options' => array(1=>'1', 2=>'2'),
    '#title' => 'Semester',
    '#default_value'=>variable_get('eduerp_current_semester', ''),
    '#required' => TRUE,
    );
  $form['showDetails'] = array(
    '#type' => 'hidden',
    '#default_value' => 1,
    '#title' => 'trigger display',
    );
  $form['submit'] = array(
    '#value' => 'Verify Now',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * submit hook for {@link get_verify_required_courses_for_programme_form()}
 *
 * @global array $_SESSION['eduerp_required']
 */
function get_verify_required_courses_for_programme_form_submit($form, &$state) {
  $values = $state['values'];

  $_SESSION['eduerp_required'] = $values;
  drupal_goto("staff/checkverifyprogmme");
}


/**
 * Find all existing Courses required for all Programmes in a Semester that have NOT been Verified ('program_course_instance' table entry does NOT exist)
 *
 * <p>Note there could be Course Instances missing for a Semester which is checked for separately in staff_display_missing_courses_for_a_semester()</p>
 * @global array $_SESSION['eduerp_required']
 * @return string HTML
 */
function display_verify_required_courses_for_programme() {
  $values = $_SESSION['eduerp_required'];

  $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value course_code,
        p.field_programme_name_value programme_name,
        d.field_department_name_value department_name,
        co.field_college_name_value faculty_name
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      INNER JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s' AND
        ci.field_semester_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON p.field_department_id_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      LEFT JOIN {program_course_instance} pci
      ON
        ci.nid=pci.course_instance_id AND
        pc.programme_id=pci.programme_id AND
        pc.semester=pci.semester AND
        ci.field_sess_name_value=pci.session
      WHERE pci.programme_id is NULL
      ORDER BY co.field_college_name_value, d.field_department_name_value, p.field_programme_name_value, pc.level, c.field_code_value";
    $result = db_query($sql, $values['session'], $values['semester']); $i = 1;
    if(db_affected_rows($result) > 0 ) {
      $html = "
      <br /><hr /><br />
      List of any Course(s) that are running for <b>". $values['session'] ." Session</b> and <b>Semester ". $values['semester'] ."</b> but have not been Verified/Assigned to a Programme that needs them...<br />
      <table border ='1'>
        <tr>
          <th>#</th>
          <th>Faculty Name</th>
          <th>Department Name</th>
          <th>Programme Name</th>
          <th>Level</th>
          <th>Course</th>
        </tr>";
    	while ($f = db_fetch_object($result)) {
    	  if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
    	  $html .= "
    	  <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
    	    <td>". $i++ ."</td>
    	    <td>". $f->faculty_name ."</td>
    	    <td>". $f->department_name ."</td>
    	    <td>". $f->programme_name ."</td>
    	    <td>". $f->level ."</td>
    	    <td>". $f->course_code ."</td>
    	  </tr>";
    	}
     $html .="
      </table>
      <br />
      Address the above issues here: <a href='createmodifyprog'>Create or Modify a University Programme</a><br />
      (Address the issue in the section \"Verify all Courses needed for a Programme are being run for a Semester\".)
      <br />";
    return $html;
    }
    else
      drupal_set_message("All existing Course are Verified for all Programmes for ". $values['session'] ." Session and Semester ". $values['semester'] ." ");
}


/**
 * Find Grade Weighting etc. for a Course
 *
 * @param int $course_nid 'course' CCK Drupal node nid (or 0)
 * @return array of Field Name => Value
 */
function get_course_grade_weighting($course_nid = 0) {
  $sql = "SELECT number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam FROM course_grade_weightings WHERE course_id = $course_nid LIMIT 1 ";
  $result = db_query($sql);
  if (db_affected_rows($result) <= 0) {
    $sql = "SELECT number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam FROM course_grade_weightings WHERE course_id = 0 LIMIT 1 ";
    $result = db_query($sql);
  }

  $dbFields = array('number_of_ca', 'ca_approved_onebyone', 'max_mark_ca1', 'max_mark_ca2', 'max_mark_ca3', 'max_mark_ca4', 'max_mark_exam');
  while ($r = db_fetch_object($result)) {
    foreach($dbFields as $v)
      $ca[$v] = $r->$v;
  }
  return $ca;
}


/**
 * Set Grade Weighting etc. for a Course
 *
 * @param array $values
 */
function create_course_weighting_entries(&$values) {

  if ($values['course_nid'] != 0) {
    //delete previous enteries
    $sql = "DELETE FROM course_grade_weightings WHERE course_id = %d ";
    db_query($sql, $values['course_nid']);

    $sql = "INSERT INTO course_grade_weightings (course_id, number_of_ca, ca_approved_onebyone, max_mark_ca1, max_mark_ca2, max_mark_ca3, max_mark_ca4, max_mark_exam  ) VALUES
    	(%d, %d, %d, %d, %d, %d, %d, %d) ";
    db_query($sql, $values['course_nid'], $values['caNum'], $values['caApproval'], $values['ca1'], $values['ca2'], $values['ca3'], $values['ca4'], $values['exam_mark']);
  }
}


/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded.
 */
function staff_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'staff'),
  );
}


/**
 * Handles 'staff/missingcourses' menu to Check for Missing Course Instances for a Semester (a Programme needs the Course, but no Lecturer/Timetable assigned)
 *
 * @uses staff_show_check_missing_courses_form()
 * @uses staff_display_missing_courses_for_a_semester()
 * @global array $_SESSION['eduerp_check_missing_courses']
 * @return string HTML
 */
function staff_check_for_missing_courses(){
  global $user;
  ob_start();

  echo '<br /><hr /><br />';
      	echo "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Check for Missing Courses for a Semester</font><br /><br />";
        echo '<hr /><br />';
        echo "<b>Check for Missing Courses for a Semester</b> - Please fill the form as appropriate<br />";

      echo drupal_get_form('staff_show_check_missing_courses_form');
  echo '<br /><hr /><br />';

  if(! isset($_SESSION['eduerp_check_missing_courses'])) {
    $_SESSION['eduerp_check_missing_courses']['session'] = variable_get('eduerp_current_session', '');
    $_SESSION['eduerp_check_missing_courses']['semester'] = variable_get('eduerp_current_semester', 1);
  }
    echo staff_display_missing_courses_for_a_semester($_SESSION['eduerp_check_missing_courses']['session'], $_SESSION['eduerp_check_missing_courses']['semester']);
  return ob_get_clean();
}


/**
 * Form to Select Session/Semester in order to check for Missing Course Instances for a Semester (a Programme needs the Course, but no Lecturer/Timetable assigned)
 *
 * @uses staff_show_check_missing_courses_form_submit()
 * @uses get_all_sessions()
 * @global array $_SESSION['eduerp_check_missing_courses']
 * @return array Drupal Form
 */
function staff_show_check_missing_courses_form() {
  $form['#title'] = 'Check For Missing Courses';
  $form['session'] = array(
    '#type' => 'select',
    '#options' => get_all_sessions(),
    '#required' => TRUE,
    '#title' => 'Session');

  if ($_SESSION['eduerp_check_missing_courses']) $form['session']['#default_value'] = $_SESSION['eduerp_check_missing_courses']['session'];

   $form['semester'] = array(
      '#type' => 'select',
      '#options' => array(1 => '1', 2 => '2'),
      '#title' => 'Semester',
      '#required' => TRUE);
   if ($_SESSION['eduerp_check_missing_courses']) $form['semester']['#default_value'] = $_SESSION['eduerp_check_missing_courses']['semester'];

  $form['submit'] = array(
    '#value' => 'Show Now',
    '#type' => 'submit'
  );

  return $form;
}

/**
 * submit hook for {@link staff_show_check_missing_courses_form()}
 *
 * @global array $_SESSION['eduerp_check_missing_courses']
 */
function staff_show_check_missing_courses_form_submit($form, &$state) {
  $values = $state['values'];

  $_SESSION['eduerp_check_missing_courses']['session']  = $values['session'];
  $_SESSION['eduerp_check_missing_courses']['semester'] = $values['semester'];
}


/**
 * Find Missing Course Instances for a Semester (a Programme needs the Course, but no Lecturer/Timetable assigned)
 *
 * @param string $session
 * @param int $semester
 * @return string HTML
 */
function staff_display_missing_courses_for_a_semester($session, $semester) {
  $sql = "SELECT DISTINCT
        pc.level,
        c.field_code_value,
        p.field_programme_name_value,
        d.field_department_name_value,
        co.field_college_name_value
      FROM {program_course} pc
      INNER JOIN {content_type_course} c ON pc.course_id=c.nid AND pc.historical=0
      LEFT JOIN {content_type_course_instance} ci
      ON
        c.nid=ci.field_course_id_nid AND
        pc.semester=ci.field_semester_name_value AND
        ci.field_sess_name_value='%s'
      INNER JOIN {content_type_program} p ON pc.programme_id=p.nid
      INNER JOIN {content_type_department} d ON c.field_department_nid_nid=d.nid
      INNER JOIN {content_type_college} co ON d.field_college_id_nid=co.nid
      WHERE pc.semester='%s' AND ci.nid IS NULL
      ORDER BY co.field_college_name_value, d.field_department_name_value, c.field_code_value, p.field_programme_name_value, pc.level";
    $result = db_query($sql, $session, $semester);

  if(db_affected_rows($result) <=0) return "<b>List of Missing Courses for ". $semester ." Semester in ". $session ." Session</b><br /><br /><div><font color=green><b>All courses have been setup and assigned a lecturer.</b></font></div>";

  $str = "
  <div id='assigned_courses'>
  <b>List of Missing Courses for ". $semester ." Semester in ". $session ." Session</b><br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Faculty Name</b></th>
      <th><b>Department Name</b></th>
      <th><b>Programme Name</b></th>
      <th><b>Course Code</b></th>
       <th><b>Level</b></th>
    </tr>";$i = 1;

    while($v = db_fetch_object($result)){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $str .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td>". $i++ ."</td>
           <td>". $v->field_college_name_value ."</td>
           <td>". $v->field_department_name_value ."</td>
           <td>". $v->field_programme_name_value ."</td>
           <td>". $v->field_code_value ."</td>
           <td>". $v->level ."</td>
         </tr>";
      }

  $str .= "
  <tr>
    <td colspan=6>&nbsp;</td>
  </tr>
  <tr>
    <td colspan=6><font color=#FF0000><b>The HOD should go to <a href='" . url('staff/createeditcourse') . "'>Create or Modify Courses for a Department</a>, Select a Department and Start Assigning Lecturers to Courses</b></font></td>
  </tr>
  </table>
  </div>";
  return $str;
}


/**
 * Handles 'staff/schoolfeesadmin' menu for School Fees Administration
 *
 * @uses initialize_school_fee_module_tables()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_authorise_scholarship']
 * @global array $_SESSION['eduerp_authorise_instalment']
 * @return string HTML
 */
function staff_school_fees_admin(){
 global $user;
  ob_start();

  unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
  unset($_SESSION['eduerp_authorise_scholarship']); $_SESSION['eduerp_authorise_scholarship'] = null;
  unset($_SESSION['eduerp_authorise_instalment']); $_SESSION['eduerp_authorise_instalment'] = null;

  //initialize tables with default settings
  initialize_school_fee_module_tables();

  $html = '<br /><hr /><br />';
    $html .= "<font size = '1px'><a href = 'semester/'>Semester Administration</a>&nbsp; &raquo; &nbsp;School Fees Administration</font><br /><br />";
    $html .= '<hr /><br />';

    $html .= "Welcome to <b>School Fees Administration</b>. Please click any of the links below to proceed<br />";
    $html .= '<br />';

    $html .= '<b>School Fees Setup</b> - Setup school fees elements<br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/createmodifyfeeitem') . '">Create / Modify School Fee Items</a><br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/createmodifyfeestup') . '">Create / Modify School Fees Setup</a><br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/createmodifschlshptypes') . '">Create / Modify Scholarship Types</a><br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/updatesettings') . '">Update Fee Settings</a><br />';
    $html .= '<br />';

    $html .= '<b>Authorise Scholarship</b> - Enable a Student as being sponsored via Scholarship for the Current Session only.<br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/scholarshippayment') . '">Authorise Scholarship</a><br />';
    $html .= '<br />';

    $html .= '<b>Authorise Instalment Payment</b> - Enable a Student to pay his/her Fees in instalments  for the Current Session only.<br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/authoriseinstalment') . '">Authorise Instalment Payment</a><br />';
    $html .= '<br />';

    $html .= '<b>Pending Invoices</b> - Actions to be performed on Pending Invoices.<br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/removepending') . '">Specify Pending Invoices to Remove</a>';
    $html .= '<br /><br />';

    $html .= '<b>Once Off Invoice</b> - Add a Once Off Invoice for a Student.<br />';
    $html .= '&nbsp;&nbsp;&nbsp;<a href="' . url('staff/add_once_off_invoice') . '">Add a Once Off Invoice</a>';

    $html .= '<br />';
  $html .= '<br /><hr /><br />';

  echo $html;
  return ob_get_clean();//staff_school_fees_setup
}


/**
 * Handles 'staff/createmodifyfeeitem' menu to Create / Modify School Fee Item
 *
 * @uses staff_has_eduerp_role()
 * @uses is_fee_item_existing()
 * @uses staff_school_fees_create_modify_fee_item_form()
 * @uses staff_display_school_fee_items()
 * @return string HTML
 */
function staff_school_fees_create_modify_school_fee_item(){
  global $user;
  ob_start();
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) $isAuthorized = false; else $isAuthorized = true;
  $editMode = (arg(2) && is_fee_item_existing(arg(2))) ? true : false;
  $html = "";
  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;School Fees Setup | Create / Modify School Fee Item</font><br /><br />";
  $html .= '<hr /><br />';

  if($isAuthorized){
    $html .= ($editMode) ? '<br /><br /><b>Modify Fee Item</b> - Please modify the Item as appropriate<br /><br />' : '<br /><br /><b>Create Fee Item</b> - Please fill the form below to create Fee Item<br /><br />';
    $html .= drupal_get_form('staff_school_fees_create_modify_fee_item_form');
  }
  else{
    drupal_set_message(Error_Types(104), 'error');
  }

  $html .= '<br /><hr /><br />';
  if(! $editMode)
    $html .= staff_display_school_fee_items();

  echo $html;
  return ob_get_clean();
}


/**
 * Handles 'staff/createmodifyfeestup' menu to Create / Modify School Fee Setup
 *
 * @uses is_fee_setup_existing()
 * @uses staff_has_eduerp_role()
 * @uses show_fee_setup_page_one_info()
 * @uses show_fee_setup_page_two_info()
 * @uses staff_school_fees_create_modify_fee_setup4_form()
 * @uses show_fee_setup_page_one_info()
 * @uses staff_school_fees_create_modify_fee_setup3_form()
 * @uses show_fee_setup_page_one_info()
 * @uses staff_school_fees_create_modify_fee_setup2_form()
 * @uses staff_school_fees_create_modify_fee_setup1_form()
 * @uses staff_display_school_fee_setup()
 * @global int $_SESSION['eduerp_page']
 * @return string HTML
 */
function staff_school_fees_create_modify_school_fee_setup(){
  global $user, $selFeeItems;
  ob_start();

  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''))) ? true : false;
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) $isAuthorized = false; else $isAuthorized = true;

  $html = "";
  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;School Fees Setup | Create / Modify School Fee Setup</font><br /><br />";
  $html .= '<hr /><br />';

  if((isset($_SESSION['eduerp_page']) && $_SESSION['eduerp_page'] == 4) || (isset($_POST['eduerp_page']) && $_POST['eduerp_page']==4)){
    if($isAuthorized){
      $html .= '<b>School Fee Setup Summary (Step 4 of 4)</b> - Please verify the Fee Setup.<br /><br />';
      $html .= show_fee_setup_page_one_info(4);
      $html .= show_fee_setup_page_two_info();
      $html .= '<br /><hr /><br />';
      $html .= drupal_get_form('staff_school_fees_create_modify_fee_setup4_form');
    }
    else{
      drupal_set_message(Error_Types(104), 'error');
    }
  }
  elseif((isset($_SESSION['eduerp_page']) && $_SESSION['eduerp_page'] == 3) || (isset($_POST['eduerp_page']) && $_POST['eduerp_page']==3)){
    //for page two

    if($isAuthorized){
      $html .= ($editMode) ? '<b>Modify School Fee Setup (Step 3 of 4)</b> - Please modify the Item as appropriate<br /><br />' : '<b>Create School Fee Setup (Step 3 of 4)</b> - Please fill the form below to create Fee Setup<br /><br />';
      $html .= show_fee_setup_page_one_info(3);
      $html .= '<br /><br />';
      $html .= drupal_get_form('staff_school_fees_create_modify_fee_setup3_form');
    }
    else{
      drupal_set_message(Error_Types(104), 'error');
    }
  }
  elseif((isset($_SESSION['eduerp_page']) && $_SESSION['eduerp_page'] == 2) || (isset($_POST['eduerp_page']) && $_POST['eduerp_page']==2)){
    //for page two

    if($isAuthorized){
      $html .= ($editMode) ? '<b>Modify School Fee Setup (Step 2 of 4)</b> - Please modify the Item as appropriate<br /><br />' : '<b>Create School Fee Setup (Step 2 of 4)</b> - Please fill the form below to create Fee Setup<br /><br />';
      $html .= show_fee_setup_page_one_info(2);
      $html .= '<br /><br />';
      $html .= drupal_get_form('staff_school_fees_create_modify_fee_setup2_form');
    }
    else{
      drupal_set_message(Error_Types(104), 'error');
    }
  }
  else{
    //show page one
    if($isAuthorized){
      $html .= ($editMode) ? '<b>Modify School Fee Setup (Step 1 of 4)</b> - Please modify the Item as appropriate<br /><br />' : '<b>Create School Fee Setup (Step 1 of 4)</b> - Please fill the form below to create Fee Setup<br /><br />';
      $html .= "";
      $html .= drupal_get_form('staff_school_fees_create_modify_fee_setup1_form');
    }
    else{
      drupal_set_message(Error_Types(104), 'error');
    }
    $html .= '<br /><hr /><br />';

    if(! $editMode) {
      $html .= staff_display_school_fee_setup();
    }
  }

  echo $html;
  unset($_SESSION['eduerp_page']);
  return ob_get_clean();
}


/**
 * Handles 'staff/scholarshippayment' menu to Authorise Scholarship
 *
 * @uses staff_has_eduerp_role()
 * @uses get_scholarship_payment_student_finder_form()
 * @uses staff_display_scholarship_authorisations()
 * @uses show_student_info()
 * @uses show_school_fees_payment_option()
 * @uses staff_show_pay_school_fees_scholarship_form()
 * @global array $_SESSION['eduerp_authorise_scholarship']
 * @return string HTML
 */
function staff_school_fees_scholarship_payment(){
  global $user;
  ob_start();

  $isAuthorized = staff_has_eduerp_role($user->uid, 0, 0, array('Bursar')) ? true : false;

  $html = "";
  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;Authorise Scholarship</font><br /><br />";
  $html .= '<hr /><br />';
  if(! isset($_SESSION['eduerp_authorise_scholarship']['studentUID'])){
    $html .= "<b>Authorise Scholarship</b> - Please provide either the JAMB or Matrculation Number of the Student.<br />";
    $html .= '<br />';
    if($isAuthorized){
      $html .= drupal_get_form('get_scholarship_payment_student_finder_form');
    }
    else {
      drupal_set_message(Error_Types(104), 'error');
    }

    //show those on scholarship for the current session
    $html .= '<br /><hr /><br />';
    $html .= staff_display_scholarship_authorisations(variable_get('eduerp_current_session', ''));
    //The previous line is way too slow for a sizable system and needs to having paging or be replaced by a Drupal View (preferably)
  }
  else{
    //show summary
    $html .= show_student_info($_SESSION['eduerp_authorise_scholarship']);
    $html .= '<br /><hr /><br />';
    $html .= show_school_fees_payment_option("eduerp_authorise_scholarship", $_SESSION['eduerp_authorise_scholarship']['studentUID'], $_SESSION['eduerp_authorise_scholarship']['programNID'], $_SESSION['eduerp_authorise_scholarship']['levelType'], $_SESSION['eduerp_authorise_scholarship']['nationalityType'], $_SESSION['eduerp_authorise_scholarship']['academic_level']);
    $html .="<br />";
    $html .="<br />";

    $html .= drupal_get_form('staff_show_pay_school_fees_scholarship_form');
  }
  echo $html;
  return ob_get_clean();
}


/**
 * Handles 'staff/authoriseinstalment' menu to Authorise Instalment Payment
 *
 * @uses staff_has_eduerp_role()
 * @uses get_authorise_instalment_student_finder_form()
 * @uses staff_display_instalment_authorisations()
 * @uses show_school_fees_payment_option()
 * @uses staff_show_authorise_instalment_form()
 * @global array $_SESSION['eduerp_authorise_instalment']
 * @return string HTML
 */
function staff_school_fees_authorise_instalment_payment(){
  global $user;
  ob_start();

  $isAuthorized = staff_has_eduerp_role($user->uid, 0, 0, array('Bursar')) ? true : false;

  $html = "";
  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;Authorise Instalment Payment</font><br /><br />";
  $html .= '<hr /><br />';
  if(! isset($_SESSION['eduerp_authorise_instalment']['studentUID'])){

    $html .= "<b>Authorise Instalment Payment - ". variable_get('eduerp_current_session', '') ."</b> - Please provide either the JAMB or Matrculation Number of the Student.<br />";
    $html .= '<br />';
    if($isAuthorized){
      $html .= drupal_get_form('get_authorise_instalment_student_finder_form');
    }
    else {
      drupal_set_message(Error_Types(104), 'error');
    }

    //show those on scholarship for the current session
    $html .= '<br /><hr /><br />';
    $html .= staff_display_instalment_authorisations(variable_get('eduerp_current_session', ''));
  }
  else{
    //show summary
    $html .= show_student_info($_SESSION['eduerp_authorise_instalment']);
    $html .= '<br /><hr /><br />';
    $html .= show_school_fees_payment_option("eduerp_authorise_instalment", $_SESSION['eduerp_authorise_instalment']['studentUID'], $_SESSION['eduerp_authorise_instalment']['programNID'], $_SESSION['eduerp_authorise_instalment']['levelType'], $_SESSION['eduerp_authorise_instalment']['nationalityType'], $_SESSION['eduerp_authorise_instalment']['academic_level']);

    $html .="<br />";
    $html .= drupal_get_form('staff_show_authorise_instalment_form');
  }
  echo $html;
  return ob_get_clean();
}


/**
 * Form to Create / Modify School Fee Item
 *
 * @uses staff_school_fees_create_modify_fee_item_form_validate()
 * @uses staff_school_fees_create_modify_fee_item_form_submit()
 * @uses is_fee_item_existing()
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_fee_item_form() {
  $editMode = (arg(2) && is_fee_item_existing(arg(2))) ? true : false;
  if ($editMode) {
    if (empty($_POST['fee_item'])) {
      $result = db_query('SELECT field_fee_item_value AS name, 	IFNULL(field_is_scholarship_applicable_value, 2) AS is_scholarship_applicable FROM {content_type_school_fee_items} WHERE nid = %d', arg(2));
      $feeItem = db_fetch_object($result);
    }
  }

  $form['#title'] = 'Create / Modify Fee Item';

  $form['fee_item'] = array(
    '#title' => 'Fee Item',
    '#type' => 'textfield',
    '#size' => 25,
    '#required' => true,
   );
  if ($feeItem) $form['fee_item']['#value'] = $feeItem->name;

  $form['is_scholarship_applicable'] = array(
      '#type' => 'select',
      '#options' => array(1 => 'Yes', 2 => 'No'),
      '#title' => 'Scholarship Applies To This Item?',
      '#required' => true,
   );
   if ($feeItem) $form['is_scholarship_applicable']['#value'] = $feeItem->is_scholarship_applicable;

  $form['submit'] = array(
    '#value' => 'Create Fee Item',
    '#type' => 'submit'
  );
  if ($feeItem) $form['submit']['#value'] = 'Update Fee Item';
  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_fee_item_form()}
 *
 * @uses is_fee_item_existing()
 */
function staff_school_fees_create_modify_fee_item_form_validate($form, &$state) {

  $values = $state['values'];
  $editMode = (arg(2) && is_fee_item_existing(arg(2))) ? true : false;
  $itemNID = $editMode ? arg(2) : 0;
  //make sure that no duplicates exist

  // Security checks
  $formFields = array("fee_item");
  foreach($formFields as $v){
    $text = $state['values'][$v];
    if (!empty($text)) {
      if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
        form_set_error($v, Error_Types(168));
      }
    }
  }

  if( is_fee_item_existing($values['fee_item'], true, $itemNID)){
    form_set_error('fee_item', Error_Types(152));
  }
}


/**
 * submit hook for {@link staff_school_fees_create_modify_fee_item_form()} to Create/Update Ubercart Product and 'school_fee_items' CCK
 *
 * @uses is_fee_item_existing()
 * @uses get_fee_item_productNID()
 * @uses is_fee_item_existing_in_uc_products()
 * @uses get_fee_item_uc_products_nid()
 * @uses create_uc_product()
 * @uses get_uc_attribute_info()
 * @uses is_uc_attribute_attached_to_product()
 * @uses attach_uc_attribute_to_product()
 * @uses create_uc_product()
 */
function staff_school_fees_create_modify_fee_item_form_submit($form, &$state) {

  $values = $state['values'];
  $editMode = (arg(2) && is_fee_item_existing(arg(2))) ? true : false;
  $values['fee_item'] = trim($values['fee_item']);

  if($editMode){
    //get the productNID
    $productNID = get_fee_item_productNID(arg(2));

    if($productNID->product_nid == 0){
      if(is_fee_item_existing_in_uc_products($values['fee_item'])){
      	//get the productNID from UC
      	$ucProductNID = get_fee_item_uc_products_nid($values['fee_item']);
      }
      else{
        //create the product
        $ucProductNID = create_uc_product($values['fee_item']);
      }
    }
    else {
      //we might need to update the name in UC Products
      $node = node_load($productNID->product_nid);
      $node->title = $values['fee_item'];
      node_save($node);
      $ucProductNID = $productNID->product_nid;
    }

    //make sure the product is assigned attribute
    //attach attribute to the Product
    $attribute = get_uc_attribute_info("fee_structure");
    $attributeInfo['productNID'] = $ucProductNID;
    $attributeInfo['aid'] = $attribute['aid'];
    $attributeInfo['label'] = "Fee Structure";

    if(! is_uc_attribute_attached_to_product($attributeInfo)){
      attach_uc_attribute_to_product($attributeInfo);
    }

    $node = node_load(arg(2));
    $node->title                              		= $values['fee_item'];
    $node->field_fee_item[0]['value']         		= $values['fee_item'];
    $node->field_is_scholarship_applicable[0]['value']  = $values['is_scholarship_applicable'];

    if(isset($ucProductNID))
       $node->field_uc_product_nid[0]['nid']  		= $ucProductNID;

    node_save($node);
    drupal_set_message($values['fee_item'] . ' School Fee Item was updated!<br />');
    drupal_goto("staff/createmodifyfeeitem");
  }
  else {
    //create the product
    $ucProductNID = create_uc_product($values['fee_item']);

    $node = new stdClass();
    $node->type                             		= 'school_fee_items';
    $node->uid                              		= 1;  // Admin
    $node->status                           		= 1;  // Published
    $node->promote                          		= 0;
    $node->sticky                           		= 0;
    $node->comment                          		= 0;
    $node->title                            		= $values['fee_item'];
    $node->field_fee_item[0]['value']       		= $values['fee_item'];
    $node->field_is_scholarship_applicable[0]['value']  = $values['is_scholarship_applicable'];
    $node->field_uc_product_nid[0]['nid']  		= $ucProductNID;

    node_save($node);
    drupal_set_message($values['fee_item'] .' School Fee Item was created!<br />');
  }
}


/**
 * Find Fee Items
 *
 * @uses get_school_fee_items()
 * @return string HTML
 */
function staff_display_school_fee_items() {
  $html = "
  <div id='assigned_courses'>
  <b>Available School Fee Items</b><br /><br />";

  $feeItems = get_school_fee_items();
  if(! is_array($feeItems) || ! sizeof($feeItems)){
    return $html .= Error_Types(106) .'</div>';
  }

  $html .="
  Please click on a Fee Item name to Edit it.<br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Fee Item</b></th>
      <th><b>Scholarship Applicable</b></th>

    </tr>";$i = 1;

    foreach ($feeItems as $k => $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $html .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td width='30px'>". $i++ ."</td>";

           $html .="
           <td><a  title='Edit' href='" . url("staff/createmodifyfeeitem/$k") ."'>". $v['fee_item'] ."</a></td>
           <td>". $v['is_scholarship_applicable'] ."</td>
         </tr>";
      }

  $html .= "
  </table>
  </div>";
  return $html;
}


/**
 * Return for Display Detailed Fee Structures
 *
 * @uses load_existing_fee_structure()
 * @uses get_school_fee_second_level_setup()
 * @uses get_fee_setup_item_details()
 * @return string HTML
 */
function staff_display_school_fee_setup() {
  $html = "
  <script type='text/javascript' src='../misc/drupal.js'></script>
  <script type='text/javascript' src='../misc/collapse.js'></script>
  <div id='assigned_courses'>
  <b>Available School Fee Setup - ". variable_get('eduerp_current_session', '') ." Academic Session</b><br /><br />";

  $feeSetup = load_existing_fee_structure(false);
  if(! is_array($feeSetup) || ! sizeof($feeSetup))
    return $html .= Error_Types(106) .'</div>';

  $html .="
  Please click on '<b>&raquo;</b>' to Edit the corresponding Block Fee Setup .<br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th>&nbsp;</th>
      <th><b>Fee Structure Name</b></th>
      <th><b>Fee Structure Type</b></th>
      <th><b>Program Name</b></th>
      <th><b>Academic Level Name</b></th>
    </tr>";$i = 1;

    foreach ($feeSetup as $k => $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#E5E5E5";//FFFFFF
        $html .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td width='30px'>". $i++ ."</td>";

           $html .="
           <td><a  href='" . url("staff/createmodifyfeestup/".$v['nid']) ."'><b>&raquo;</b></a></td>
           <td>". $v['fee_structure_name'] ."</td>
           <td>". $v['fee_structure_class_name'] ."</td>
           <td>". $v['program_name'] ."</td>
           <td>". $v['setup_level'] ."</td>
         </tr>";

              if($v['setup_level'] == 'All Levels'){
                $academicLevel = 0;
              }
              else{
                $academicLevel = $v['setup_level'];
              }
              $secondLevel = get_school_fee_second_level_setup(variable_get('eduerp_current_session', ''), $v['program_nid'], $academicLevel, true);
              if(db_affected_rows($secondLevel) > 0){

                    $l=1;
                   while($sl = db_fetch_object($secondLevel)){
                     $html .="
                     <tr>
                       <td colspan=9>";
                     if($v['setup_level'] == 'All Levels'){
                      $level_text = $sl->level_name;
                      if ($level_text == 'Freshman') $level_text .= ' (& 200 DE)';
                      if ($level_text == 'Returning Student') $level_text .= ' (& Spillover)';
                      $html .= "<fieldset class='collapsible collapsed'><legend>". $level_text ." - ". $sl->nationality_name ." - view details</legend>";
                     }
                     else {
                      $html .= "<fieldset class='collapsible collapsed'><legend>". $sl->setup_level ."L - ". $sl->nationality_name ." - view details</legend>";
                     }

                      //show the setup details here
         $html .="
         ";
             //get the fee items
              $details = get_fee_setup_item_details($sl->nid);
              if(db_affected_rows($details) > 0){
                $html .="
                 <table>
                   <tr>
                     <th width='15px'>#</th>
                     <th width='250px'>Fee Item</th>
                     <th>Full Amount</th>
                     <th>First Instalment Amount</th>
                     <th>Second Instalment Amount</th>
                   </tr>";$l=1;
                   while($r = db_fetch_object($details)){
                     $html .="
                     <tr>
                       <td>". $l++ ."</td>
                       <td>". $r->item_name ."</td>
                       <td>". number_format($r->full_amount, 2) ."</td>
                       <td>". number_format($r->instalment1_amount, 2) ."</td>
                       <td>". number_format($r->instalment2_amount, 2) ."</td>
                     </tr>
                     ";

                   }
					$html .="
                     <tr>
                       <td colspan=2 align='right'><b>Total:&nbsp;</b></td>
                       <td><b>". number_format($sl->setup_total_amount, 2) ."</b></td>
                       <td colspan=2>&nbsp;</td>

                     </tr>
                     ";
                 $html .="
               </table>";
             }
             else{
               $html .= Error_Types(106);
             }
             $html .="
             ";

                   $html .="
                        </fieldset>
                      </td>
                   </tr>";
                  }
             }
             else{
               $html .= Error_Types(106);
             }
         $html .="

         ";
      }

  $html .= "
  </table>
  </div>";
  return $html;
}


/**
 * Find Fee Items
 *
 * @return array
 */
function get_school_fee_items() {
  $r = db_query("SELECT nid, field_fee_item_value AS fee_item, IF(field_is_scholarship_applicable_value = 1, 'Yes', 'No') AS is_scholarship_applicable, field_uc_product_nid_nid AS uc_product_nid FROM {content_type_school_fee_items} ORDER BY field_fee_item_value ");
  $feeItems = array();
  while ($f = db_fetch_object($r)){
    $feeItems[$f->nid]['fee_item'] = $f->fee_item;
    $feeItems[$f->nid]['is_scholarship_applicable'] = $f->is_scholarship_applicable;
    $feeItems[$f->nid]['uc_product_nid'] = $f->uc_product_nid;
  }
  return $feeItems;
}


/**
 * Does a UberCart Product exist?
 *
 * @param string $itemName
 * @return bool
 */
function is_fee_item_existing_in_uc_products($itemName){
  $rs = db_query("SELECT ctp.nid FROM {content_type_product} ctp
  	  INNER JOIN {node} n ON ctp.nid=n.nid
  	  WHERE n.title='%s' AND type='product' ", $itemName);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Find a UberCart Product
 *
 * @param string $itemName
 * @return int Drupal node nid for Ubercart Product
 */
function get_fee_item_uc_products_nid($itemName){
  $rs = db_query("SELECT ctp.nid AS nid FROM {content_type_product} ctp
  	  INNER JOIN {node} n ON ctp.nid=n.nid
  	  WHERE n.title='%s' AND type='product' ", $itemName);
  $r = db_fetch_object($rs);

  return $r->nid;
}


/**
 * Find a UberCart Product node nid
 *
 * @param int $itemNID Drupal node nid of 'school_fee_items' CCK
 * @return stdClass
 */
function get_fee_item_productNID($itemNID){
  $rs = db_query("SELECT IFNULL(field_uc_product_nid_nid, 0) product_nid FROM {content_type_school_fee_items} WHERE nid=%d ", $itemNID);
  return db_fetch_object($rs);
}


/**
 * Generate an SKU Name
 *
 * @return string
 */
function gen_fee_product_sku(){
  $rs = db_query("SELECT next_num, sku_name  FROM {gen_fee_item_sku} WHERE id = 1 FOR UPDATE ");

  $r = db_fetch_object($rs);

  $productSKU = $r->sku_name . '-'. $r->next_num;

  db_query("UPDATE {gen_fee_item_sku} SET next_num = next_num + 1 ");
  db_query("COMMIT");

  return $productSKU;
}


/**
 * Create a UberCart Product
 *
 * @uses gen_fee_product_sku()
 * @uses is_uc_attribute_existing()
 * @uses get_uc_attribute_info()
 * @uses create_uc_attribute()
 * @uses get_uc_attribute_info()
 * @uses attach_uc_attribute_to_product()
 * @param string $itemName
 * @param string $amount
 * @param bool $attachAttributes
 * @return int UberCart Product node nid
 */
function create_uc_product($itemName, $amount=0.00, $attachAttributes=true){

  //generate SKU for this product
  $node = new stdClass();
  $node->type = 'product';

  $node->uid 		= 1;
  $node->status 	= 1;
  $node->title 		= $itemName;

  // Set Ubercart variables
  $node->model 		= gen_fee_product_sku(); // the SKU is a required field
  $node->list_price 	= 0.00;
  $node->cost 		= 0.00;
  $node->sell_price 	= $amount;
  $node->default_qty 	= 1;
  $node->pkg_qty 	= 1;

  // Set taxonomy + menu etc if you need to
  $node->taxonomy 	= array();
  $node->menu 		= array();

  node_save($node);  // This will update the $node object with the $node->nid which is important for the next step.

  $productNID = $node->nid;

  //we need to attach attribute fee_structure to the product

  //check if attribute fee_structure exists
  if(is_uc_attribute_existing("fee_structure")){
    $attribute = get_uc_attribute_info("fee_structure");
  }
  else{
    //create the attribute
    $info['name'] = "fee_structure";
    $info['label'] = "Fee Structure";
    create_uc_attribute($info);

    $attribute = get_uc_attribute_info("fee_structure");
  }

  if($attachAttributes){
    //attach attribute to the Product
    $info['productNID'] = $productNID;
    $info['aid'] = $attribute['aid'];
    $info['label'] = "Fee Structure";
    attach_uc_attribute_to_product($info);
  }
  return $productNID;
}


/**
 * Does an UberCart Attribute exist?
 *
 * @param string $attributeName
 * @return bool
 */
function is_uc_attribute_existing($attributeName){
  $rs = db_query("SELECT aid FROM {uc_attributes} WHERE name='%s'", $attributeName);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Is an UberCart Attribute attached to a UberCart Product?
 *
 * @param array $optionInfo
 * @return bool
 */
function is_uc_attribute_attached_to_product(&$optionInfo){
  $rs = db_query("SELECT nid FROM {uc_product_attributes} WHERE nid=%d AND aid=%d AND label='%s' ",$optionInfo['productNID'], $optionInfo['aid'], $optionInfo['label']);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Is an UberCart Option attached to a UberCart Product?
 *
 * @param array $optionInfo
 * @return bool
 */
function is_uc_option_attached_to_product(&$optionInfo){
  $rs = db_query("SELECT oid FROM {uc_product_options} WHERE nid=%d AND oid=%d ", $optionInfo['productNID'], $optionInfo['oid']);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Get a UberCart Attribute
 *
 * @param string $attributeName
 * @return array
 */
function get_uc_attribute_info($attributeName){
  $rs = db_query("SELECT aid, name, label FROM {uc_attributes} WHERE name='%s'", $attributeName);

  if(db_affected_rows($rs) > 0) {
    while($r = db_fetch_object($rs)){
      $attribute['aid'] = $r->aid;
      $attribute['name'] = $r->name;
      $attribute['label'] = $r->label;
    }
    return $attribute;
  }

  return array();
}


/**
 * Create a UberCart Attribute
 *
 * @param array $info
 */
function create_uc_attribute(&$info){
  db_query("INSERT INTO {uc_attributes} (name, label, ordering, required, display) VALUES ('%s', '%s', 0, 1, 1 ) ", $info['name'], $info['label']);
}


/**
 * Create an Option for a UberCart Attribute along with an 'eduerp_product_options' table entry
 *
 * @param int $aid Attribute
 * @param string $name Option Name
 * @param string $price
 * @param int $product_nid UberCart Product
 * @param int $program_nid Drupal node nid for 'program' CCK
 * @param string $level_name
 * @param string $nationality
 * @param string $instalment
 */
function create_uc_attribute_option($aid, $name, $price, $product_nid, $program_nid, $level_name, $nationality, $instalment) {
  db_query("INSERT INTO {uc_attribute_options} (aid, name, price) VALUES (%d, '%s', '%s')", $aid, $name, $price);
  $oid = db_last_insert_id('uc_attribute_options', 'oid');

  db_query("INSERT INTO {eduerp_product_options}
    (product_nid, aid, oid, program_nid, level_name, nationality, instalment) VALUES (%d, %d, %d, %d, '%s', '%s', '%s')",
    $product_nid, $aid, $oid, $program_nid, $level_name, $nationality, $instalment);
}


/**
 * Attach an Option to a UberCart Product
 *
 * @param array $info
 */
function attach_uc_option_to_product(&$info){
  db_query("INSERT INTO {uc_product_options} (nid, oid, price) VALUES (%d, %d, '%s') ", $info['productNID'], $info['oid'], $info['price']);
}


/**
 * Update Price for an Ubercart Option
 *
 * @param string $oid Option
 * @param string $price
 */
function update_uc_attribute_option($oid, $price){
  db_query("UPDATE {uc_attribute_options} SET price = '%s' WHERE oid=%d", $price, $oid);
}


/**
 * Update Price for an Ubercart Product Option
 *
 * @param array $info
 */
function update_uc_product_option(&$info){
  db_query("UPDATE {uc_product_options} SET price = '%s' WHERE nid=%d AND oid=%d ", $info['price'], $info['productNID'], $info['oid']);
}


/**
 * Get UberCart Attribute Option Info
 *
 * @param int $product_nid UberCart Product
 * @param int $program_nid Drupal node nid for 'program' CCK
 * @param string $level_name
 * @param string $nationality
 * @param string $instalment
 * @return array
 */
function get_uc_attribute_option_info($product_nid, $program_nid, $level_name, $nationality, $instalment) {
  $rs = db_query("
    SELECT uco.oid, uco.aid, uco.name, uco.price FROM {eduerp_product_options} epo, {uc_attribute_options} uco
    WHERE epo.product_nid=%d AND epo.program_nid=%d AND epo.level_name='%s' AND epo.nationality='%s' AND epo.instalment='%s' AND epo.oid=uco.oid",
    $product_nid, $program_nid, $level_name, $nationality, $instalment);

  if (db_affected_rows($rs) > 0) {
    while($r = db_fetch_object($rs)){
      $attributeOption['oid'] = $r->oid;
      $attributeOption['aid'] = $r->aid;
      $attributeOption['name'] = $r->name;
      $attributeOption['price'] = $r->price;
    }

    return $attributeOption;
  }

  return array();
}


/**
 * Attach an Attribute to a UberCart Product
 *
 * @param array $info
 */
function attach_uc_attribute_to_product(&$info){
  db_query("INSERT INTO {uc_product_attributes} (nid, aid, label, ordering, required, display) VALUES (%d, %d, '%s', 0, 1, 1 ) ", $info['productNID'], $info['aid'], $info['label']);
}


/**
 * Get a Fee setup for a Session
 *
 * @param string $sessionName
 * @param int $NID Drupal node nid of 'school_fee_item_setup' CCK (or 0)
 * @param bool $bySetupNID
 * @param bool $returnObject
 * @return array of array
 */
function get_school_fee_setup($sessionName, $NID=0, $bySetupNID=true, $returnObject=false) {
  $sql="SELECT ctsfis.nid nid, IFNULL(field_fee_setup_program_nid_value, 0) program_nid, IFNULL(field_fee_student_level_type_nid, 0) level_id,
  	  field_fee_nationality_type_nid nationality_id,
  	  field_fee_structure_type_nid fee_structure_nid,
  	  field_fee_structure_name_value AS fee_structure_name,
  	  field_fee_setup_session_value AS session_name,
  	  field_fee_setup_total_amount_value AS setup_total_amount, field_fee_setup_date_value setup_date,
  	  IFNULL(field_programme_name_value, 'N/A') program_name, field_level_type_value level_name, field_nationality_type_value nationality_name,
  	  field_structure_class_value fee_structure_class_name,
  	  IFNULL(field_fee_setup_level_name_value, 'N/A') setup_level
  	  FROM {content_type_school_fee_item_setup} ctsfis
  	  LEFT JOIN {content_type_program} ctp ON ctsfis.field_fee_setup_program_nid_value=ctp.nid
  	  LEFT JOIN {content_type_school_fee_level_types} ctsflt ON ctsfis.field_fee_student_level_type_nid=ctsflt.nid
  	  INNER JOIN {content_type_school_fee_nationality_types} ctsfnt ON ctsfis.field_fee_nationality_type_nid=ctsfnt.nid
  	  INNER JOIN {content_type_school_fee_structure_classes} ctsfsc ON ctsfis.field_fee_structure_type_nid=ctsfsc.nid ";

  	  $sql .= " WHERE field_fee_setup_session_value='%s' ";
  	  if($bySetupNID){
  	    if($NID !=0) {
  	      $sql .= " AND ctsfis.nid=%d ";
  	    }
  	  }
  	  else {
  	    if($NID !=0) {
  	      $sql .= " AND ctsfis.field_fee_setup_program_nid_value=%d ";
  	    }
  	    else{
  	      $sql .= " AND (ctsfis.field_fee_setup_program_nid_value IS NULL OR ctsfis.field_fee_setup_program_nid_value=%d) ";
  	    }
  	  }

  	  $sql .="
  	  ORDER BY field_fee_structure_type_nid, program_name, field_fee_setup_level_name_value, field_fee_student_level_type_nid, field_fee_nationality_type_nid ";
  $r = db_query($sql, $sessionName, $NID);

  if($returnObject) return $r;

  $feeSetup = array();
  $SQLheaders = array('nid', 'program_nid', 'level_id',  'nationality_id', 'fee_structure_nid',  'session_name',
  	   'setup_total_amount', 'setup_date', 'program_name', 'level_name',  'nationality_name', 'fee_structure_name',
  	   'fee_structure_class_name', 'setup_level');
  while ($f = db_fetch_object($r)){
    foreach($SQLheaders as $v){

      if($bySetupNID){
        $feeSetup[$f->nid][$v] = $f->$v;
      }
      else{
        $feeSetup[$f->program_nid][$v] = $f->$v;
      }
    }
  }
  return $feeSetup;
}


/**
 * Get a Fee second level setup for a Session
 *
 * @param string $sessionName
 * @param int $programNID Drupal node nid of 'program' CCK
 * @param string $academicLevel
 * @param bool $returnObject
 * @return array of array
 */
function get_school_fee_second_level_setup($sessionName, $programNID, $academicLevel, $returnObject=false) {
  $academicLevel = ($academicLevel == 'N/A') ? 0 : $academicLevel;
  $sql="SELECT ctsfis.nid nid, IFNULL(field_fee_setup_program_nid_value, 0) program_nid, IFNULL(field_fee_student_level_type_nid, 0) level_id,
  	  field_fee_nationality_type_nid nationality_id,
  	  field_fee_structure_type_nid fee_structure_nid,
  	  field_fee_structure_name_value AS fee_structure_name,
  	  field_fee_setup_session_value AS session_name,
  	  field_fee_setup_total_amount_value AS setup_total_amount, field_fee_setup_date_value setup_date,
  	  IFNULL(field_programme_name_value, 'N/A') program_name, field_level_type_value level_name, field_nationality_type_value nationality_name,
  	  field_structure_class_value fee_structure_class_name,
  	  IFNULL(field_fee_setup_level_name_value, 'N/A') setup_level
  	  FROM {content_type_school_fee_item_setup} ctsfis
  	  LEFT JOIN {content_type_program} ctp ON ctsfis.field_fee_setup_program_nid_value=ctp.nid
  	  LEFT JOIN {content_type_school_fee_level_types} ctsflt ON ctsfis.field_fee_student_level_type_nid=ctsflt.nid
  	  INNER JOIN {content_type_school_fee_nationality_types} ctsfnt ON ctsfis.field_fee_nationality_type_nid=ctsfnt.nid
  	  INNER JOIN {content_type_school_fee_structure_classes} ctsfsc ON ctsfis.field_fee_structure_type_nid=ctsfsc.nid
  	  WHERE field_fee_setup_session_value='%s' AND (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=%d) AND (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value='%s') ";

  	  $sql .="
  	  ORDER BY field_fee_structure_type_nid, program_name, field_fee_student_level_type_nid, field_fee_nationality_type_nid ";
  $r = db_query($sql, $sessionName, $programNID, $academicLevel);

  if($returnObject) return $r;

  $feeSetup = array();
  $SQLheaders = array('nid', 'program_nid', 'level_id',  'nationality_id', 'fee_structure_nid',  'session_name',
  	   'setup_total_amount', 'setup_date', 'program_name', 'level_name',  'nationality_name', 'fee_structure_name',
  	   'fee_structure_class_name', 'setup_level');
  while ($f = db_fetch_object($r)){
    foreach($SQLheaders as $v){
        $feeSetup[$f->nid][$v] = $f->$v;
    }
  }
  return $feeSetup;
}


/**
 * Does a Fee Item exist?
 *
 * @param string $item
 * @param bool $byName
 * @param int $forEditNID Drupal node nid of 'school_fee_items' CCK
 * @return bool
 */
function is_fee_item_existing($item, $byName=false, $forEditNID=0){
  $sql = "SELECT nid, field_fee_item_value AS fee_item FROM {content_type_school_fee_items} WHERE ";
  $sql .= ($byName) ? " field_fee_item_value='%s' " : " nid=%d ";

  if($forEditNID){
    $sql .= " AND nid != $forEditNID";
  }

  $r = db_query($sql, $item);

  if(db_affected_rows($r) > 0) return true;

  return false;
}


/**
 * Does a Fee Setup exist?
 *
 * @param string $item
 * @param string $sessionName
 * @param string $levelName
 * @return bool
 */
function is_fee_setup_existing($item, $sessionName, $levelName='-1'){
  //first update all null values
  $sql = "UPDATE content_type_school_fee_item_setup SET field_fee_setup_program_nid_value = 0 WHERE field_fee_setup_program_nid_value IS NULL ";
  db_query($sql);

  $sql = "UPDATE content_type_school_fee_item_setup SET field_fee_setup_level_name_value = 0 WHERE field_fee_setup_level_name_value IS NULL ";
  db_query($sql);

  $sql = "UPDATE content_type_school_fee_item_setup SET field_fee_student_level_type_nid = 0 WHERE field_fee_student_level_type_nid IS NULL ";
  db_query($sql);

  $sql = "SELECT nid FROM {content_type_school_fee_item_setup} WHERE nid=%d AND field_fee_setup_session_value='%s' ";

  if($levelName != '-1') $sql .= " AND (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value='%s' ) ";

  $r = db_query($sql, $item, $sessionName, $levelName);

  if(db_affected_rows($r) > 0) return true;

  return false;
}


/**
 * Does a Fee Setup combination exist?
 *
 * @param int $programNID Drupal node nid of 'program' CCK
 * @param string $sessionName
 * @param string $levelName
 * @return bool
 */
function is_fee_setup_combination_existing($programNID, $sessionName, $levelName){
  //first update all null values
  $sql = "UPDATE content_type_school_fee_item_setup SET field_fee_setup_program_nid_value = 0 WHERE field_fee_setup_program_nid_value IS NULL ";
  db_query($sql);

  $sql = "UPDATE content_type_school_fee_item_setup SET field_fee_setup_level_name_value = 0 WHERE field_fee_setup_level_name_value IS NULL ";
  db_query($sql);

  $sql = "SELECT nid FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=%d) AND
  field_fee_setup_session_value='%s'  AND
  (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value='%s' ) ";

  $r = db_query($sql, $programNID, $sessionName, $levelName);

  if(db_affected_rows($r) > 0) return true;

  return false;
}


/**
 * Initialise School Fee Module Tables
 *
 * <p>The following tables need to be populated...</p>
 * <p>content_type_school_fee_level_types</p>
 * <p>content_type_school_fee_nationality_types</p>
 * <p>content_type_school_fee_payment_status</p>
 * <p>content_type_school_fee_payment_types</p>
 * <p>content_type_school_fee_settings</p>
 * <p>content_type_school_fee_structure_classes</p>
 * <p>content_type_schoo_fee_payment_sponsors</p>
 * <p>And "Late Registration Charges" UberCart Product is created.</p>
 * @uses create_uc_product()
 */
function initialize_school_fee_module_tables(){
  //make sure that the table is not empty
  $rs = db_query('SELECT nid FROM {content_type_school_fee_level_types}');
  if(db_affected_rows($rs) <= 0){
    $items = array('Freshman', 'Returning Student');

    foreach($items as $v){
      $node = new stdClass();
      $node->type                             		= 'school_fee_level_types';
      $node->uid                              		= 1;  // Admin
      $node->status                           		= 1;  // Published
      $node->promote                          		= 0;
      $node->sticky                           		= 0;
      $node->comment                          		= 0;
      $node->title                            		= $v;
      $node->field_level_type[0]['value']        	= $v;

      node_save($node);
    }
  }

  //make sure that the table is not empty
  $rs = db_query('SELECT nid FROM {content_type_school_fee_nationality_types}');
  if(db_affected_rows($rs) <= 0){
    $items = array('Local', 'International');
    foreach($items as $v){
      $node = new stdClass();
      $node->type                             		= 'school_fee_nationality_types';
      $node->uid                              		= 1;  // Admin
      $node->status                           		= 1;  // Published
      $node->promote                          		= 0;
      $node->sticky                           		= 0;
      $node->comment                          		= 0;
      $node->title                            		= $v;
      $node->field_nationality_type[0]['value']        	= $v;

      node_save($node);
    }
  }

    //make sure that the table is not empty
  $rs = db_query('SELECT nid FROM {content_type_school_fee_settings}');
  if(db_affected_rows($rs) <= 0){
    $items = array(array('name'=>'Activate Second Instalment Payment', 'data'=>'0'), array('name'=>'Last Date For Fee Payment Without Late Registration Charges', 'data'=>'2011-10-01'), array('name'=>'Late Registration Amount', 'data'=>'5000'), array('name'=>'Local Country Name', 'data'=>'156'),);
    foreach($items as $v){
      $node = new stdClass();
      $node->type                             		= 'school_fee_settings';
      $node->uid                              		= 1;  // Admin
      $node->status                           		= 1;  // Published
      $node->promote                          		= 0;
      $node->sticky                           		= 0;
      $node->comment                          		= 0;
      $node->title                            		= $v['name'];
      $node->field_fee_settings_name[0]['value']        = $v['name'];
      $node->field_fee_settings_value[0]['value']       = $v['data'];

      node_save($node);
    }

    //create the product
    create_uc_product('Late Registration Charges', 0.00, false);
  }

  //make sure that the table is not empty
  $rs = db_query('SELECT nid FROM {content_type_school_fee_structure_classes}');
  if(db_affected_rows($rs) <= 0){
    $items = array('General Fee Structure', 'Program Specific Fee Structure');
    foreach($items as $v){
      $node = new stdClass();
      $node->type                             		= 'school_fee_structure_classes';
      $node->uid                              		= 1;  // Admin
      $node->status                           		= 1;  // Published
      $node->promote                          		= 0;
      $node->sticky                           		= 0;
      $node->comment                          		= 0;
      $node->title                            		= $v;
      $node->field_structure_class[0]['value']        	= $v;

      node_save($node);
    }
  }
}


/**
 * Handles 'staff/updatesettings' menu to Update Fee Settings
 *
 * @uses staff_has_eduerp_role()
 * @uses is_fee_setting_existing()
 * @uses staff_school_fees_modify_fee_settings_form()
 * @uses staff_display_school_fee_settings()
 * @return string HTML
 */
function staff_school_fees_update_settings(){
  global $user;
  ob_start();
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) $isAuthorized = false; else $isAuthorized = true;
  $editMode = (arg(2) && is_fee_setting_existing(arg(2))) ? true : false;
  $html = "";
  $html = '<br /><hr /><br />';

  if($editMode) {
    $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/updatesettings') ."'>Global Settings</a>&nbsp; &raquo; &nbsp;Modify Fee Setting</font><br />";
    $html .= '<br /><hr /><br />';
    if($isAuthorized){
      $html .= '<b>Modify Fee Setting</b> - Please modify the Item as appropriate<br /><br />';
      $html .= drupal_get_form('staff_school_fees_modify_fee_settings_form');
    }
    else {
      drupal_set_message(Error_Types(104), 'error');
    }
  }
  else {
    $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;Global Settings</font><br />";
  }
  $html .= '<br /><hr /><br />';

  if(! $editMode)
    $html .= staff_display_school_fee_settings();

  echo $html;
  return ob_get_clean();
}


/**
 * Get Fee Settings
 *
 * @param int $settingsNID Drupal node nid of 'school_fee_settings' CCK (or 0)
 * @return array of array
 */
function get_school_fee_settings($settingsNID=0) {
  if($settingsNID != 0)
    $r = db_query("SELECT nid, field_fee_settings_name_value AS settings_name, field_fee_settings_value_value AS settings_value FROM {content_type_school_fee_settings} WHERE nid=%d  ", $settingsNID);
  else
    $r = db_query("SELECT nid, field_fee_settings_name_value AS settings_name, field_fee_settings_value_value AS settings_value FROM {content_type_school_fee_settings} ORDER BY field_fee_settings_name_value ");

  $feeSettings = array();
  while ($f = db_fetch_object($r)){
    $feeSettings[$f->nid]['settings_name'] = $f->settings_name;
    $feeSettings[$f->nid]['settings_value'] = $f->settings_value;
  }
  return $feeSettings;
}


/**
 * Return HTML to display Fee Settings
 *
 * @uses get_school_fee_settings()
 * @uses get_country_info()
 * @return string HTML
 */
function staff_display_school_fee_settings() {
  $html = "
  <div id='assigned_courses'>
  <b>Available School Fee Settings</b><br /><br />";

  $feeSettings = get_school_fee_settings();
  if(! is_array($feeSettings) || ! sizeof($feeSettings))
    return $html .= Error_Types(106) .'</div>';

  $html .="
  Please click on a Fee Setting name to Edit it.<br />
  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Fee Setting</b></th>
      <th><b>Value</b></th>
    </tr>";$i = 1;

    foreach ($feeSettings as $k => $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $html .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td width='30px'>". $i++ ."</td>
           <td><a  href='" . url("staff/updatesettings/$k") ."'>". $v['settings_name'] ."</a></td>";
           if(trim(strtolower(strtoupper($v['settings_name']))) == 'local country name'){
             //get the country name
             $countryInfo = get_country_info(trim($v['settings_value']));
             $html .="
              <td>". $countryInfo[trim($v['settings_value'])] ."</td>";
           }
           else {
           $html .="

           <td>". $v['settings_value'] ."</td>";
           }

           $html .="

         </tr>";
      }

  $html .= "
  </table>
  </div>";
  return $html;
}


/**
 * Does a Fee Setting exist?
 *
 * @param int $settingsNID Drupal node nid of 'school_fee_settings' CCK
 * @return bool
 */
function is_fee_setting_existing($settingsNID){
  $sql = "SELECT nid FROM {content_type_school_fee_settings} WHERE nid=%d";

  $r = db_query($sql, $settingsNID);

  if(db_affected_rows($r) > 0) return true;

  return false;
}


/**
 * Form to Modify Fee Settings
 *
 * @uses staff_school_fees_modify_fee_settings_form_validate()
 * @uses staff_school_fees_modify_fee_settings_form_submit()
 * @uses is_fee_setting_existing()
 * @uses get_country_info()
 * @return array Drupal Form
 */
function staff_school_fees_modify_fee_settings_form() {
  $editMode = (arg(2) && is_fee_setting_existing(arg(2))) ? true : false;
  if ($editMode) {
    if (empty($_POST['fee_item'])) {
      $result = db_query('SELECT nid, field_fee_settings_name_value AS settings_name, field_fee_settings_value_value AS settings_value FROM {content_type_school_fee_settings} WHERE nid = %d', arg(2));
      $feeSettings = db_fetch_object($result);
    }

    $form['#title'] = 'Create / Modify Fee Item';
    if(trim(strtolower(strtoupper($feeSettings->settings_name))) == 'local country name'){
      $form[$feeSettings->nid] = array(
      '#type' => 'select',
      '#options' => array(''=>'--select one--') + get_country_info(),
      '#title' => $feeSettings->settings_name,
      '#required'  => TRUE,
      '#default_value' => $feeSettings->settings_value,
      );
      if ($feeItem) $form['fee_item']['#value'] = $feeItem->name;
    }
    elseif(trim(strtolower(strtoupper($feeSettings->settings_name))) == 'activate second instalment payment'){
      $form[$feeSettings->nid] = array(
      '#type' => 'select',
      '#options' => array(''=>'--select one--') + array('0'=>'No', '1'=>'Yes'),
      '#title' => $feeSettings->settings_name,
      '#required'  => TRUE,
      '#default_value' => $feeSettings->settings_value,
      );
      if ($feeItem) $form['fee_item']['#value'] = $feeItem->name;
    }
    else{
      $form[$feeSettings->nid] = array(
      '#title' => $feeSettings->settings_name,
      '#type' => 'textfield',
      '#size' => 25,
      '#required' => true,
      '#default_value' => $feeSettings->settings_value,
      );
      if ($feeItem) $form['fee_item']['#value'] = $feeItem->name;
    }

    $form['submit'] = array(
      '#value' => 'Update Fee Settings Item',
      '#type' => 'submit'
    );

   return $form;
 }
}


/**
 * validate hook for {@link staff_school_fees_modify_fee_settings_form()}
 *
 * @uses is_fee_setting_existing()
 * @uses get_school_fee_settings()
 */
function staff_school_fees_modify_fee_settings_form_validate($form, &$state){
  $values = $state['values'];
  //for start date and late reg date make sure they are of type date
  //also if amount then make sure it conforms
  $editMode = (arg(2) && is_fee_setting_existing(arg(2))) ? true : false;
  if($editMode){
    //get the item
    $item = get_school_fee_settings(arg(2));
    if(trim(strtolower(strtoupper($item[arg(2)]['settings_name']))) == 'last date for fee payment without late registration charges'){
      if(! is_Date($values[arg(2)]))
        form_set_error(arg(2), Error_Types(114));
    }
    elseif(! is_numeric($values[arg(2)])) {
    	form_set_error(arg(2), Error_Types(107));
    }

    // Security checks
    $formFields = array(arg(2));
    foreach($formFields as $v){
      $text = $state['values'][$v];
      if (!empty($text)) {
        if (str_replace('&', '&amp;', $text) != htmlspecialchars($text, ENT_COMPAT, 'UTF-8')) { // Also validates UTF-8
          form_set_error($v, Error_Types(168));
        }
      }
    }
  }
  else {
    form_set_error('', Error_Types());
  }
}


/**
 * submit hook for {@link staff_school_fees_modify_fee_settings_form()}
 *
 * @uses get_school_fee_settings()
 * @uses is_uc_late_registration_existing()
 * @uses get_uc_late_registration_info()
 * @uses create_uc_product()
 */
function staff_school_fees_modify_fee_settings_form_submit($form, &$state){
  $values = $state['values'];

  $node = node_load(arg(2));
  $node->field_fee_settings_value[0]['value']  = $values[arg(2)];

  node_save($node);

  $item = get_school_fee_settings(arg(2));
  if(trim(strtolower(strtoupper($item[arg(2)]['settings_name']))) == 'late registration amount'){//late registration amount
    //update late registration product amount
    if(is_uc_late_registration_existing("Late Registration Charges")){
      //update the amount
      $ucLateRegInfo = get_uc_late_registration_info("Late Registration Charges");
      $node = node_load($ucLateRegInfo['product_nid']);
      //$node->title = $values['fee_item'];
      $node->sell_price = $values[arg(2)];
      node_save($node);
    }
    else{
      //create late reg as a uc product
      create_uc_product("Late Registration Charges", $values[arg(2)], false);
    }
  }

  drupal_set_message('Fee Settings was updated!<br />');
  drupal_goto("staff/updatesettings");
}


/**
 * Form to Create/Update Fee Setup (1)
 *
 * @uses staff_school_fees_create_modify_fee_setup1_form_validate()
 * @uses staff_school_fees_create_modify_fee_setup1_form_submit()
 * @uses is_fee_setup_existing()
 * @uses prepare_fee_setup_for_edit()
 * @uses get_fee_structue_types()
 * @uses load_existing_fee_structure()
 * @global array $_SESSION['eduerp_fee_setup']
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_fee_setup1_form() {

  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''))) ? true : false;
  if ($editMode && ! $_SESSION['eduerp_fee_setup']['page_one_assigned']) {
      //prepare the edit data
      prepare_fee_setup_for_edit(arg(2));
      $feeSetup = $_SESSION['eduerp_fee_setup'];
      $_SESSION['eduerp_fee_setup']['page_one_assigned'] = true;
  }

  if(! isset($feeSetup) && isset($_SESSION['eduerp_fee_setup']) && is_array($_SESSION['eduerp_fee_setup']) && sizeof($_SESSION['eduerp_fee_setup']) && empty($_POST['fee_structure_type'])){
    $feeSetup['fee_structure_type'] = $_SESSION['eduerp_fee_setup']['fee_structure_type'];
  }

  $form['#title'] = 'Create / Modify Fee Setup';

  $form['fee_structure_type'] = array(
      '#type' => 'select',
      '#options' => array(''=>'--select one--') + get_fee_structue_types(),
      '#title' => 'Fee Structure Type',
      );
  if ($feeSetup) $form['fee_structure_type']['#value'] = $feeSetup['fee_structure_type'];
  if ($editMode) $form['fee_structure_type']['#options'] = array(''=>'--select one--') + get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type'], true);

  if(! $editMode){
    $form['fee_structure_load_from_existing'] = array(
      '#type' => 'select',
      '#options' => array(''=>'--select one--') + load_existing_fee_structure(),
      '#title' => 'Create From Existing',
      );
  }
    //if ($feeSetup){
    $form['cmdCancel'] = array(
      '#value' => 'Cancel',
      '#type' => 'submit'
    );
  //}

  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_fee_setup1_form()}
 *
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup1_form_validate($form, &$state){
  //make sure that fee items exists first before going to the second page
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
      break;
    case 'continue':
      if(empty($values['fee_structure_type'])){
        form_set_error('fee_structure_type', Error_Types(114));
      }

      $rs = db_query("SELECT nid, field_fee_item_value AS fee_item FROM {content_type_school_fee_items} LIMIT 1 ");
      if(db_affected_rows($rs) <= 0){
        form_set_error('', Error_Types(153));
        return;
      }
      break;
  }
}


/**
 * submit hook for {@link staff_school_fees_create_modify_fee_setup1_form()}
 *
 * @uses is_fee_setup_existing()
 * @uses load_from_existing()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup1_form_submit($form, &$state){

  $_SESSION['eduerp_fee_setup']['page_two_assigned'] = false;

  $values = $state['values'];
  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''))) ? true : false;

  if(isset($_SESSION['eduerp_fee_setup']['fee_structure_type']) && $_SESSION['eduerp_fee_setup']['fee_structure_type'] != $values['fee_structure_type']){
    unset($_SESSION['eduerp_fee_setup']['programme_nid']); // = null;
    unset($_SESSION['eduerp_fee_setup']['academic_level_name']);
  }
  switch(trim(strtolower(strtoupper($values['op'])))){
    case'continue':
      if(! $editMode){
        $_SESSION['eduerp_fee_setup']['fee_structure_type'] = $values['fee_structure_type'];
      }

      //store the data
      $_SESSION['eduerp_page'] = 2;

      //check if create from existing was selected
      if(! empty($values['fee_structure_load_from_existing'])){
        unset($_SESSION['eduerp_fee_setup']);
  		$_SESSION['eduerp_fee_setup'] = null;

  		$_SESSION['eduerp_fee_setup']['fee_structure_type'] = $values['fee_structure_type'];
        load_from_existing($values['fee_structure_load_from_existing']);
      }
      break;
  }
}


/**
 * Form to Create/Update Fee Setup (2)
 *
 * @uses staff_school_fees_create_modify_fee_setup2_form_validate()
 * @uses staff_school_fees_create_modify_fee_setup2_form_submit()
 * @uses is_fee_setup_existing()
 * @uses get_fee_structue_types()
 * @uses get_programmes()
 * @global array $_SESSION['eduerp_fee_setup']
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_fee_setup2_form() {
  global $selFeeItems;
  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''))) ? true : false;

  $form['#title'] = 'Create / Modify Fee Setup Page 2';

  $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);

  if(isset($_SESSION['eduerp_fee_setup']) && ! $_SESSION['eduerp_fee_setup']['page_two_assigned']){
    if(isset($_SESSION['eduerp_fee_setup']['academic_level_name'])) $selFeeItems['academic_level_name'] = $_SESSION['eduerp_fee_setup']['academic_level_name'];
    if(isset($_SESSION['eduerp_fee_setup']['programme_nid'])) $selFeeItems['programme_nid'] = $_SESSION['eduerp_fee_setup']['programme_nid'];
  }
  if(trim(strtolower(strtoupper(substr($feeStructure['name'],0,7)))) == 'program'){
    $form['programme_nid'] = array(
      '#type' => 'select',
      '#options' => array(''=>'---select one---') + get_programmes(0, true),
      '#title' => 'Program Name',

    );
    if($selFeeItems['programme_nid']) $form['programme_nid']['#value'] = $selFeeItems['programme_nid'];
    if ($editMode) $form['programme_nid']['#options'] = array(''=>'--select one--') + get_programmes($_SESSION['eduerp_fee_setup']['programme_nid'], true);
  }

  //make range for levels both 100 - 900 and 1 - 9
  foreach (range(100, 900, 100) as $n) {
    $academic_levels[$n] = $n;
  }
  foreach (range(1, 9) as $n) {
    $academic_levels[$n] = $n;
  }

  $form['academic_level_name'] = array(
      '#type' => 'select',
      '#options' => array(''=>'---All Levels---') + $academic_levels,
      '#title' => 'Academic Level Name',

    );
    if($selFeeItems['academic_level_name']) $form['academic_level_name']['#value'] = $selFeeItems['academic_level_name'];
    if ($editMode && ! $_SESSION['eduerp_fee_setup']['page_two_assigned']) {
      $academic_levels = array();
      if($selFeeItems['academic_level_name'] == 'N/A' || empty($selFeeItems['academic_level_name'])) {
        $selFeeItems['academic_level_name'] = "";
        $academic_levels = array(''=>'--All Levels--');
      }
      else {
        $academic_levels = array($selFeeItems['academic_level_name'] => $selFeeItems['academic_level_name']);
      }

      $form['academic_level_name']['#options'] = $academic_levels; //$selFeeItems['academic_level_name'];
    }

 $_SESSION['eduerp_fee_setup']['page_two_assigned'] = true;
 $form['eduerp_page'] = array(
    '#title' => 'Page',
    '#type' => 'hidden',
    '#value' => 2,
   );

 $form['previous'] = array(
    '#value' => 'Back',
    '#type' => 'submit'
  );
  $form['cmdCancel'] = array(
    '#value' => 'Cancel',
    '#type' => 'submit'
  );

  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_fee_setup2_form()}
 *
 * @uses get_fee_structue_types()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup2_form_validate($form, &$state) {
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){

    case 'continue':
      $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);

      if(trim(strtolower(strtoupper(substr($feeStructure['name'],0,7)))) == 'program'){
       if(empty($values['programme_nid'])){
         $_SESSION['eduerp_page'] = 2;

         form_set_error('programme_nid', Error_Types(114));
        }
      }
      break;
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
    break;
  }
}


/**
 * submit hook for {@link staff_school_fees_create_modify_fee_setup2_form()}
 *
 * @uses is_fee_setup_existing()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup2_form_submit($form, &$state) {
  $values = $state['values'];
  $academicLevels = (! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])   && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A') ? $_SESSION['eduerp_fee_setup']['academic_level_name'] : '0';
  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevels)) ? true : false;

  switch(trim(strtolower(strtoupper($values['op'])))){

    case 'back':
      $_SESSION['eduerp_page'] = 1; unset($_POST['eduerp_page']);
      if((arg(2) || is_numeric(arg(2))))
       	 drupal_goto('staff/createmodifyfeestup/'. arg(2));
       else
         drupal_goto('staff/createmodifyfeestup');
      break;

    case 'continue':
       $_SESSION['eduerp_page'] = 3; unset($_POST['eduerp_page']);
       if(! $editMode){
         if((empty($_SESSION['eduerp_fee_setup']['academic_level_name']) && ! empty($values['academic_level_name'])) || (! empty($_SESSION['eduerp_fee_setup']['academic_level_name']) && empty($values['academic_level_name']))){
           unset($_SESSION['eduerp_fee_setup']['items']); // = null;
           $_SESSION['eduerp_fee_setup']['items']=null;
         }

         $_SESSION['eduerp_fee_setup']['programme_nid'] = isset($values['programme_nid']) ? $values['programme_nid'] : '0';
         $_SESSION['eduerp_fee_setup']['academic_level_name'] = isset($values['academic_level_name']) ? $values['academic_level_name'] : '0';
       }
       if((arg(2) || is_numeric(arg(2))))
       	 drupal_goto('staff/createmodifyfeestup/'. arg(2));
       else
         drupal_goto('staff/createmodifyfeestup');
      break;

    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
     break;
  }
}


/**
 * Form to Create/Update Fee Setup (3)
 *
 * @uses staff_school_fees_create_modify_fee_setup3_form_validate()
 * @uses staff_school_fees_create_modify_fee_setup3_form_submit()
 * @uses is_fee_setup_existing()
 * @uses get_school_fee_items()
 * @uses get_fee_structue_types()
 * @uses get_fee_student_level_types()
 * @uses get_fee_student_nationality_types()
 * @uses get_school_fee_second_level_setup()
 * @uses get_fee_setup_item_details()
 * @global array $_SESSION['eduerp_fee_setup']
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_fee_setup3_form() {
  $academicLevels = (! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])   && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A') ? $_SESSION['eduerp_fee_setup']['academic_level_name'] : '0';
  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevels)) ? true : false;

  //display the list of all available fee items
  $feeItems = get_school_fee_items();
  $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);
  $assignDefault=false;

  $studentLevels = get_fee_student_level_types();
  $studentNationalities = get_fee_student_nationality_types();

  if($editMode && ! $_SESSION['eduerp_fee_setup']['page_three_assigned']){//isset($_POST[$k."txt"]
    unset($_SESSION['eduerp_fee_setup']['items']); $_SESSION['eduerp_fee_setup']['items']=null;

    $feeSetup = get_school_fee_second_level_setup(variable_get('eduerp_current_session', ''), $_SESSION['eduerp_fee_setup']['programme_nid'], $_SESSION['eduerp_fee_setup']['academic_level_name'], true);
    while($p = db_fetch_object($feeSetup)){//four records are expected

      $feeSetupDetails = get_fee_setup_item_details($p->nid); //$feeSetupDetails = get_fee_setup_item_details(arg(2));
      while($r = db_fetch_object($feeSetupDetails)){
        if(! empty($_SESSION['eduerp_fee_setup']['academic_level_name']) && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A'){
          $p->level_id = "00";
        }
        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-full_amount'] = substr($r->full_amount, 0, -3);

        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-instalment1_amount'] = ($r->instalment1_amount != 0) ? substr($r->instalment1_amount, 0, -3) : 'N/A';
        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-instalment2_amount'] = ($r->instalment2_amount != 0) ? substr($r->instalment2_amount, 0, -3) : 'N/A';
      }
    }

    $_SESSION['eduerp_fee_setup']['page_three_assigned'] = true;
  }
  $frameNum="Four (4)";
  if(! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])  && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A'){
    $studentLevels = array();
    $studentLevels = array("00"=> $_SESSION['eduerp_fee_setup']['academic_level_name'] . " Level");
    $frameNum="Two (2)";
  }
    foreach($studentLevels as $slID => $slName){
      foreach($studentNationalities as $snID => $snName){

        foreach($feeItems as $k => $v) {
          if(! isset($_POST[$slID ."-". $snID ."-". $k. '-full_amount']) && isset($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'])){
            $assignDefault=true;
            $selFeeItems[$slID ."-". $snID ."-". $k .'-full_amount'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k  .'-full_amount'];
          }

          if(! isset($_POST[$slID ."-". $snID ."-". $k .'-instalment1_amount']) && isset($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'])){
            $assignDefault=true;
            $selFeeItems[$slID ."-". $snID ."-". $k .'-instalment1_amount'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'];
          }

          if(! isset($_POST[$slID ."-". $snID ."-". $k .'-instalment2_amount']) && isset($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'])){
            $assignDefault=true;
            $selFeeItems[$slID ."-". $snID ."-". $k .'-instalment2_amount'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'];
          }
        }
      }
    }

  if($assignDefault){
    if(isset($_SESSION['eduerp_fee_setup']['programme_nid'])){
      $selFeeItems['programme_nid'] = $_SESSION['eduerp_fee_setup']['programme_nid'];
    }

    if(isset($_SESSION['eduerp_fee_setup']['fee_structure_name'])){
      $feeSetupDefault['fee_structure_name'] = $_SESSION['eduerp_fee_setup']['fee_structure_name'];
    }
  }

  $form['#title'] = 'Create / Modify Fee Setup Page3';

  $form['item'] = array(
    '#value' => "Below is the list of ". $frameNum ." Groups of Fees for the selected Fee Structure Type and all available Fee Items. Kindly enter amounts for those associated with the fees you are creating.<br />
      <b>Note:</b><br />
      1. All Fee Items having 'N/A' as Amount will not be included.<br />
      2. You MUST enter Amounts for at least one Fee Item in a given Group.<br />
      3. Any non-zero value in 'First Instalment' activates instalment payment for such an item.<br />
      4. If First Instalment is specified then (Full Amount - First Instalment = Second Instalment) is assumed.",
    '#type' => 'item',
   );

    foreach($studentLevels as $slID => $slName){
      foreach($studentNationalities as $snID => $snName){
        $level_text = $slName;
        if ($level_text == 'Freshman') $level_text .= ' (& 200 DE)';
        if ($level_text == 'Returning Student') $level_text .= ' (& Spillover)';

	  $form["extra".$slID.$snID] = array(
	    '#type' => 'fieldset',
      '#title' => $level_text .' - '. $snName .' - ' . 'Available Fee Items',
	    '#collapsed' => false,
	    '#collapsible' => TRUE);
	  $form["extra".$slID . $snID]["fee_item_header-".$slID."-".$snID] = array(
	    '#type' => 'item',
	    '#value' => '<b>Fee Item</b>',
	    '#size' => 20,
	    '#prefix' => "<table border=1><tr><td width='50px;'>#</td><td width='250px;'>",
	    '#suffix' => '</td>');

	    $form["extra".$slID . $snID]["fee_full_amount_header-". $slID ."-". $snID] = array(
	    '#type' => 'item',
	    '#value' => '<b>Full Amount</b>',
	    '#size' => 20,
	    '#prefix' => '<td>',
	    '#suffix' => '</td>');

	    $form["extra".$slID . $snID]["fee_instalment1_amount_header-".$slID. "-". $snID] = array(
	    '#type' => 'item',
	    '#value' => '<b>First Instalment Amount (optional)</b>',
	    '#size' => 20,
	    '#prefix' => '<td>',
	    '#suffix' => '</td></tr>');
	    $i=1;
	    foreach($feeItems as $k => $v) {
	      $form["extra".$slID . $snID][$slID ."-". $snID. "-". $k. "-lbl"] = array(
		'#type' => 'item',
		'#value' => $v['fee_item'],
		'#prefix' => "<tr><td>". $i++ ."</td><td width='250px;'>",
		'#suffix' => '</td>');
	      $form["extra".$slID . $snID][$slID ."-". $snID ."-". $k. "-full_amount"] = array(
		'#type' => 'textfield',
		'#default_value' => 'N/A',
		'#size' => 10,
		'#prefix' => '<td>',
		'#suffix' => '</td>');
	      if ($selFeeItems[$slID. "-" .$snID ."-". $k .'-full_amount']) $form["extra".$slID . $snID][$slID ."-". $snID ."-". $k .'-full_amount']['#value'] = $selFeeItems[$slID ."-". $snID ."-". $k .'-full_amount'];

	      $form['extra'.$slID.$snID][$slID ."-". $snID ."-". $k .'-instalment1_amount'] = array(
		'#type' => 'textfield',
		'#default_value' => 'N/A',
		'#size' => 10,
		'#prefix' => '<td>',
		'#suffix' => '</td></tr>');
	      if ($selFeeItems[$slID ."-". $snID ."-". $k .'-instalment1_amount']) $form['extra'.$slID . $snID][$slID ."-". $snID ."-". $k .'-instalment1_amount']['#value'] = $selFeeItems[$slID ."-". $snID ."-". $k .'-instalment1_amount'];
	    }

	    $form['extra'.$slID.$snID]['sess1'] = array(
        '#type' => 'item',
	    '#value' => '&nbsp;', //variable_get('eduerp_current_session', ''),
	    '#prefix' => "<tr><td colspan='4'>",
	    '#suffix' => '</td></tr></table>',
	    '#size' => 15);
      }
    }

  $form['eduerp_page'] = array(
    '#title' => 'Page',
    '#type' => 'hidden',
    '#value' => 3,
   );

  $form['previous'] = array(
    '#value' => 'Back',
    '#type' => 'submit'
  );
  $form['cmdCancel'] = array(
    '#value' => 'Cancel',
    '#type' => 'submit'
  );

  $form['submit'] = array(
    '#value' => 'Continue',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_fee_setup3_form()}
 *
 * @uses is_fee_setup_existing()
 * @uses get_school_fee_items()
 * @uses get_fee_structue_types()
 * @uses get_fee_student_level_types()
 * @uses get_fee_student_nationality_types()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup3_form_validate($form, &$state) {
  $academicLevels = (! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])   && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A') ? $_SESSION['eduerp_fee_setup']['academic_level_name'] : '0';
  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevels)) ? true : false;

  $values = $state['values'];

  $feeItems = get_school_fee_items();
  $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);
  $studentLevels = get_fee_student_level_types();
  $studentNationalities = get_fee_student_nationality_types();

  $totalAmount = 0;

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
      break;

    case 'continue':
    $frameNum="Four (4)";
    if(! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])  && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A'){
      $studentLevels = array();
      $studentLevels = array("00"=> $_SESSION['eduerp_fee_setup']['academic_level_name'] . " Level");
      $frameNum="Two (2)";
    }
      foreach($studentLevels as $slID => $slName){
        foreach($studentNationalities as $snID => $snName){
           foreach($feeItems as $k => $v) {
             $famount = 0;
             $iamount = 0;

             if((empty($values[$slID ."-". $snID ."-". $k .'-full_amount']) || ! preg_match("/^[0-9]{1,9}$/", $values[$slID ."-". $snID ."-". $k .'-full_amount'])) && trim($values[$slID ."-". $snID ."-". $k .'-full_amount']) != 'N/A'){
               form_set_error($slID ."-". $snID ."-". $k .'-full_amount', Error_Types(107));
             }
             else{
               $famount = $values[$slID ."-". $snID ."-". $k .'-full_amount'];
             }

             if((empty($values[$slID ."-". $snID ."-". $k .'-instalment1_amount']) || ! preg_match("/^[0-9]{1,9}$/", $values[$slID ."-". $snID ."-". $k .'-instalment1_amount'])) && trim($values[$slID ."-". $snID ."-". $k .'-instalment1_amount']) != 'N/A'){
               form_set_error($slID ."-". $snID ."-". $k .'-instalment1_amount', Error_Types(107));
             }
             else{
               $iamount = $values[$slID ."-". $snID ."-". $k .'-instalment1_amount'];
             }

             //make sure for every first instalment specified there is a corresponding full amount
             if(is_numeric($iamount) && ! is_numeric($famount)){
               form_set_error($slID ."-". $snID ."-". $k .'-full_amount', Error_Types(165));
             }

             //make sure if first instalment is specified that it is less than total amount
             if(is_numeric($iamount) && is_numeric($famount) && $famount <= $iamount){
               form_set_error($slID ."-". $snID ."-". $k .'-instalment1_amount', Error_Types(164));

             }

             //make sure that value exists for at least one fee item in all groups
             if(is_numeric($famount) && $famount > 0){
              $feeBlock[$slID][$snID] = true;
             }

             if(is_numeric($famount)){
               if(! isset($totalFeeBlock[$slID][$snID])) $totalFeeBlock[$slID][$snID] = 0;
               //get the totals
               $totalFeeBlock[$slID][$snID] += $famount;
             }
           }
        }
      }

      $_SESSION['eduerp_fee_setup']['totalAmount'] = $totalFeeBlock;

      //make sure that amount was entered for at least one Fee Item in each Fee Block
      foreach($studentLevels as $slID => $slName){
        foreach($studentNationalities as $snID => $snName){
          if(! $feeBlock[$slID][$snID]){
            form_set_error('', Error_Types(166));
          }
        }
       }

      $_SESSION['eduerp_fee_setup']['totalAmount'] = $totalFeeBlock;

      //make sure that amount was entered for at least one Fee Item in each Fee Block
      foreach($studentNationalities as $snID => $snName){
          if(! $feeBlock[$slID][$snID]){
            form_set_error('', Error_Types(166));
          }
        }
    break;
  }

  //store the data
    foreach($studentLevels as $slID => $slName){
      foreach($studentNationalities as $snID => $snName){
        foreach($feeItems as $k => $v) {
          if(isset($values[$slID ."-". $snID ."-". $k . '-full_amount'])){// || $values[$k.'txt'] == '0'
            $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] = $values[$slID ."-". $snID ."-". $k .'-full_amount'];
          }
          else {
            $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] = 'N/A';
          }

          if(isset($values[$slID ."-". $snID ."-". $k .'-instalment1_amount'])){// || $values[$k.'txt'] == '0'
            $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'] = $values[$slID ."-". $snID ."-". $k .'-instalment1_amount'];
          }
          else {
            $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'] = 'N/A';
          }

          //store values for instalment2
          if(is_numeric($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount']) && is_numeric($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'])){
            $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] - $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'];
          }
	      else{
	        $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'] = 'N/A';

	      }
        }
      }
    }
}


/**
 * submit hook for {@link staff_school_fees_create_modify_fee_setup3_form()}
 *
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup3_form_submit($form, &$state) {

  $_SESSION['eduerp_fee_setup']['page_two_assigned'] = false;

  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){

    case 'back':
      $_SESSION['eduerp_page'] = 2; unset($_POST['eduerp_page']);
      if((arg(2) || is_numeric(arg(2))))
       	 drupal_goto('staff/createmodifyfeestup/'. arg(2));
       else
         drupal_goto('staff/createmodifyfeestup');
    break;

    case 'continue':
       $_SESSION['eduerp_page'] = 4; unset($_POST['eduerp_page']);
       if((arg(2) || is_numeric(arg(2))))
       	 drupal_goto('staff/createmodifyfeestup/'. arg(2));
       else
         drupal_goto('staff/createmodifyfeestup');
    break;
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
     break;
  }
}


/**
 * Form to Create/Update Fee Setup (4)
 *
 * @uses staff_school_fees_create_modify_fee_setup4_form_validate()
 * @uses staff_school_fees_create_modify_fee_setup4_form_submit()
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_fee_setup4_form() {
  $form['#title'] = 'School Fee Setup Page 4';
  $form['eduerp_page'] = array(
    '#title' => 'Page',
    '#type' => 'hidden',
    '#value' => 4,
   );

  $form['previous'] = array(
    '#value' => 'Back',
    '#type' => 'submit'
  );
  $form['cmdCancel'] = array(
    '#value' => 'Cancel',
    '#type' => 'submit'
  );
  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit'
  );
  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_fee_setup4_form()}
 *
 * @uses is_fee_setup_existing()
 * @uses is_fee_setup_combination_existing()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup4_form_validate($form, &$state) {
   $values = $state['values'];
  //make sure that the combination is not existing
  $programNID = is_numeric($_SESSION['eduerp_fee_setup']['programme_nid']) ? $_SESSION['eduerp_fee_setup']['programme_nid'] : 0;
  $academicLevel = is_numeric($_SESSION['eduerp_fee_setup']['academic_level_name']) ? $_SESSION['eduerp_fee_setup']['academic_level_name'] : 0;

  $editMode = ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevel)) ? true : false;
  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
      break;

    case 'submit':
      if(is_fee_setup_combination_existing($programNID, variable_get('eduerp_current_session', ''), $academicLevel) && ! $editMode){
        form_set_error('submit', Error_Types(167));
        $_SESSION['eduerp_page'] = 4;
      }
  }
}


/**
 * submit hook for {@link staff_school_fees_create_modify_fee_setup4_form()} to Create/Update CCKs 'school_fee_item_setup' & 'school_fee_item_setup_details' and Attach/Update appropriate options with prices to UberCart Products
 *
 * @uses is_uc_attribute_existing()
 * @uses get_uc_attribute_info()
 * @uses create_uc_attribute()
 * @uses get_fee_structue_types()
 * @uses get_fee_student_nationality_types()
 * @uses get_programmes()
 * @uses is_fee_setup_existing()
 * @uses get_fee_setup_item_details()
 * @uses delete_node()
 * @uses get_uc_attribute_option_info()
 * @uses update_uc_attribute_option()
 * @uses create_uc_attribute_option()
 * @uses is_uc_option_attached_to_product()
 * @uses update_uc_product_option()
 * @uses attach_uc_option_to_product()
 * @global array $_SESSION['eduerp_fee_setup']
 * @global array $_SESSION['eduerp_page']
 */
function staff_school_fees_create_modify_fee_setup4_form_submit($form, &$state) {
  global $user;
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))) {
    case 'cancel':
      unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup'] = null;
      unset($_SESSION['eduerp_page']); $_SESSION['eduerp_page']=null;
      drupal_goto('staff/createmodifyfeestup');
    break;

    case 'back':
      $_SESSION['eduerp_page'] = 3; unset($_POST['eduerp_page']);
      if((arg(2) || is_numeric(arg(2))))
        drupal_goto('staff/createmodifyfeestup/'. arg(2));
      else
        drupal_goto('staff/createmodifyfeestup');
    break;

    case 'submit':
      //we need to check if attribute exists if not create it.
      if (is_uc_attribute_existing("fee_structure")) {
        $attribute = get_uc_attribute_info("fee_structure");
      }
      else {
        $info['name'] = "fee_structure";
        $info['label'] = "Fee Structure";
        create_uc_attribute($info);

        $attribute = get_uc_attribute_info("fee_structure");
      }
      if (! is_array($attribute) || ! sizeof($attribute)) {
        //something ugly happened here and we have to quit
        drupal_set_message(Error_Types(177), 'error');
        return;
      }
      $forEdit = false;
      $_SESSION['eduerp_page'] = 4;

      $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);

      $feeItems = get_school_fee_items();
      if (! is_array($feeItems) || ! sizeof($feeItems)) {
        //something ugly happened here and we have to quit
        drupal_set_message(Error_Types(177), 'error');
        return;
      }

      $studentLevels = get_fee_student_level_types();
      if (! is_array($studentLevels) || ! sizeof($studentLevels)) {
        //something ugly happened here and we have to quit
        drupal_set_message(Error_Types(177), 'error');
        return;
      }

      $studentNationalities = get_fee_student_nationality_types();
      if (! is_array($studentNationalities) || ! sizeof($studentNationalities)) {
        //something ugly happened here and we have to quit
        drupal_set_message(Error_Types(177), 'error');
        return;
      }

      //this is where we'll submit the entire fee setup
      $programNID = (isset($_SESSION['eduerp_fee_setup']['programme_nid']) && is_numeric($_SESSION['eduerp_fee_setup']['programme_nid'])) ? $_SESSION['eduerp_fee_setup']['programme_nid'] : 0;
      $academicLevels = (! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])   && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A') ? $_SESSION['eduerp_fee_setup']['academic_level_name'] : '0';

      $programInfo = get_programmes($programNID, true);
      $_SESSION['eduerp_fee_setup']['fee_structure_name'] = ($programNID == 0) ? 'General Fee Structure' : $programInfo[$programNID];

      if ($academicLevels != '0') { //default the array to one entry
        $studentLevels = array();
        $studentLevels['00'] = $academicLevels ." Level";
        $slID2 = '0';
      }

      foreach ($studentLevels as $slID => $slName) {
        foreach ($studentNationalities as $snID => $snName) {
          if ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevels)) {
            //for update
            if (isset($slID2)) $slID3 = $slID2; else $slID3 = $slID;
            //get the node nid
            $rs = db_query("SELECT nid FROM {content_type_school_fee_item_setup}
              WHERE field_fee_nationality_type_nid=%d AND
                (field_fee_student_level_type_nid IS NULL OR field_fee_student_level_type_nid=%d) AND
                (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=%d) AND
                 field_fee_setup_session_value='%s' AND
                (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value='%s') ", $snID, $slID3, $programNID, variable_get('eduerp_current_session', ''), $academicLevels);
            $j = db_fetch_object($rs);

            $node =  node_load($j->nid);
            $node->field_fee_setup_total_amount[0]['value'] = $_SESSION['eduerp_fee_setup']['totalAmount'][$slID][$snID];

            node_save($node);
            $feeSetupNID = $j->nid;
            $forEdit = true;
          }
          else {
            $itmName = $feeStructure['name'] .' - '. $snName .' - '. $slName .' - '. $programNID;

            //for insert
            $node = new stdClass();
            $node->type                                    = 'school_fee_item_setup';
            $node->uid                                     = 1;  // Admin
            $node->status                                  = 1;  // Published
            $node->promote                                 = 0;
            $node->sticky                                  = 0;
            $node->comment                                 = 0;
            $node->title                                   = $itmName; //$feeStructure['name'] .' - '. $snName .' - '. $slName .' - '. $programNID;//$feeStructure['name'] .' - '. $feeNationality['name'] .' - '. $feeLevelType['name'] .' - '. $programNID;
            $node->field_fee_nationality_type[0]['nid']        = $snID; //$_SESSION['eduerp_fee_setup']['fee_student_nationality_type'];
            $node->field_fee_structure_type[0]['nid']          = $_SESSION['eduerp_fee_setup']['fee_structure_type'];
            $node->field_fee_student_level_type[0]['nid']    = $slID; //$_SESSION['eduerp_fee_setup']['fee_student_level_type'];
            $node->field_fee_setup_total_amount[0]['value']    = $_SESSION['eduerp_fee_setup']['totalAmount'][$slID][$snID];
            $node->field_setup_officer[0]['uid']             = $user->uid;
            $node->field_fee_setup_program_nid[0]['value']     = is_numeric($programNID) ? $programNID : 0 ;
            $node->field_fee_structure_name[0]['value']        = $_SESSION['eduerp_fee_setup']['fee_structure_name'];
            $node->field_fee_setup_session[0]['value']         = variable_get('eduerp_current_session', '');
            $node->field_fee_setup_date[0]['value']          = date("Y-m-d H:i:s");
            $node->field_fee_setup_level_name[0]['value']    = $academicLevels;

            node_save($node);
            $feeSetupNID = $node->nid;
          }

          if ((arg(2) || is_numeric(arg(2))) && is_fee_setup_existing(arg(2), variable_get('eduerp_current_session', ''), $academicLevels)) {
            //we need to delete all previous inserts
            $feeSetupDetails = get_fee_setup_item_details($feeSetupNID);
            while ($r = db_fetch_object($feeSetupDetails)) {
              delete_node($r->nid);
            }
          }

          //insert the fee item details
          foreach ($feeItems as $k => $feeItem) {
            if (is_numeric($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount']) && $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] > 0) {

              $itmName = $_SESSION['eduerp_fee_setup']['fee_structure_name'] . ' - ' . $slName . ' - ' . $snName . ' (' . $feeItem['fee_item'];

              //we need to check if attribute options exists else we'll create them
              $ucOptionName = array();
              //construct the names of the option
              $ucOptionName[0]['name'] = $itmName . ' - Full Amount)';
              $ucOptionName[0]['price'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'];
              $ucOptionName[0]['product_nid'] = $feeItem['uc_product_nid'];
              $ucOptionName[0]['program_nid'] = is_numeric($programNID) ? $programNID : 0;
              $ucOptionName[0]['level_name'] = str_replace(' Level', '', $slName);
              $ucOptionName[0]['nationality'] = $snName;
              $ucOptionName[0]['instalment'] = 'Full Amount';

              $ucOptionName[1]['name'] = $itmName . ' - Instalment1)';
              $ucOptionName[1]['price'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'];
              $ucOptionName[1]['product_nid'] = $feeItem['uc_product_nid'];
              $ucOptionName[1]['program_nid'] = is_numeric($programNID) ? $programNID : 0;
              $ucOptionName[1]['level_name'] = str_replace(' Level', '', $slName);
              $ucOptionName[1]['nationality'] = $snName;
              $ucOptionName[1]['instalment'] = 'Instalment1';

              $ucOptionName[2]['name'] = $itmName . ' - Instalment2)';
              $ucOptionName[2]['price'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'];
              $ucOptionName[2]['product_nid'] = $feeItem['uc_product_nid'];
              $ucOptionName[2]['program_nid'] = is_numeric($programNID) ? $programNID : 0;
              $ucOptionName[2]['level_name'] = str_replace(' Level', '', $slName);
              $ucOptionName[2]['nationality'] = $snName;
              $ucOptionName[2]['instalment'] = 'Instalment2';

              foreach ($ucOptionName as $u) {

                if ($attributeOptionInfo = get_uc_attribute_option_info($u['product_nid'], $u['program_nid'], $u['level_name'], $u['nationality'], $u['instalment'])) {
                  update_uc_attribute_option($attributeOptionInfo['oid'], $u['price']);
                }
                else {
                  create_uc_attribute_option($attribute['aid'], $u['name'], $u['price'], $u['product_nid'], $u['program_nid'], $u['level_name'], $u['nationality'], $u['instalment']);
                }

                $attributeOptionInfo = get_uc_attribute_option_info($u['product_nid'], $u['program_nid'], $u['level_name'], $u['nationality'], $u['instalment']);

                if (! is_array($attributeOptionInfo) || ! sizeof($attributeOptionInfo)) {
                  //something ugly happened here and we to quit
                  drupal_set_message(Error_Types(177), 'error');
                  return;
                }

                $productOption = array();
                $productOption['productNID'] = $feeItem['uc_product_nid'];
                $productOption['oid'] = $attributeOptionInfo['oid'];
                $productOption['price'] = $u['price'];

                if (is_uc_option_attached_to_product($productOption)) {
                  update_uc_product_option($productOption);
                }
                else {
                  attach_uc_option_to_product($productOption);
                }
              }

              $node = new stdClass();
              $node->type                                    = 'school_fee_item_setup_details';
              $node->uid                                     = 1;  // Admin
              $node->status                                  = 1;  // Published
              $node->promote                                 = 0;
              $node->sticky                                  = 0;
              $node->comment                                 = 0;
              $node->title                                   = 'Fee Setup Details' .' - '. $k .' - '. $feeSetupNID;
              $node->field_fee_item_fk[0]['nid']             = $k;
              $node->field_fee_item_setup_fk[0]['nid']       = $feeSetupNID;
              $node->field_fee_full_payment_amount[0]['value'] = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'];//$v;
              $node->field_fee_instalment1_amount[0]['value']  = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'];
              $node->field_fee_instalment2_amount[0]['value']  = $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'];

              node_save($node);
            }
          }
        }
      }
      if ($forEdit)
        drupal_set_message('The Fee Setup was updated successfully!');
      else
        drupal_set_message('The Fee Setup was created successfully!');

      unset($_SESSION['eduerp_fee_setup']);
      unset($_SESSION['eduerp_page']); unset($_POST['eduerp_page']);
      drupal_goto('staff/createmodifyfeestup');
    break;
  }
}


/**
 * Get Fee Structure Types
 *
 * @param int $nid Drupal node nid of 'school_fee_structure_classes' CCK (or 0)
 * @param bool $forCombo
 * @return array
 */
function get_fee_structue_types($nid=0, $forCombo=false) {
  $sql = "SELECT nid, field_structure_class_value name FROM {content_type_school_fee_structure_classes}  ";
  if($nid != 0) $sql .= " WHERE nid=%d ";

  $result = db_query($sql, $nid);
  if (db_affected_rows($result) > 0) {

    while ($row = db_fetch_object($result)){
      if($nid != 0 && ! $forCombo){
      	$return['name'] = $row->name;
        $return['nid'] = $row->nid;
        break;
      }
      else{
        $return[$row->nid] = $row->name;
      }
    }
  }
  else
    $return[] = strip_tags(Error_Types(106));

  return $return;
}


/**
 * Get Fee Structure Level Types
 *
 * @param int $nid Drupal node nid of 'school_fee_level_types' CCK (or 0)
 * @param bool $forCombo
 * @return array
 */
function get_fee_student_level_types($nid=0, $forCombo=false) {
  $sql = "SELECT nid, field_level_type_value name FROM {content_type_school_fee_level_types}  ";
  if($nid != 0) $sql .= " WHERE nid=%d ";

  $result = db_query($sql, $nid);

  if (db_affected_rows($result) > 0) {
    while ($row = db_fetch_object($result)){
      if($nid != 0 && ! $forCombo){
      	$return['name'] = $row->name;
        $return['nid'] = $row->nid;
        break;
      }
      else{
        $return[$row->nid] = $row->name;
      }
    }
  }
  else
    $return[] = strip_tags(Error_Types(106));

  return $return;
}


/**
 * Get Fee Structure Nationality Types
 *
 * @param int $nid Drupal node nid of 'school_fee_nationality_types' CCK (or 0)
 * @param bool $forCombo
 * @return array
 */
function get_fee_student_nationality_types($nid=0, $forCombo=false) {
  $sql = "SELECT nid, field_nationality_type_value name FROM {content_type_school_fee_nationality_types}  ";
  if($nid != 0) $sql .= " WHERE nid=%d ";
  $result = db_query($sql, $nid);

  if (db_affected_rows($result) > 0) {
     while ($row = db_fetch_object($result)){
      if($nid != 0 && ! $forCombo){
      	$return['name'] = $row->name;
        $return['nid'] = $row->nid;
        break;
      }
      else{
        $return[$row->nid] = $row->name;

      }
    }
  }
  else
    $return[] = strip_tags(Error_Types(106));

  return $return;
}


/**
 * Return HTML for display of Fee Setup page 1
 *
 * @uses get_fee_structue_types()
 * @uses get_programmes()
 * @param int $pageNum
 * @global array $_SESSION['eduerp_fee_setup']
 * @return string HTML
 */
function show_fee_setup_page_one_info($pageNum){
  if(! isset($_SESSION['eduerp_fee_setup']) || ! sizeof($_SESSION['eduerp_fee_setup']))
    drupal_goto('staff/createmodifyfeestup');

  $feeStructure = get_fee_structue_types($_SESSION['eduerp_fee_setup']['fee_structure_type']);

  $html = "
  <div id='assigned_courses'><br />
  <b>School Fee Setup Info</b><br />";

  $html .="
  <table border=1 > ";
  if($_SESSION['eduerp_fee_setup']['fee_structure_name']){
    $html .="
    <tr>
      <td width='200px;'>Fee Structure Name:</td>
      <td><b>". $_SESSION['eduerp_fee_setup']['fee_structure_name'] ."</b></td>
    </tr>";
  }

  $html .="
    <tr>
      <td width='200px;'>Fee Structure Type:</td>
      <td><b>". $feeStructure['name'] ."</b></td>
    </tr>";
  if($pageNum >= 3){
    if(isset($_SESSION['eduerp_fee_setup']['programme_nid']) && $_SESSION['eduerp_fee_setup']['programme_nid'] != 0){
      $rs = get_programmes($_SESSION['eduerp_fee_setup']['programme_nid']);
      $row = db_fetch_object($rs);
      $html .="
      <tr>
        <td >Program Name:</td>
        <td><b>". $row->programme_name ."</b></td>
      </tr>";
    }

    if(isset($_SESSION['eduerp_fee_setup']['academic_level_name'])){

      $html .="
      <tr>
        <td >Academic Level Name:</td>
        <td><b>". $x = ($_SESSION['eduerp_fee_setup']['academic_level_name']  == 0 ? '--All Levels--' : $_SESSION['eduerp_fee_setup']['academic_level_name'] )."</b></td>
      </tr>";
    }
  }

    $html .="
  </table>
  </div>";

  return $html;
}


/**
 * Return HTML for display of Fee Setup page 2
 *
 * @uses get_school_fee_items()
 * @uses get_fee_student_level_types()
 * @uses get_fee_student_nationality_types()
 * @global array $_SESSION['eduerp_fee_setup']
 * @return string HTML
 */
function show_fee_setup_page_two_info(){
  if(! isset($_SESSION['eduerp_fee_setup']) || ! sizeof($_SESSION['eduerp_fee_setup']))
    drupal_goto('staff/createmodifyfeestup');

  $feeItems = get_school_fee_items();
  $studentLevels = get_fee_student_level_types();
  $studentNationalities = get_fee_student_nationality_types();
  $html ="";
  if(! empty($_SESSION['eduerp_fee_setup']['academic_level_name'])    && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A'){
    $studentLevels = array();
    $studentLevels = array("00"=> $_SESSION['eduerp_fee_setup']['academic_level_name'] . " Level");
    $frameNum="Two (2)";
  }
    foreach($studentLevels as $slID => $slName){
        foreach($studentNationalities as $snID => $snName){
          $html .= "
	  <div id='assigned_courses'><br />
	  <b>". $slName ." - ". $snName ." - List of Selected Fee Items</b><br />";
          $html .="
	  <table border=1 >
	    <tr>
	      <th width='15px;'>#</th>
	      <th width='200px;'>Fee Item</th>
	      <th>Full Amount</th>
	      <th>First Instalment Amount</th>
	      <th>Second Instalment Amount</th>
	    </tr>";
	    $i=1; $totalAmount=0;
          foreach($feeItems as $k => $v) {
            //if(isset($values[$k.'txt']) && $values[$k.'txt'] != 'N/A' && $values[$k.'txt'] > 0 ){
            if(isset($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount']) && $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] != 'N/A' && $_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'] > 0 ){
              $html .="
              <tr>
                <td>". $i++ ."</td>
                <td>". $v['fee_item'] ."</td>
                <td><b>". number_format($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-full_amount'], 2) ."</b></td>
                <td>". ($x = is_numeric($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount']) ? "<b>". number_format($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment1_amount'], 2) ."</b>" : 'N/A') . "</td>
                <td>". ($x = is_numeric($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount']) ? "<b>". number_format($_SESSION['eduerp_fee_setup']['items'][$slID ."-". $snID ."-". $k .'-instalment2_amount'], 2) ."</b>" : 'N/A') . "</td>
              </tr>";

            }
          }

          $html .="
          <tr>
            <td colspan=2 align='right'>Total Fee Amount:&nbsp;</td>
            <td><b>". number_format($_SESSION['eduerp_fee_setup']['totalAmount'][$slID][$snID], 2) ."</b></td>
          </tr>
        </table>
     </div>";
        }
    }
  return $html;
}


/**
 * Get Fee Setup Item Details
 *
 * @param int $setupNID Drupal node nid of 'school_fee_item_setup_details' CCK
 * @return mysqli_result
 */
function get_fee_setup_item_details($setupNID){
  $rs = db_query('SELECT ctsfisd.nid nid, field_uc_product_nid_nid product_nid, field_fee_full_payment_amount_value full_amount, IFNULL(field_fee_instalment1_amount_value, 0) AS instalment1_amount, IFNULL(field_fee_instalment2_amount_value, 0) AS instalment2_amount, field_fee_item_value item_name, field_fee_item_fk_nid item_nid, field_is_scholarship_applicable_value is_scholarship_applicable
  	  FROM {content_type_school_fee_item_setup_details} ctsfisd
  	  INNER JOIN {content_type_school_fee_items} ctsfi ON ctsfisd.field_fee_item_fk_nid=ctsfi.nid
  	  WHERE field_fee_item_setup_fk_nid=%d ', $setupNID);
 return $rs;
}


/**
 * ALAN 20120420 Does not seem to be used, verify and remove
 * @deprecated
 */
function staff_school_fees_test_fee_setup_form() {
    $form['#title'] = 'Test Fee Setup';

    $form['submit'] = array(
      '#value' => 'Test available School Fee Setup for completeness',
      '#type' => 'submit'
    );

   return $form;
}


/**
 * Get Late Registration Info
 *
 * @return array of Name => Value
 */
function get_late_registration_info(){
  $r = db_query("SELECT field_fee_settings_name_value AS settings_name, field_fee_settings_value_value AS settings_value
  	  FROM {content_type_school_fee_settings} WHERE field_fee_settings_name_value='%s' OR field_fee_settings_name_value='%s'", "Last Date For Fee Payment Without Late Registration Charges", "Late Registration Amount");

  while($rs = db_fetch_object($r)){
    //echo $rs->settings_name;
    $name = ($rs->settings_name == 'Last Date For Fee Payment Without Late Registration Charges') ? 'last_date' : 'late_reg_amount';
    $lateRegInfo[$name] = $rs->settings_value;
  }

  return $lateRegInfo;
}


/**
 * Have we reached the Second Instalment Period
 *
 * @return bool
 */
function is_second_instalment_activated(){
  $r = db_query("SELECT field_fee_settings_name_value settings_name, field_fee_settings_value_value settigs_value FROM {content_type_school_fee_settings} WHERE field_fee_settings_name_value='%s'", "activate second instalment payment");

  $rs = db_fetch_object($r);
  if($rs->settigs_value == '1') return true;

  return false;
}


/**
 * Does the Late Registration Product exist?
 *
 * @return bool
 */
function is_uc_late_registration_existing($name){
  $rs = db_query("SELECT p.nid FROM node n
  	  INNER JOIN content_type_product ctp ON n.nid=ctp.nid
  	  INNER JOIN uc_products p ON ctp.nid=p.nid
  	  WHERE n.title='%s' AND n.type='product'", $name);

  if(db_affected_rows($rs) >= 1) return true;

  return false;
}


/**
 * Get UberCart Late Registration Info
 *
 * @return array of Name => Value
 */
function get_uc_late_registration_info($name){
  $rs = db_query("SELECT p.nid, title, sell_price FROM node n
  	  INNER JOIN content_type_product ctp ON n.nid=ctp.nid
  	  INNER JOIN uc_products p ON ctp.nid=p.nid
  	  WHERE n.title='%s' AND n.type='product'", $name);

  if(db_affected_rows($rs) >= 1) {
    $r = db_fetch_object($rs);

    $info['product_nid'] = $r->nid;
    $info['name'] = $r->title;
    $info['amount'] = $r->sell_price;
    return $info;
  }
  return 0;
}


/**
 * ALAN 20120420 Does not seem to be used, verify and remove
 * @deprecated
 */
function staff_school_fees_test_fee_setup_form_submit($form, &$state) {

  $val = is_fee_setup_correct();

  if($val == 1)
    drupal_set_message('Test was successful! School Fee Setup is OK.');
  else
    form_set_error('', Error_Types($val));
}


/**
 * ALAN 20120420 Does not seem to be used, verify and remove
 * @deprecated
 */
function is_fee_setup_correct(){
  //get all fee item setup
  $sql = "SELECT DISTINCT(IFNULL(field_fee_setup_program_nid_value, 0)) program_nid FROM {content_type_school_fee_item_setup} ";
  $rs = db_query($sql);
  if(db_affected_rows($rs) <= 0){
    return 157;
  }

  while($r = db_fetch_object($rs)){
    //check the entries

    //for each, student type must appear twice, nationality must appear twice

    //get student types
    $rs1 = db_query("SELECT nid student_level_type_nid FROM {content_type_school_fee_level_types} ");
    if(db_affected_rows($rs1) <= 0){
      return 158;
    }

    while($r1 = db_fetch_object($rs1)){
      if($r->program_nid <= 0){
    	$rs2 = db_query("SELECT COUNT(nid) num FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value = 0) AND field_fee_student_level_type_nid=%d GROUP BY field_fee_nationality_type_nid ", $r1->student_level_type_nid);
      }
      else{
        $rs2 = db_query("SELECT COUNT(nid) num FROM {content_type_school_fee_item_setup} WHERE field_fee_setup_program_nid_value=%d AND field_fee_student_level_type_nid=%d GROUP BY field_fee_nationality_type_nid ", $r->program_nid, $r1->student_level_type_nid);
      }

      if(db_affected_rows($rs2) < 2){
        return 158;
      }
    }

    //get nationality types
    $rs1 = db_query("SELECT nid nationality_type_nid FROM {content_type_school_fee_nationality_types} ");
    if(db_affected_rows($rs1) <= 0){
      return 158;
    }

    while($r1 = db_fetch_object($rs1)){

      if($r->program_nid <= 0){
    	$rs2 = db_query("SELECT COUNT(nid) num FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value =0) AND field_fee_nationality_type_nid=%d GROUP BY field_fee_student_level_type_nid ", $r1->nationality_type_nid);
      }
      else{
        $rs2 = db_query("SELECT COUNT(nid) num FROM {content_type_school_fee_item_setup} WHERE field_fee_setup_program_nid_value=%d AND field_fee_nationality_type_nid=%d GROUP BY field_fee_student_level_type_nid  ", $r->program_nid, $r1->nationality_type_nid);
      }

      if(db_affected_rows($rs2) < 2){
        //form_set_error('', Error_Types(158));
        return 158;
      }
    }
  }

  return 1;
}


/**
 * Prepare Fee Setup for Edit
 *
 * @uses get_school_fee_setup()
 * @global array $_SESSION['eduerp_fee_setup']
 */
function prepare_fee_setup_for_edit($setupNID){
  unset($_SESSION['eduerp_fee_setup']); $_SESSION['eduerp_fee_setup']=null;

  $feeSetup = get_school_fee_setup(variable_get('eduerp_current_session', ''), $setupNID, true);
  //tbl=>formfield
  $elements = array("fee_structure_nid"=>"fee_structure_type", "level_id"=>"fee_student_level_type",
  "nationality_id"=>"fee_student_nationality_type", "program_nid"=>"programme_nid", "setup_level"=>"academic_level_name");
  foreach($elements as $k => $v){
      $_SESSION['eduerp_fee_setup'][$v] = $feeSetup[$setupNID][$k];
  }
}


/**
 * Form to find Student to give Scholarship
 *
 * @uses get_scholarship_payment_student_finder_form_validate()
 * @uses get_scholarship_payment_student_finder_form_submit()
 * @return array Drupal Form
 */
function get_scholarship_payment_student_finder_form(){
  $form['#title'] = 'Student Finder';
  $form['mat_number'] = array(
      '#title' => 'Matriculation / JAMB Number',
      '#type' => 'textfield',
      '#size' => 40,
      '#required' => TRUE
    );

  $form['submit'] = array(
    '#value' => 'Search Now',
    '#type' => 'submit'
  );

  return $form;
}


function get_scholarship_payment_student_finder_form_validate($form, &$state){
}


/**
 * submit hook for {@link get_scholarship_payment_student_finder_form()}
 *
 * @uses ini_student_fee_profile()
 */
function get_scholarship_payment_student_finder_form_submit($form, &$state){
  global $EDUERPstudentInitiated;
  $values = $state['values'];

  $returnURL = 'staff/scholarshippayment';
  ini_student_fee_profile($values['mat_number'], 'eduerp_authorise_scholarship', $returnURL);
}


/**
 * Helper function for get_authorise_instalment_student_finder_form_submit() and get_scholarship_payment_student_finder_form_submit()
 *
 * @uses get_student_info_by_jamb_number()
 * @uses is_scholarship_authorisation_existing()
 * @uses is_instalment_authorisation_existing()
 * @uses fees_ini_student_profile()
 */
function ini_student_fee_profile($studentNumber, $varName, $returnURL){
  global $EDUERPstudentInitiated;
  if($EDUERPstudentInitiated)
     $studentInfo = user_load($EDUERPstudentInitiated);
  else
    $studentInfo = user_load(array('name'=>$studentNumber));

  $found = false;
  if( ! $studentInfo) {
    //check if it a valid jamb number
    $studInfo = get_student_info_by_jamb_number($studentNumber);
    if(! db_affected_rows($studInfo) > 0) {
      form_set_error('mat_number', Error_Types(125));

      unset($_SESSION[$varName]); $_SESSION[$varName]=null;
      drupal_goto($returnURL);
    }
    else {
      //ok! the jamb number is valid!
      $studentInfo = db_fetch_object($studInfo);
      $found = true;
    }
  }
  else {
    //a student with correct mat num
    $found = true;
  }

  if($found) {
      $student_profile = new UserProfile($studentInfo->uid);

      if($varName == "eduerp_authorise_scholarship"){
      	//make sure he is not already enabled for instalment
      	if(is_instalment_authorisation_existing($studentInfo->uid, variable_get('eduerp_current_session', ''))){
	      drupal_set_message('Instalment Authorisation for the Student already exists', 'error');
	      return;
	    }

        //specific checks for scholarships
        if(is_scholarship_authorisation_existing($studentInfo->uid, variable_get('eduerp_current_session', ''))){
	      drupal_set_message('Scholarship Authorisation for the Student already exists', 'error');
	      return;
	    }
      }

      if($varName == "eduerp_authorise_instalment"){
      	//specific checks for scholarships
        if(is_scholarship_authorisation_existing($studentInfo->uid, variable_get('eduerp_current_session', ''))){
	      drupal_set_message('Scholarship Authorisation for the Student already exists');
	      return;
	    }

        //specific checks for instalment payment
        if(is_instalment_authorisation_existing($studentInfo->uid, variable_get('eduerp_current_session', ''))){
	      drupal_set_message('Instalment Authorisation for the Student already exists');
	      return;
	    }

      }
      $studentFeeProfile = fees_ini_student_profile($student_profile->uid);
      if(! is_array($studentFeeProfile) || ! sizeof($studentFeeProfile)){
        drupal_set_message(Error_Types(175), 'error');
        return;
      }

      $_SESSION[$varName] = $studentFeeProfile;
      return ;
  }
}


/**
 * Show Student Info for Instalment and Scholarship
 *
 * @return string HTML
 */
function show_student_info($info){
  $html ="
  <div id='assigned_courses'>
  <table style='width:700px;' border=1>
    <tr>
      <td align='center' colspan=2><b>STUDENT INFO</b></td>
    </tr>
    <tr>
      <td style='width:150px;'>Current Session:</td>
      <td>". variable_get('eduerp_current_session', '') ."</td>
    </tr>
    <tr>
      <td style='width:150px;'>JAMB Number:</td>
      <td>". strtoupper(strtolower($info['jamb_num'])) ."</td>
    </tr>
    <tr>
      <td style='width:150px;'>Matriculation Number:</td>
      <td>". strtoupper(strtolower($info['mat_num'])) ."</td>
    </tr>
    <tr>
      <td style='width:150px;'>Mode of Entry:</td>
      <td>". strtoupper(strtolower($info['mode_of_entry'])) ."</td>
    </tr>
    <tr>
      <td>Full Name:</td>
      <td>". strtoupper(strtolower($info['full_name'])) ."</td>
    </tr>
    <tr>
      <td>Gender:</td>
      <td>". strtoupper(strtolower($info['gender'])) ."</td>
    </tr>";
    if(isset($info['health_status']))
    $html .="
    <tr>
      <td>Health Status:</td>
      <td>". strtoupper(strtolower($info['health_status'])) ."</td>
    </tr>";

    $html .="
    <tr>
      <td>Course Name:</td>
      <td>". strtoupper(strtolower($info['programme_name'])) ."</td>
    </tr>";
    if(isset($info['level_name']))
      $html .= "
      <tr>
        <td>Country Name:</td>
        <td>". strtoupper(strtolower($info['country_name'])) ."</td>
      </tr>

    ";

    $html .="
    <tr>
      <td>Level:</td>
      <td>". strtoupper(strtolower($info['level_name'])) ."</td>
    </tr>
  </table>
  </div>";

  return $html;
}


/**
 * Form to Give a Scholarship
 *
 * @uses staff_show_pay_school_fees_scholarship_form_validate()
 * @uses staff_show_pay_school_fees_scholarship_form_submit()
 * @uses get_scholarship_types()
 * @uses get_scholarship_sponsor_organisations()
 * @return array Drupal Form
 */
function staff_show_pay_school_fees_scholarship_form(){
  $form['#title'] = 'School Fees Scholarship Payment';
  $form['scholarship_type'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + get_scholarship_types(),
    '#title' => 'Scholarship Type*',
  );
  $form['scholarship_sponsor'] = array(
    '#type' => 'select',
    '#options' => array('None'=>'None') + get_scholarship_sponsor_organisations(),
    '#title' => 'Sponsor Organisation (optional)',
  );
   $form['remarks'] = array(
    '#type' => 'textarea',
    '#title' => 'Remarks - Brief details about the Scholarship*',
    '#size' => 255,
  );
   $form['lbl01'] = array(
    '#type' => 'item',
    '#value' => "<font color=#FF0000><b>By clicking 'Authorise Scholarship!' you acknowledge that the student whose details appear above is under FULL Scholarship and that such Scholarship covers the School Fee Amount.</b></font>",
  );
  $form['cmdCancel'] = array(
    '#value' => 'Cancel',
    '#type' => 'submit'
  );
  $form['submit'] = array(
    '#value' => 'Authorise Scholarship!',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * Find Scholarship Sponsor Organisations
 *
 * @return array of Name => Name
 */
function get_scholarship_sponsor_organisations(){
 $rs =db_query("SELECT * FROM {eduerp_states} ORDER BY state_name");
while ($row = db_fetch_object($rs)) $list[$row->state_name] = $row->state_name;
return $list;
}


/**
 * validate hook for {@link staff_show_pay_school_fees_scholarship_form()}
 *
 * @uses is_scholarship_authorisation_existing()
 * @uses is_instalment_authorisation_existing()
 * @global array $_SESSION['eduerp_authorise_scholarship']
 */
function staff_show_pay_school_fees_scholarship_form_validate($form, &$state){
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'authorise scholarship!':

      if(empty($values['remarks'])){
    	form_set_error('remarks', Error_Types(161));
      }
      if(empty($values['scholarship_type'])){
    	form_set_error('scholarship_type', Error_Types(161));
      }

      if(is_scholarship_authorisation_existing($_SESSION['eduerp_authorise_scholarship']['studentUID'], variable_get('eduerp_current_session', ''))){
      	form_set_error('', Error_Types(162));
        return;
      }
      if(is_instalment_authorisation_existing($_SESSION['eduerp_authorise_scholarship']['studentUID'], variable_get('eduerp_current_session', ''))){
      	form_set_error('', Error_Types(163));
        return;
      }
    break;

    case 'cancel':
      unset($_SESSION['eduerp_authorise_scholarship']);
      $_SESSION['eduerp_authorise_scholarship'] = null;
      drupal_goto("staff/scholarshippayment");
    break;
  }
}


/**
 * submit hook for {@link staff_show_pay_school_fees_scholarship_form()}, Create CCK 'school_fee_approved_scholarships'
 *
 * @uses get_scholarship_types()
 * @global array $_SESSION['eduerp_authorise_scholarship']
 */
function staff_show_pay_school_fees_scholarship_form_submit($form, &$state){
  global $user;
  $values = $state['values'];
  $scholarshipTypes = get_scholarship_types($values['scholarship_type'], true);

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'authorise scholarship!':


      $node = new stdClass();
      $node->type                             	= 'school_fee_approved_scholarships';
      $node->uid                              	= 1;  // Admin
      $node->status                           	= 1;  // Published
      $node->promote                          	= 0;
      $node->sticky                           	= 0;
      $node->comment                          	= 0;
      $node->title                            	= 'Authorise Scholarship - '. $_SESSION['eduerp_authorise_scholarship']['studentUID'] .' - '. variable_get('eduerp_current_session', '');
      $node->field_sas_student[0]['uid']       	= $_SESSION['eduerp_authorise_scholarship']['studentUID'];
      $node->field_sas_session_name[0]['value'] = variable_get('eduerp_current_session', '');
      $node->field_scholarship_type[0]['value'] = $scholarshipTypes[$values['scholarship_type']];
      $node->field_scholarship_sponsor[0]['value'] = $values['scholarship_sponsor'];
      $node->field_sas_remarks[0]['value']      = $values['remarks'];
      $node->field_sas_staff[0]['uid']       	= $user->uid;
      $node->field_sas_date[0]['value']     	= date("Y-m-d H:i:s");

      node_save($node);
      drupal_set_message('Scholarship Authorisation was successful!');
      unset($_SESSION['eduerp_authorise_scholarship']); $_SESSION['eduerp_authorise_scholarship'] = null;
      //}
    break;

    case 'cancel':
      unset($_SESSION['eduerp_authorise_scholarship']); $_SESSION['eduerp_authorise_scholarship'] = null;
    break;
  }
}


/**
 * Does this Student have a Scholarship for this Session?
 *
 * @param int $studentUID
 * @param string $sessionName
 * @return bool
 */
function is_scholarship_authorisation_existing($studentUID, $sessionName){
  $rs = db_query("SELECT nid FROM {content_type_school_fee_approved_scholarships} WHERE field_sas_student_uid=%d AND field_sas_session_name_value='%s' ", $studentUID, $sessionName);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Is this Student Authorised for Instalments for this Session
 *
 * @param int $studentUID
 * @param string $sessionName
 * @return bool
 */
function is_instalment_authorisation_existing($studentUID, $sessionName){
  $rs = db_query("SELECT nid FROM {content_type_school_fee_approved_instalments} WHERE field_sai_student_uid=%d AND field_sai_session_name_value='%s' ", $studentUID, $sessionName);

  if(db_affected_rows($rs) > 0) return true;

  return false;
}


/**
 * Get Student Info
 *
 * @param string $jambno
 * @return mysqli_result
 */
function get_student_info_by_jamb_number($jambno){
 $sql ="SELECT nspro.uid uid
   FROM {node} nspro
   INNER JOIN {content_type_student_profile} spro ON nspro.vid=spro.vid
   WHERE nspro.type='student_profile' AND spro.field_profile_jambno_value='%s'  ";
 return $rs = db_query($sql, $jambno);
}


/**
 * Return HTML to Show Student Fee Info
 *
 * @uses fees_ini_student_fee_option()
 * @uses get_programmes()
 * @param string $varName $_SESSION variable
 * @param int $studentUID Drupal uid
 * @param int $programNID Drupal node nid of 'program' CCK
 * @param string $levelType
 * @param string $nationalityType
 * @param string $academicLevel
 * @return string HTML
 */
function show_school_fees_payment_option($varName, $studentUID, $programNID, $levelType, $nationalityType, $academicLevel){
  $feeOption = array();

  $_SESSION[$varName]['more'] = fees_ini_student_fee_option($studentUID, $programNID, $levelType, $nationalityType, $academicLevel, false, true);
  if(! sizeof($_SESSION[$varName]['more'])){
    drupal_set_message(Error_Types(159), 'error');
    return;
  }

  $html = "
  <div id='assigned_courses'><br />
  <script type='text/javascript' src='../misc/drupal.js'></script>
  <script type='text/javascript' src='../misc/collapse.js'></script>
  <b>Matching School Fee Setup - ". variable_get('eduerp_current_session', '') ."</b><br />";

  $html .="
  <table border=1 >
    <tr>
      <td width='200px;'>Fee Structure Name:</td>
      <td><b>". $_SESSION[$varName]['more']['fee_structure_name'] ."</b></td>
    </tr>";

    if(isset($feeOption[$setupNID]['program_nid']) && $feeOption[$setupNID]['program_nid'] != 0){
      $rs = get_programmes($feeOption[$setupNID]['programme_nid'], true);

      $html .="
      <tr>
        <td >Program Name:</td>
        <td><b>". $rs[$feeOption[$setupNID]['program_nid']] ."</b></td>
      </tr>";

    }
	//get the total amount
	$totalAmount = 0;
	foreach($_SESSION[$varName]['more']['fee_item_details'] as $e){
	  $totalAmount += $e['full_amount'];
	}
    $html .="
    <tr>
      <td >Fee Nationality Type:</td>
      <td><b>". $_SESSION[$varName]['more']['nationality_name'] ."</b></td>
    </tr>
    <tr>
      <td >Fee Level Type:</td>
      <td><b>". $_SESSION[$varName]['more']['level_name'] ."</b></td>
    </tr>
    <tr>
      <td >Fee Amount:</td>
      <td><b>". number_format($totalAmount, 2) ."</b></td>
    </tr>
  </table>
  </div>";

  //show the details here
  $html .="
  <div id='assigned_courses'><br />
  <table border=0>";

         //show the setup details here
         $html .="
         <tr>
           <td colspan=9>
             <fieldset class='collapsible collapsed'><legend>". $_SESSION[$varName]['more']['fee_structure_name'] ." - ". $_SESSION[$varName]['more']['level_name'] ." - ". $_SESSION[$varName]['more']['nationality_name'] ." - View details</legend>";
                $html .="
                 <table>
                   <tr>
                     <th width='15px'>#</th>
                     <th width='250px'>Fee Item</th>
                     <th>Scholarship Applicable</th>
                     <th>Full Amount</th>
                     <th>First Instalment Amount</th>
                     <th>Second Instalment Amount</th>
                   </tr>";$l=1;

                   foreach($_SESSION[$varName]['more']['fee_item_details'] as $e){
                     $html .="
                     <tr>
                       <td>". $l++ ."</td>
                       <td>". $e['item_name'] ."</td>
                       <td>". ($e['is_scholarship_applicable'] == 0 ? 'No' : 'Yes') ."</td>
                       <td>". number_format($e['full_amount'], 2) ."</td>
                       <td>". number_format($e['instalment1_amount'], 2) ."</td>
                       <td>". number_format($e['instalment2_amount'], 2) ."</td>
                     </tr>";
                   }

                 $html .="
               </table>";

             $html .="
             </fieldset>
           </td>
         </tr>";

   $html .="
   </table>
   </div>";
  return $html;
}


/**
 * Return HTML to Display Scholarship Authorisations for Session
 *
 * <p>This is too slow and needs to be turned into a paged Drupal View.</p>
 * @uses get_scholarship_authorisations()
 * @uses get_programmes()
 * @param string $sessionName
 * @return string HTML
 */
function staff_display_scholarship_authorisations($sessionName) {
  $html = "
  <div id='assigned_courses'>
  <b>Available List of Scholarship Authorisations - ". $sessionName ."</b><br /><br />";

  $scholarshipAuthorisations = get_scholarship_authorisations($sessionName);
  if(! is_array($scholarshipAuthorisations) || ! sizeof($scholarshipAuthorisations))
    return $html .= Error_Types(106) .'</div>';
  //Please click on a Fee Item name to Edit it.<br />
  $html .="

  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Mat. Num.</b></th>
      <th><b>Full Name</b></th>
      <th><b>Program Name</b></th>
      <th><b>Scholarship Type</b></th>
      <th><b>Sponsor Organisation</b></th>
      <th><b>Remarks</b></th>
      <th><b>Date</b></th>

    </tr>";$i = 1;

    foreach ($scholarshipAuthorisations as $k => $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $html .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td width='30px'>". $i++ ."</td>";
           $student_profile = new UserProfile($v['student_uid']);
           $programmeName = get_programmes($student_profile->profile_first_choice, true);

           $html .="
           <td>". $x = (! empty($student_profile->profile_matno) ? $student_profile->profile_matno : 'N/A') ."</td>
           <td>". $student_profile->profile_last_name .', '. $student_profile->profile_first_name ."</td>
           <td>". $programmeName[$student_profile->profile_first_choice] ."</td>
           <td>". $v['sponsor_type'] ."</td>
           <td>". $v['sponsor_name'] ."</td>
           <td>". check_markup($v['remarks'], FILTER_FORMAT_DEFAULT, FALSE) ."</td>
           <td>". $v['date'] ."</td>

         </tr>";
      }

  $html .= "
  </table>
  </div>";
  return $html;
}


/**
 * Find Scholarship Authorisations for Session
 *
 * @param string $sessionName
 * @return array of array
 */
function get_scholarship_authorisations($sessionName) {
  $r = db_query("SELECT nid, field_sas_student_uid AS student_uid, field_sas_session_name_value AS session_name, field_sas_remarks_value AS remarks, DATE_FORMAT(field_sas_date_value, '%%D %%b %%Y') AS date, IFNULL(field_scholarship_sponsor_value, 'N/A') sponsor_name, IFNULL(field_scholarship_type_value, 'N/A') sponsor_type
  FROM {content_type_school_fee_approved_scholarships}
  WHERE field_sas_session_name_value='%s'
  ORDER BY field_sas_session_name_value ", $sessionName);
  //LEFT JOIN {content_type_school_fees_scholarship_types} ctsfst ON ctsfas.field_scholarship_type_value=ctsfst.nid
  $rs = array();
  while ($f = db_fetch_object($r)){
    $rs[$f->nid]['student_uid'] = $f->student_uid;
    $rs[$f->nid]['session_name'] = $f->session_name;
    $rs[$f->nid]['remarks'] = $f->remarks;
    $rs[$f->nid]['date'] = $f->date;
    $rs[$f->nid]['sponsor_type'] = $f->sponsor_type;
    $rs[$f->nid]['sponsor_name'] = $f->sponsor_name;
  }
  return $rs;
}


/**
 * Find Instalment Authorisations for Session
 *
 * @param string $sessionName
 * @return array of array
 */
function get_instalment_authorisations($sessionName) {
  $r = db_query("SELECT nid, field_sai_student_uid AS student_uid, field_sai_session_name_value AS session_name, field_sai_remarks_value AS remarks, DATE_FORMAT(field_sai_date_value, '%%D %%b %%Y') AS date FROM {content_type_school_fee_approved_instalments} WHERE field_sai_session_name_value='%s' ORDER BY field_sai_session_name_value ", $sessionName);
  $rs = array();
  while ($f = db_fetch_object($r)){
    $rs[$f->nid]['student_uid'] = $f->student_uid;
    $rs[$f->nid]['session_name'] = $f->session_name;
    $rs[$f->nid]['remarks'] = $f->remarks;
    $rs[$f->nid]['date'] = $f->date;
  }
  return $rs;
}


/**
 * Form to Find a Student in order to Authorise an Instalment
 *
 * @uses get_authorise_instalment_student_finder_form_submit()
 * @return array Drupal Form
 */
function get_authorise_instalment_student_finder_form(){

  $form['#title'] = 'Student Finder';
  $form['mat_number'] = array(
      '#title' => 'Matriculation / JAMB Number',
      '#type' => 'textfield',
      '#size' => 40,
      '#required' => TRUE
    );

  $form['submit'] = array(
    '#value' => 'Search Now',
    '#type' => 'submit'
  );

  return $form;
}


function get_authorise_instalment_student_finder_form_validate($form, &$state){
  ;
}


/**
 * submit hook for {@link get_authorise_instalment_student_finder_form()}
 *
 * @uses ini_student_fee_profile()
 */
function get_authorise_instalment_student_finder_form_submit($form, &$state){
  global $EDUERPstudentInitiated;
  $values = $state['values'];
  $returnURL = 'staff/authoriseinstalment';
  ini_student_fee_profile($values['mat_number'], 'eduerp_authorise_instalment', $returnURL);
}


/**
 * Return HTML to Display Instalment Authorisations for Session
 *
 * <p>This is too slow and needs to be turned into a paged Drupal View.</p>
 * @uses get_instalment_authorisations()
 * @uses get_programmes()
 * @param string $sessionName
 * @return string HTML
 */
function staff_display_instalment_authorisations($sessionName) {
  $html = "
  <div id='assigned_courses'>
  <b>Available List of Instalment Authorisations - ". $sessionName ."</b><br /><br />";

  $authorisations = get_instalment_authorisations($sessionName);
  if(! is_array($authorisations) || ! sizeof($authorisations))
    return $html .= Error_Types(106) .'</div>';
  $html .="

  <table border=1>
    <tr>
      <th><b>#</b></th>
      <th><b>Mat. Num.</b></th>
      <th><b>Full Name</b></th>
      <th><b>Program Name</b></th>

      <th><b>Remarks</b></th>
      <th><b>Date</b></th>

    </tr>";$i = 1;

    foreach ($authorisations as $k => $v){
      if ($i%2) $rcolor = "#E5E5E5"; else $rcolor = "#FFFFFF";
        $html .= "
         <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
           <td width='30px'>". $i++ ."</td>";
           $student_profile = new UserProfile($v['student_uid']);
           $programmeName = get_programmes($student_profile->profile_first_choice, true);

           $html .="
           <td>". $x = (! empty($student_profile->profile_matno) ? $student_profile->profile_matno : 'N/A') ."</td>
           <td>". $student_profile->profile_last_name .', '. $student_profile->profile_first_name ."</a></td>
           <td>". $programmeName[$student_profile->profile_first_choice] ."</a></td>

           <td>". check_markup($v['remarks'], FILTER_FORMAT_DEFAULT, FALSE) ."</a></td>
           <td>". $v['date'] ."</a></td>
         </tr>";
      }

  $html .= "
  </table>
  </div>";
  return $html;
}


/**
 * Form to Authorise an Instalment for a Student
 *
 * @uses staff_show_authorise_instalment_form_validate()
 * @uses staff_show_authorise_instalment_form_submit()
 * @global array $_SESSION['eduerp_authorise_instalment']
 * @return array Drupal Form
 */
function staff_show_authorise_instalment_form(){
  $form['#title'] = 'School Fees Instalment Payment';
   $form['remarks'] = array(
    '#type' => 'textarea',
    '#title' => 'Remarks - Brief details about the Instalment Payment',
    '#size' => 255,
  );
   $form['lbl01'] = array(
    '#type' => 'item',
    '#value' => "<font color=#FF0000><b>By clicking 'Authorise Instalment Payment!' you acknowledge that the student whose details appear above has been authorised to pay his/her School Fees in Instalments for the Current Session only.</b></font>",
  );

  //do not show this button if instalment1 does not exist for at least one fee item
  if(isset($_SESSION['eduerp_authorise_instalment']['more']) && sizeof($_SESSION['eduerp_authorise_instalment']['more']) ){
    $found=false;
    foreach($_SESSION['eduerp_authorise_instalment']['more']['fee_item_details'] as $e){
      if($e['instalment1_amount'] > 0){
        $found=true; break;
      }
    }
  }

  if($found){
    $form['cmdCancel'] = array(
      '#value' => 'Cancel',
      '#type' => 'submit'
    );

    $form['submit'] = array(
      '#value' => 'Authorise Instalment Payment!',
      '#type' => 'submit'
    );
  }
  else{
    $form['title_err'] = array(
    '#type' => 'item',
    '#value' => "<b><font color='#ff0000'>". Error_Types(174) ."</font></b>",
    //'#required' => TRUE,
    );

    $form['cmdCancel'] = array(
      '#value' => 'Cancel',
      '#type' => 'submit'
    );
  }

  return $form;
}


/**
 * validate hook for {@link staff_show_authorise_instalment_form()}
 *
 * @uses is_scholarship_authorisation_existing()
 * @uses is_instalment_authorisation_existing()
 * @global array $_SESSION['eduerp_authorise_instalment']
 */
function staff_show_authorise_instalment_form_validate($form, &$state){
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'authorise instalment payment!':

      if(empty($values['remarks'])){
    	form_set_error('remarks', Error_Types(161));
      }

      if(is_scholarship_authorisation_existing($_SESSION['eduerp_authorise_instalment']['studentUID'], variable_get('eduerp_current_session', ''))){
      	form_set_error('', Error_Types(162));
        return;
      }
      if(is_instalment_authorisation_existing($_SESSION['eduerp_authorise_instalment']['studentUID'], variable_get('eduerp_current_session', ''))){
      	form_set_error('', Error_Types(163));
        return;
      }
    break;
   case 'cancel':
     unset($_SESSION['eduerp_authorise_instalment']);
     $_SESSION['eduerp_authorise_instalment'] = null;
     drupal_goto("staff/authoriseinstalment");
   break;
  }
}


/**
 * submit hook for {@link staff_show_authorise_instalment_form()}, Create CCK 'school_fee_approved_instalments'
 */
function staff_show_authorise_instalment_form_submit($form, &$state){
  global $user;
  $values = $state['values'];

  switch(trim(strtolower(strtoupper($values['op'])))){
    case 'authorise instalment payment!':

      $node = new stdClass();
      $node->type                             	= 'school_fee_approved_instalments';
      $node->uid                              	= 1;  // Admin
      $node->status                           	= 1;  // Published
      $node->promote                          	= 0;
      $node->sticky                           	= 0;
      $node->comment                          	= 0;
      $node->title                            	= 'Authorise Instalment - '. $_SESSION['eduerp_authorise_instalment']['studentUID'] .' - '. variable_get('eduerp_current_session', '');
      $node->field_sai_student[0]['uid']       	= $_SESSION['eduerp_authorise_instalment']['studentUID'];
      $node->field_sai_session_name[0]['value'] = variable_get('eduerp_current_session', '');
      $node->field_sai_remarks[0]['value']      = $values['remarks'];
      $node->field_sai_staff[0]['uid']       	= $user->uid;
      $node->field_sai_date[0]['value']     	= date("Y-m-d H:i:s");

      node_save($node);
      drupal_set_message('Instalment Authorisation was successful!');
      unset($_SESSION['eduerp_authorise_instalment']); $_SESSION['eduerp_authorise_instalment'] = null;
    break;

    case 'cancel':
      unset($_SESSION['eduerp_authorise_instalment']); $_SESSION['eduerp_authorise_instalment'] = null;
    break;
  }
}


/**
 * Delete a node (copied from node_delete()), want to bypass access control
 *
 * @param int $nodeID
 */
function delete_node($nodeID){
  $node = node_load($nodeID);

   db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
   db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);

   // Call the node-specific callback (if any):
   node_invoke($node, 'delete');
   node_invoke_nodeapi($node, 'delete');

   // Clear the page and block caches.
   cache_clear_all();

   // Remove this node from the search index if needed.
   if (function_exists('search_wipe')) {
     search_wipe($node->nid, 'node');
   }
}


/**
 * Find Country Info
 *
 * @param int $countryID
 * @return array of ID => Name
 */
function get_country_info($countryID=0){
  $sql = "SELECT country_id, country_name FROM {eduerp_countries} ";
  if($countryID != 0) $sql .= " WHERE country_id=%d ";

  $rs = db_query($sql, $countryID);

  if(db_affected_rows($rs) > 0) {
     while ($row = db_fetch_object($rs))
       $countries[$row->country_id] = $row->country_name;
  }
  else
    $countries[] = strip_tags(Error_Types(106));

    return $countries;
}


/**
 * Find Student Info needed for calculating Fees
 *
 * @uses get_programmes()
 * @uses student_next_level()
 * @param int $studentUID
 * @return array
 */
function fees_ini_student_profile($studentUID){
      $student_profile = new UserProfile($studentUID);

      if(! is_object($student_profile)) return 0;

      $studentFeeProfile['studentUID'] = $student_profile->uid;
      $studentFeeProfile['full_name'] = $student_profile->profile_last_name .', '. $student_profile->profile_first_name;
      $studentFeeProfile['first_choice_nid'] = $student_profile->profile_first_choice;
      $studentFeeProfile['level_name'] = $student_profile->profile_level_name;
      $studentFeeProfile['mat_num'] = ! empty($student_profile->profile_matno) ? $student_profile->profile_matno : 'N/A';
      $studentFeeProfile['jamb_num'] = $student_profile->profile_jambno;
      $studentFeeProfile['gender'] = strtolower($student_profile->profile_gender);
      $studentFeeProfile['mode_of_entry'] = strtolower($student_profile->profile_mode_of_entry);
      //$_SESSION['eduerp_authorise_scholarship']['health_status'] = strtolower($student_profile->profile_health_status);
      $studentFeeProfile['programNID'] = $student_profile->profile_first_choice;

      $studentFeeProfile['country_name'] = ! empty($student_profile->profile_country_name) ? $student_profile->profile_country_name : 'N/A';

      $programmeName = get_programmes($student_profile->profile_first_choice, true);
      $studentFeeProfile['programme_name'] = $programmeName[$student_profile->profile_first_choice];

      if(! isset($studentFeeProfile['jamb_num']) || $studentFeeProfile['jamb_num'] == ""){
        return 0;
      }

      //get level types
      $rs = db_query('SELECT nid, field_level_type_value level_type_name FROM {content_type_school_fee_level_types} ');
      if(db_affected_rows($rs) <= 0){
      	return 0;
      }

      //get the level of the student
      $studentLevel = student_next_level($student_profile->uid, variable_get('eduerp_current_session', ''));
      $studentFeeProfile['academic_level'] = $studentLevel;

      if(trim($studentLevel) == '100' || trim($studentLevel) == '1'){
        $levelStatus = "freshman";
      }
      // Was: (trim($studentLevel) == '200' || trim($studentLevel) == '2')
      elseif ((trim($studentLevel) == '200') && strtoupper(strtolower($student_profile->profile_mode_of_entry)) == "DE") {
      	$levelStatus = "freshman";
      }
      else{
        $levelStatus = "returning student";
      }

      while($r = db_fetch_object($rs)){
        if($levelStatus == "freshman" && trim(strtolower(strtoupper($r->level_type_name))) == "freshman"){
      	  $studentFeeProfile['levelType'] = $r->nid;
      	  break;
        }

        if($levelStatus == "returning student" && trim(strtolower(strtoupper($r->level_type_name))) == "returning student"){
      	  $studentFeeProfile['levelType'] = $r->nid;
      	  break;
        }
      }

      if(! $studentFeeProfile['levelType']){
      	return 0;
      }

      //get nationality types
      $rs = db_query('SELECT nid, field_nationality_type_value nationality_type_name FROM {content_type_school_fee_nationality_types} ');
      if(db_affected_rows($rs) <= 0){
      	return 0;
      }

      //get the local country name from setting
      $rs1 = db_query("SELECT country_id, country_name FROM {eduerp_countries} WHERE country_id= (SELECT field_fee_settings_value_value FROM {content_type_school_fee_settings} WHERE field_fee_settings_name_value = 'Local Country Name')  ");
      if(db_affected_rows($rs1) <= 0){
      	return 0;
      }

      $localCountry = db_fetch_object($rs1);

      while($r = db_fetch_object($rs)){
      	if(trim($student_profile->profile_country_name) == trim($localCountry->country_name)){
      	  if(trim(strtolower(strtoupper($r->nationality_type_name))) == 'local'){
      	    $studentFeeProfile['nationalityType'] = $r->nid;
      	    break;
      	  }
      	}
      	if(trim($student_profile->profile_country_name) != trim($localCountry->country_name)){
      	  if(trim(strtolower(strtoupper($r->nationality_type_name))) == 'international'){
      	    $studentFeeProfile['nationalityType'] = $r->nid;
      	    break;
      	  }
      	}
      }

      if(! $studentFeeProfile['nationalityType']){
      	return 0;
      }

  return $studentFeeProfile;
}


/**
 * Find All School Fees (& Hostel Fees) that need to be paid by a Student along with Metadata
 *
 * @uses get_school_fee_setup()
 * @uses get_school_fee_setup()
 * @uses is_scholarship_authorisation_existing()
 * @uses is_instalment_authorisation_existing()
 * @uses _student_has_paid_or_pendingpaid_fees()
 * @uses get_fee_setup_item_details()
 * @uses get_uc_attribute_option_info()
 * @uses is_uc_attribute_attached_to_product()
 * @uses is_uc_option_attached_to_product()
 * @uses is_second_instalment_activated()
 * @uses get_uc_late_registration_info()
 * @uses get_late_registration_info()
 * @uses is_reservation_existing()
 * @uses get_reservation_info()
 * @param int $studentUID Drupal uid
 * @param int $programNID Drupal node nid for CCK 'program'
 * @param int $levelType
 * @param int $nationalityType
 * @param string $academicLevel
 * @param bool $checkFeesOnly
 * @param bool $showAllAmounts
 * @return array
 */
function fees_ini_student_fee_option($studentUID, $programNID, $levelType, $nationalityType, $academicLevel, $checkFeesOnly=false, $showAllAmounts=false){
  $feeOption = array();
  $feeStudentOption = array();

  $student_profile = new UserProfile($studentUID);
  //dsm(array('studentUID' => $studentUID, 'programNID' => $programNID, 'levelType' => $levelType, 'nationalityType' => $nationalityType, 'academicLevel' => $academicLevel, 'checkFeesOnly' => $checkFeesOnly, 'showAllAmounts' => $showAllAmounts, 'profile_mode_of_entry' => $student_profile->profile_mode_of_entry));//ab

  $setupNID = null; $forLevel = false;
  $programme_specific = TRUE;

  if ($academicLevel > 0) {
    // If Student is "DE" & Level "200" and All Levels setup exists, use it for this student so that they pickup special "DE" Freshman fees rather than normal "200" fees used for Returning Student.
    $use_all_levels_Freshman_for_200_DE = FALSE;
    if ($academicLevel == '200' && $student_profile->profile_mode_of_entry == 'DE') {
      if (db_fetch_object(db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE field_fee_setup_program_nid_value=%d AND field_fee_setup_session_value='%s' AND field_fee_nationality_type_nid=%d AND field_fee_student_level_type_nid=%d ", $programNID, variable_get('eduerp_current_session', ''), $nationalityType, $levelType))) {
        $use_all_levels_Freshman_for_200_DE = TRUE;
        //dsm(array('studentUID' => $studentUID, 'programNID' => $programNID, 'levelType' => $levelType, 'nationalityType' => $nationalityType, 'academicLevel' => $academicLevel, 'checkFeesOnly' => $checkFeesOnly, 'showAllAmounts' => $showAllAmounts, 'profile_mode_of_entry' => $student_profile->profile_mode_of_entry));//ab
      }
    }

    if (!$use_all_levels_Freshman_for_200_DE) {
      //test if level-specific setup exists for the student for the program
      $rs = db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE field_fee_setup_program_nid_value=%d AND field_fee_setup_session_value='%s' AND field_fee_setup_level_name_value='%s' AND field_fee_nationality_type_nid=%d ", $programNID, variable_get('eduerp_current_session', ''), $academicLevel, $nationalityType);
      if(db_affected_rows($rs) > 0){
        $feeSetup = db_fetch_object($rs);
        $setupNID = $feeSetup->nid;
        $forLevel = true;
      }
    }
  }

  if(empty($setupNID)){
    //test if his/her program has program specific setup
    $rs = db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE field_fee_setup_program_nid_value=%d AND field_fee_setup_session_value='%s' AND field_fee_nationality_type_nid=%d AND field_fee_student_level_type_nid=%d ", $programNID, variable_get('eduerp_current_session', ''), $nationalityType, $levelType);
    if(db_affected_rows($rs) > 0){
      $feeSetup = db_fetch_object($rs);
      $setupNID = $feeSetup->nid;
    }
  }

  if(empty($setupNID) && $academicLevel > 0){
    $use_all_levels_Freshman_for_200_DE = FALSE;
    if ($academicLevel == '200' && $student_profile->profile_mode_of_entry == 'DE') {
      if (db_fetch_object(db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=0) AND (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value=0) AND field_fee_setup_session_value='%s' AND field_fee_nationality_type_nid=%d AND field_fee_student_level_type_nid=%d", variable_get('eduerp_current_session', ''), $nationalityType, $levelType))) {
        $use_all_levels_Freshman_for_200_DE = TRUE;
        //dsm(array('studentUID' => $studentUID, 'programNID' => $programNID, 'levelType' => $levelType, 'nationalityType' => $nationalityType, 'academicLevel' => $academicLevel, 'checkFeesOnly' => $checkFeesOnly, 'showAllAmounts' => $showAllAmounts, 'profile_mode_of_entry' => $student_profile->profile_mode_of_entry));//ab
      }
    }

    if (!$use_all_levels_Freshman_for_200_DE) {
      //test Level-Specific for General Fee Structure
      $rs = db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=0) AND (field_fee_student_level_type_nid IS NULL OR field_fee_student_level_type_nid=0) AND field_fee_setup_session_value='%s' AND field_fee_setup_level_name_value='%s' AND field_fee_nationality_type_nid=%d", variable_get('eduerp_current_session', ''), $academicLevel, $nationalityType);
      if(db_affected_rows($rs) > 0){
        $feeSetup = db_fetch_object($rs);
        $setupNID = $feeSetup->nid;
        $forLevel = true;
      }
      $programme_specific = FALSE;
    }
  }

  if(empty($setupNID)){
    //now test if general setup exists
    $rs = db_query("SELECT nid FROM {content_type_school_fee_item_setup} WHERE (field_fee_setup_program_nid_value IS NULL OR field_fee_setup_program_nid_value=0) AND (field_fee_setup_level_name_value IS NULL OR field_fee_setup_level_name_value=0) AND field_fee_setup_session_value='%s' AND field_fee_nationality_type_nid=%d AND field_fee_student_level_type_nid=%d", variable_get('eduerp_current_session', ''), $nationalityType, $levelType);
    if(db_affected_rows($rs) > 0){
      $feeSetup = db_fetch_object($rs);
      $setupNID = $feeSetup->nid;
    }
    $programme_specific = FALSE;
  }

  if(empty($setupNID)){
    return $feeStudentOption;
  }

  $feeOption = get_school_fee_setup(variable_get('eduerp_current_session', ''), $feeSetup->nid);
  if(! $feeOption || ! is_array($feeOption) || ! sizeof($feeOption)){
    return $feeStudentOption;
  }

  $feeStudentOption['studentFeeSetupNID'] = $setupNID;
  $feeStudentOption['nationality_name'] = $feeOption[$setupNID]['nationality_name'];
  $feeStudentOption['fee_structure_name'] = $feeOption[$setupNID]['fee_structure_name'];
  $feeStudentOption['level_name'] = $feeOption[$setupNID]['level_name'];
  $feeStudentOption['academic_level'] = $feeOption[$setupNID]['setup_level'];

  if($forLevel){
    $feeStudentOption['level_name'] = 'N/A';
  }

  //test if student is on scholarship
  $feeStudentOption['is_student_on_scholarship'] = is_scholarship_authorisation_existing($studentUID, variable_get('eduerp_current_session', '')) == true ? '1' : '0';

  //test if student is authorised to pay in instalments
  $feeStudentOption['instalment_payment_authorised'] = is_instalment_authorisation_existing($studentUID, variable_get('eduerp_current_session', '')) == true ? '1' : '0';

  //get session name
  $feeStudentOption['session_name'] = variable_get('eduerp_current_session', '');

  $feeStudentOption['amount_payable'] = 0.0;
  $feeStudentOption['student_has_paid_or_pendingpaid_fees'] = _student_has_paid_or_pendingpaid_fees($studentUID);

  $details = get_fee_setup_item_details($setupNID);
  if(db_affected_rows($details) <=0) {
    return array();
  }

  $i=0;
  while($r = db_fetch_object($details)){
    if($feeStudentOption['instalment_payment_authorised'] == '1'){

      //for instalment payments
      if($forLevel)
        $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['academic_level'] ." Level - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Instalment1)";
      else
        $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['level_name'] ." - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Instalment1)";

      $feeStudentOption['fee_item_details'][$i]['amount'] = $r->instalment1_amount;
      $feeStudentOption['fee_item_details'][$i]['product_nid'] = $r->product_nid;
      $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] = $r->is_scholarship_applicable;

      $attributeOptionInfo = get_uc_attribute_option_info($r->product_nid, ($programme_specific ? $programNID : 0), ($forLevel ? $feeStudentOption['academic_level'] : $feeStudentOption['level_name']), $feeStudentOption['nationality_name'], 'Instalment1');

      //now make sure that each fee product returned has attribute and option (no more assumptions!)
      if(! is_array($attributeOptionInfo) || ! sizeof($attributeOptionInfo)) return array();

      //make sure attribute and option is attached to the product
      $aInfo['productNID'] = $r->product_nid;;
      $aInfo['aid'] = $attributeOptionInfo['aid'];
      $aInfo['oid'] = $attributeOptionInfo['oid'];
      $aInfo['label'] = "Fee Structure";
      if(! is_uc_attribute_attached_to_product($aInfo) || ! is_uc_option_attached_to_product($aInfo)) return array();

      $feeStudentOption['fee_item_details'][$i]['option_id'] = $attributeOptionInfo['oid'];
      $feeStudentOption['fee_item_details'][$i]['attribute_id'] = $attributeOptionInfo['aid'];

      if (!$feeStudentOption['is_student_on_scholarship'] || $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] != 1) {
        $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = 'None';
        $feeStudentOption['fee_item_details'][$i]['sponsor'] = 'None';
      }
      else {
        $scholarship_type = db_fetch_object(db_query("SELECT field_scholarship_type_value AS scholarship_type, field_scholarship_sponsor_value AS sponsor FROM {content_type_school_fee_approved_scholarships} WHERE field_sas_student_uid=%d AND field_sas_session_name_value='%s'", $studentUID, variable_get('eduerp_current_session', '')));
        $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = $scholarship_type->scholarship_type;
        $feeStudentOption['fee_item_details'][$i]['sponsor'] = $scholarship_type->sponsor;
      }

      if(is_second_instalment_activated()){
        //second instalment collection is activated

        $i++;

        if($forLevel)
          $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['academic_level'] ." Level - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Instalment2)";
        else
          $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['level_name'] ." - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Instalment2)";

        $feeStudentOption['fee_item_details'][$i]['amount'] = $r->instalment2_amount;
        $feeStudentOption['fee_item_details'][$i]['product_nid'] = $r->product_nid;
        $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] = $r->is_scholarship_applicable;

        $attributeOptionInfo = get_uc_attribute_option_info($r->product_nid, ($programme_specific ? $programNID : 0), ($forLevel ? $feeStudentOption['academic_level'] : $feeStudentOption['level_name']), $feeStudentOption['nationality_name'], 'Instalment2');

        //now make sure that each fee product returned has attribute and option (no more asumptions!)
        if(! is_array($attributeOptionInfo) || ! sizeof($attributeOptionInfo)) return array();

        //make sure attribute and option is attached to the product
        $aInfo['productNID'] = $r->product_nid;
      	$aInfo['aid'] = $attributeOptionInfo['aid'];
      	$aInfo['oid'] = $attributeOptionInfo['oid'];
      	$aInfo['label'] = "Fee Structure";
      	if(! is_uc_attribute_attached_to_product($aInfo) || ! is_uc_option_attached_to_product($aInfo)) return array();

        $feeStudentOption['fee_item_details'][$i]['option_id'] = $attributeOptionInfo['oid'];
        $feeStudentOption['fee_item_details'][$i]['attribute_id'] = $attributeOptionInfo['aid'];

        if (!$feeStudentOption['is_student_on_scholarship'] || $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] != 1) {
          $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = 'None';
          $feeStudentOption['fee_item_details'][$i]['sponsor'] = 'None';
        }
        else {
          $scholarship_type = db_fetch_object(db_query("SELECT field_scholarship_type_value AS scholarship_type, field_scholarship_sponsor_value AS sponsor FROM {content_type_school_fee_approved_scholarships} WHERE field_sas_student_uid=%d AND field_sas_session_name_value='%s'", $studentUID, variable_get('eduerp_current_session', '')));
          $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = $scholarship_type->scholarship_type;
          $feeStudentOption['fee_item_details'][$i]['sponsor'] = $scholarship_type->sponsor;
        }
      }
    }
    else{
      //for one time payments
      if($forLevel)
        $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['academic_level'] ." Level - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Full Amount)";
      else
        $feeStudentOption['fee_item_details'][$i]['item_description'] = $feeStudentOption['fee_structure_name'] ." - ". $feeStudentOption['level_name'] ." - ". $feeStudentOption['nationality_name'] ." (". $r->item_name . " - Full Amount)";

      $feeStudentOption['fee_item_details'][$i]['amount'] = $r->full_amount;
      $feeStudentOption['fee_item_details'][$i]['product_nid'] = $r->product_nid;
      $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] = $r->is_scholarship_applicable;

      $attributeOptionInfo = get_uc_attribute_option_info($r->product_nid, ($programme_specific ? $programNID : 0), ($forLevel ? $feeStudentOption['academic_level'] : $feeStudentOption['level_name']), $feeStudentOption['nationality_name'], 'Full Amount');

      //now make sure that each fee product returned has attribute and option (no more asumptions!)
      if(! is_array($attributeOptionInfo) || ! sizeof($attributeOptionInfo)) {
        return array();
      }
      //make sure attribute and option is attached to the product
      $aInfo['productNID'] = $r->product_nid;;
      $aInfo['aid'] = $attributeOptionInfo['aid'];
      $aInfo['oid'] = $attributeOptionInfo['oid'];
      $aInfo['label'] = "Fee Structure";
      if(! is_uc_attribute_attached_to_product($aInfo) || ! is_uc_option_attached_to_product($aInfo)) {
        return array();
      }
      $feeStudentOption['fee_item_details'][$i]['option_id'] = $attributeOptionInfo['oid'];
      $feeStudentOption['fee_item_details'][$i]['attribute_id'] = $attributeOptionInfo['aid'];

      if (!$feeStudentOption['is_student_on_scholarship'] || $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] != 1) {
        $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = 'None';
        $feeStudentOption['fee_item_details'][$i]['sponsor'] = 'None';
      }
      else {
        $scholarship_type = db_fetch_object(db_query("SELECT field_scholarship_type_value AS scholarship_type, field_scholarship_sponsor_value AS sponsor FROM {content_type_school_fee_approved_scholarships} WHERE field_sas_student_uid=%d AND field_sas_session_name_value='%s'", $studentUID, variable_get('eduerp_current_session', '')));
        $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = $scholarship_type->scholarship_type;
        $feeStudentOption['fee_item_details'][$i]['sponsor'] = $scholarship_type->sponsor;
      }
    }

	if($showAllAmounts){//this handles showing stuff in scholarship and instalment payment UIs
	  if(! $feeStudentOption['studentUID']) $feeStudentOption['studentUID'] = $studentUID;
	  $feeStudentOption['fee_item_details'][$i]['item_name'] = $r->item_name;
	  $feeStudentOption['fee_item_details'][$i]['full_amount'] = $r->full_amount;
	  $feeStudentOption['fee_item_details'][$i]['instalment1_amount'] = $r->instalment1_amount;//instalment1_amount
	  $feeStudentOption['fee_item_details'][$i]['instalment2_amount'] = $r->instalment2_amount;
	}
    $i++;
  }

  $amount_payable = 0.0;
  foreach ($feeStudentOption['fee_item_details'] as $fee_amount) {
    if (! $feeStudentOption['is_student_on_scholarship'] || $fee_amount['is_scholarship_applicable'] != 1) $amount_payable += $fee_amount['amount'];
  }
  $feeStudentOption['amount_payable'] = $amount_payable;

  //now if this is to check fees only then do not check for late reg
  if(! $checkFeesOnly){
    //now check for late registration info

    $ucLateRegInfo = get_uc_late_registration_info("Late Registration Charges");

    $lateRegInfo = get_late_registration_info();

    if( Date('Y-m-d') > $lateRegInfo['last_date'] && ! $showAllAmounts){
      $payment_due_date = '2037-12-31 23:59:59'; // Date is passed, so use future date
      $feeStudentOption['late_reg_info']['last_registration_date'] = $payment_due_date;
      $feeStudentOption['late_reg_info']['amount'] = $lateRegInfo['late_reg_amount'];
      $feeStudentOption['late_reg_info']['product_nid'] = $ucLateRegInfo['product_nid'];
      $feeStudentOption['late_reg_info']['product_description'] = $ucLateRegInfo['name'];

      if ($amount_payable > 0.0 && !$feeStudentOption['student_has_paid_or_pendingpaid_fees']) {
        // Add Late Registration Charge
        $feeStudentOption['fee_item_details'][$i]['item_description'] = $ucLateRegInfo['name'];
        $feeStudentOption['fee_item_details'][$i]['amount'] = $lateRegInfo['late_reg_amount'];
        $feeStudentOption['fee_item_details'][$i]['product_nid'] = $ucLateRegInfo['product_nid'];
        $feeStudentOption['fee_item_details'][$i]['is_scholarship_applicable'] = '2';
        $feeStudentOption['fee_item_details'][$i]['scholarship_type'] = 'None';
        $feeStudentOption['fee_item_details'][$i]['sponsor'] = 'None';
      }
    }
    else { // Date is not passed, so use it as the date by which payment must be made
      $payment_due_date = $lateRegInfo['last_date'] . ' 23:58:00'; // Just before midnight
      $feeStudentOption['late_reg_info']['last_registration_date'] = $payment_due_date;
    }
  }

  //now if this is to check fees only then do not check for hostel
  if(! $checkFeesOnly){
    //now check for hostel
    if(is_reservation_existing($studentUID)){
      $ri = get_reservation_info($studentUID);
      $reservationInfo = db_fetch_object($ri);

      $hostelDescription = "Room: ". $reservationInfo->room_name ."<br />";
      $hostelDescription .= "Block: ". $reservationInfo->block_name ."<br />";
      $hostelDescription .= "Hostel: ". $reservationInfo->hostel_name;

      $feeStudentOption['hostel_info']['product_nid'] = $reservationInfo->product_nid;
      $feeStudentOption['hostel_info']['hostel_description'] = $hostelDescription;

      if ($reservationInfo->normal_expiry_date < $payment_due_date) {
        $payment_due_date = $reservationInfo->normal_expiry_date; // Hostel booking expiry date is earlier so use it
      }
      $feeStudentOption['hostel_info']['expiry_date'] = $payment_due_date;
      $feeStudentOption['late_reg_info']['last_registration_date'] = $payment_due_date; // both timeout dates should be the same

      $feeStudentOption['hostel_info']['amount'] = $reservationInfo->hostel_price;
    }
  }

  return $feeStudentOption;
}


/**
 * Has the Student Paid or Pending Fees for this Session?
 *
 * @param int $student_id Drupal uid
 * @return bool
 */
function _student_has_paid_or_pendingpaid_fees($student_id) {
  $sql = "SELECT op.data FROM {uc_orders} o, {uc_order_products} op
    WHERE
      o.uid=%d AND
      o.order_status IN ('payment_received', 'pending') AND
      o.order_id=op.order_id AND
      SUBSTRING(op.model, 1, 16)='PRODUCT-FEE-ITEM'";
  $result = db_query($sql, $student_id);
  $paid = FALSE;
  while ($order = db_fetch_array($result)) {
    $data = unserialize($order['data']);
    if ($data['session'] == variable_get('eduerp_current_session', '')) $paid = TRUE;
  }
  return $paid;
}


/**
 * Find All School Fees (& Hostel Fees) that need to be paid by a Student along with Metadata
 *
 * @uses fees_ini_student_profile()
 * @uses fees_ini_student_fee_option()
 * @param int $studentUID Drupal uid
 * @return array
 */
function get_fee_items($studentUID){
  $studentFeeProfile = fees_ini_student_profile($studentUID);
  if(! is_array($studentFeeProfile) || ! sizeof($studentFeeProfile)) return array();

  $feeItem = fees_ini_student_fee_option($studentUID, $studentFeeProfile['programNID'], $studentFeeProfile['levelType'], $studentFeeProfile['nationalityType'], $studentFeeProfile['academic_level']);

  return $feeItem;
}


/**
 * Does this Student have valid Fees Setup?
 *
 * @uses fees_ini_student_fee_option()
 * @param int $studentUID Drupal uid
 * @param int $studentUID Drupal uid
 * @return bool
 */
function is_fee_setup_existing_for_student($studentUID){
  $studentFeeProfile = fees_ini_student_profile($studentUID);

  if(! is_array($studentFeeProfile) || ! sizeof($studentFeeProfile)) return false;

  $studentFeeItem = fees_ini_student_fee_option($studentUID, $studentFeeProfile['programNID'], $studentFeeProfile['levelType'], $studentFeeProfile['nationalityType'], $studentFeeProfile['academic_level'], True);

  if(! is_array($studentFeeItem) || ! sizeof($studentFeeItem)) return false;

  return true;
}


/**
 * Load Fee Structures
 *
 * @uses get_school_fee_setup()
 * @param bool $forCombo
 * @return array of array
 */
function load_existing_fee_structure($forCombo=true){
  $feeSetup = get_school_fee_setup(variable_get('eduerp_current_session', ''));

  //we need to build unique entries
  $SQLheaders = array('nid', 'program_nid', 'level_id',  'nationality_id', 'fee_structure_nid',  'session_name',
  	 'setup_total_amount', 'setup_date', 'program_name', 'level_name',  'nationality_name', 'fee_structure_name',
  	   'fee_structure_class_name', 'setup_level');
  $prvNID = 0; $prvProgNID = null; $prvLevelName = '';
  foreach($feeSetup as $p => $h){
    if(! isset($prvProgNID) || $prvProgNID != $h['program_nid'] || ($prvProgNID == $h['program_nid'] && $prvLevelName != $h['setup_level'])){
      $prvNID = $h['nid'];
      $prvProgNID = $h['program_nid'];
      $prvLevelName = $h['setup_level'];
      $progName = ($h['program_name'] == 'N/A' || $h['program_name'] == '0') ? 'All Programs' : $h['program_name'];
      $setupLevelName = ($h['setup_level'] == 'N/A' || $h['setup_level'] == '0') ? 'All Levels' : $h['setup_level'] .'L';

      if($forCombo){
        $return[$h['nid']] = $h['fee_structure_class_name'] .'=>'. $progName . '=>'. $setupLevelName;
      }
      else{
        foreach($SQLheaders as $j){
          if($j == "program_name"){
            if($h['program_name'] == 'N/A' || $h['program_name'] == '0')
              $return[$h['nid']][$j] = 'All Programs';
            else
              $return[$h['nid']][$j] = $h[$j];
          }
          elseif($j == "setup_level"){
            if($h['setup_level'] == 'N/A' || $h['setup_level'] == '0')
              $return[$h['nid']][$j] = 'All Levels';
            else
              $return[$h['nid']][$j] = $h[$j] .'L';
          }
          else
            $return[$h['nid']][$j] = $h[$j];
        }
      }
    }
  }
  return $return;
}


/**
 * Load a Fee Setup
 *
 * @uses prepare_fee_setup_for_edit()
 * @uses get_school_fee_second_level_setup()
 * @uses get_fee_setup_item_details()
 * @param int $setupNID
 * @global $_SESSION['eduerp_fee_setup']
 */
function load_from_existing($setupNID){

  prepare_fee_setup_for_edit($setupNID);

  //fix page 3
  $feeSetup = get_school_fee_second_level_setup(variable_get('eduerp_current_session', ''), $_SESSION['eduerp_fee_setup']['programme_nid'], $_SESSION['eduerp_fee_setup']['academic_level_name'], true);
    while($p = db_fetch_object($feeSetup)){//four records are expected

      $feeSetupDetails = get_fee_setup_item_details($p->nid); //$feeSetupDetails = get_fee_setup_item_details(arg(2));
      while($r = db_fetch_object($feeSetupDetails)){
        if(! empty($_SESSION['eduerp_fee_setup']['academic_level_name']) && $_SESSION['eduerp_fee_setup']['academic_level_name'] != 'N/A'){
          $p->level_id = "00";
        }
        //drupal_set_message('level is '.$p->level_id .' nationality is '. $p->nationality_id . ' item is '. $r->item_nid) ;
        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-full_amount'] = substr($r->full_amount, 0, -3);

        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-instalment1_amount'] = ($r->instalment1_amount != 0) ? substr($r->instalment1_amount, 0, -3) : 'N/A';
        $_SESSION['eduerp_fee_setup']['items'][$p->level_id ."-". $p->nationality_id ."-". $r->item_nid .'-instalment2_amount'] = ($r->instalment2_amount != 0) ? substr($r->instalment2_amount, 0, -3) : 'N/A';
      }
    }
}


/**
 * Get Scholarship Types
 *
 * @param int $typeID
 * @param bool $forSelectList
 * @return array|mysqli_result if $forSelectList is TRUE array of nid => Type for all Programmes or one (if 0); otherwise MYSQL Result Set
 */
function get_scholarship_types($typeID=0, $forSelectList=true) {
    $where = ""; $args = "";
    $sql = "SELECT nid, field_scholarship_types_value scholarship_types FROM content_type_school_fees_scholarship_types ";

    if(! empty($typeID))
    $sql .= " WHERE nid=%d ";

    $sql .= "  ORDER BY field_scholarship_types_value ";

    $r = db_query($sql, $typeID);

 if ($forSelectList) {
   if (db_affected_rows($r) > 0) {
     while ($row = db_fetch_object($r))
       $scholarshipTypes[$row->nid] = $row->scholarship_types;
   }
   else
    $scholarshipTypes[] = strip_tags(Error_Types(106));

  return $scholarshipTypes;
 }
 else
   return $r;
}



/**
 * Handles 'staff/createmodifschlshptypes' menu to Create/Update Scholarship Types
 *
 * @uses is_valid_scholarship_type()
 * @uses staff_has_eduerp_role()
 * @uses staff_school_fees_create_modify_scholarship_types_form()
 * @uses staff_display_available_scholarships()
 * @global $_SESSION['eduerp_page']
 * @return string HTML
 */
function staff_school_fees_create_modify_scholarship_types(){
  global $user, $selFeeItems;
  ob_start();

  $editMode = ((arg(2) || is_numeric(arg(2))) && is_valid_scholarship_type(arg(2))) ? true : false;
  if (! staff_has_eduerp_role($user->uid, 0, 0, array('Bursar'))) $isAuthorized = false; else $isAuthorized = true;

  $html = "";
  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;School Fees Setup | Create / Modify Scholarship Types</font><br /><br />";
  $html .= '<hr /><br />';

    if($isAuthorized){
      $html .= ($editMode) ? '<b>Modify Scholarship Type</b> - Please modify the Item as appropriate<br /><br />' : '<b>Create Scholarship Type</b> - Please fill the form below to create Scholarship Type<br /><br />';
      $html .= "";
      $html .= drupal_get_form('staff_school_fees_create_modify_scholarship_types_form');
    }
    else{
      drupal_set_message(Error_Types(104), 'error');
    }
    $html .= '<br /><hr /><br />';

    if(! $editMode) {
      $html .= staff_display_available_scholarships();
    }

  echo $html;

  unset($_SESSION['eduerp_page']);
  return ob_get_clean();
}


/**
 * Form to Create/Update Scholarship Types
 *
 * @uses staff_school_fees_create_modify_scholarship_types_form_validate()
 * @uses staff_school_fees_create_modify_scholarship_types_form_submit()
 * @uses is_valid_scholarship_type()
 * @return array Drupal Form
 */
function staff_school_fees_create_modify_scholarship_types_form() {

  $editMode = (arg(2) && is_valid_scholarship_type(arg(2))) ? true : false;
  if ($editMode &&  empty($_POST['scholarshipItem'])) {
    $sql = "SELECT field_scholarship_types_value scholarship_types FROM {content_type_school_fees_scholarship_types} WHERE nid=%d ";
    $rs = db_query($sql, arg(2));
    if(db_affected_rows($rs) > 0){
      $r = db_fetch_object($rs);
      $scholarshipItem['scholarshipItem'] = $r->scholarship_types;
    }
  }

  $form['#title'] = 'Create / Modify Fee Setup';

    $form['scholarshipItem'] = array(
    '#title' => 'Scholarship Type',
    '#type' => 'textfield',
    '#size' => 50,
    '#required' => true,
   );
  if ($scholarshipItem) $form['scholarshipItem']['#value'] = $scholarshipItem['scholarshipItem'];

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link staff_school_fees_create_modify_scholarship_types_form()}
 *
 * @uses is_scholarship_type_name_existing()
 */
function staff_school_fees_create_modify_scholarship_types_form_validate($form, &$form_state){
  $values = $form_state['values'];
  if(arg(2) && is_numeric(arg(2))){
    if(is_scholarship_type_name_existing($values['scholarshipItem'], arg(2))){
      form_set_error('scholarshipItem', Error_Types(170));
    }
  }
  else{
    if(is_scholarship_type_name_existing($values['scholarshipItem'])){
      form_set_error('scholarshipItem', Error_Types(170));
    }
  }
}


/**
 * submit hook {@link for staff_school_fees_create_modify_scholarship_types_form()}, create CCK 'school_fees_scholarship_types'
 *
 * @uses is_valid_scholarship_type()
 */
function staff_school_fees_create_modify_scholarship_types_form_submit($form, &$form_state){
  if(arg(2) && is_numeric(arg(2)) && is_valid_scholarship_type(arg(2))){
    $node = node_load(arg(2));
    $node->title                               = $form_state['values']['scholarshipItem'];
    $node->field_scholarship_types[0]['value'] = $form_state['values']['scholarshipItem'];

    drupal_set_message($form_state['values']['scholarshipItem'] . ' Scholarship Type was updated!<br />');

  }
  else {
    $node = new stdClass();
    $node->type                                   = 'school_fees_scholarship_types';
    $node->uid                                    = 1;  // Admin
    $node->status                                 = 1;  // Published
    $node->promote                                = 0;
    $node->sticky                                 = 0;
    $node->comment                                = 0;
    $node->title                                  = $form_state['values']['scholarshipItem'];
    $node->field_scholarship_types[0]['value'] = $form_state['values']['scholarshipItem'];

    drupal_set_message($form_state['values']['scholarshipItem'] . ' Scholarship Type has been created!<br />');
  }

  node_save($node);

  drupal_goto("staff/createmodifschlshptypes");
}


/**
 * Does a Scholarship Type Name exist?
 *
 * @param string $name
 * @param int Drupal node nid for CCK 'school_fees_scholarship_types'
 * @return bool
 */
function is_scholarship_type_name_existing($name, $nid = 0){
  if ($nid != 0)
    $sql = "SELECT nid FROM {content_type_school_fees_scholarship_types} WHERE field_scholarship_types_value = '%s' AND nid != %d ";
  else
    $sql = "SELECT nid FROM {content_type_school_fees_scholarship_types} WHERE field_scholarship_types_value='%s' ";

  $r = db_query($sql, $name, $nid);

  if(db_affected_rows($r) > 0) return true;

  return false;
}


/**
 * Is a Scholarship Type valid?
 *
 * @param int $nid Drupal node nid for CCK 'school_fees_scholarship_types'
 * @return bool
 */
function is_valid_scholarship_type($nid) {
  $result = db_query("SELECT nid FROM {content_type_school_fees_scholarship_types} WHERE nid =%d ", $nid);
  if (db_affected_rows($result) > 0 ) return true;

  return false;
}


/**
 * Return HTML to Display Scholarship Types
 *
 * @return string HTML
 */
function staff_display_available_scholarships() {
  $str  = "<b>Available Scholarship Types</b><br />";

  $sql = "SELECT nid, field_scholarship_types_value scholarship_type FROM {content_type_school_fees_scholarship_types} ORDER BY field_scholarship_types_value ";
  $rs = db_query($sql);
  if (db_affected_rows($rs) <= 0) {
    $str .= Error_Types(106);
  }
  else {
    $str .= "
    Please click on a Scholarship Type name to Modify it.<br />
    <table width = '50%' border=1>
      <tr>
        <td><b>#</b></td>
        <td><b>Scholarship Type</b></td>
      </tr>";$i = 1;

      while($r = db_fetch_object($rs)){
        $k = $r->nid;
        if ($i%2){$rcolor = "#E5E5E5";} else {$rcolor = "#FFFFFF";}
          $str .= "
             <tr bgcolor = \"$rcolor\" onMouseOver = \"this.bgColor = '#FDD381';\" onMouseOut = \"this.bgColor = '$rcolor';\">
               <td>". $i++ ."</td>
               <td><a  title='Modify' href='" . url("staff/createmodifschlshptypes/$k") ."'>". $r->scholarship_type ."</a></td>
             </tr>";
      }
      $str .= "
      </table>";
  }
  return $str;
}


/**
 * Handles 'staff/removepending' menu to Remove Pending Invoices
 *
 * @uses staff_has_eduerp_role()
 * @uses get_remove_pending_order_form()
 * @return string HTML
 */
function staff_school_fees_remove_pending_orders(){
  global $user;
  ob_start();
  $html = "";
  $isAuthorized = staff_has_eduerp_role($user->uid, 0, 0, array('Bursar')) ? true : false;

  $html = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;Remove Pending Invoices</font><br /><br />";
  $html .= '<hr /><br />';
  if($isAuthorized){
    $html .= "<b>Remove Pending Invoices</b> - Remove Pending Invoices that have not been paid for in the past number of days OR Cancel a Specific Pending Invoice and its items.<br />";
    $html .= '<br />';

      $html .= drupal_get_form('get_remove_pending_order_form');
   }
   else {
      drupal_set_message(Error_Types(104), 'error');
    }

    $html .= '<br /><hr /><br />';

  echo $html;
  return ob_get_clean();
}


/**
 * Form to Remove Pending Invoices
 *
 * @uses get_remove_pending_order_form_validate()
 * @uses get_remove_pending_order_form_submit()
 * @return array Drupal Form
 */
function get_remove_pending_order_form(){
  $form['#title'] = 'Remove Pending Invoices';
  $form['number_of_days'] = array(
      '#title' => 'Number of days (if there is a specific Invoice Number entered below, that takes precedence and this value will not be used)',
      '#type' => 'textfield',
      '#size' => 40,
      '#default_value' => 30,
    );

  $form['order_number'] = array(
      '#title' => 'Invoice Number (Integer part only)',
      '#type' => 'textfield',
      '#size' => 40,
    );

  $form['submit'] = array(
    '#value' => 'Remove Now',
    '#type' => 'submit'
  );

$form['title_test'] = array(
    '#type' => 'item',
    '#value' => "<b><font color='#ff0000'>Warning: Please only remove pending invoices long after any Student might go to Bank to pay, as EduPay will still maintain a record which the Bank could access.</font></b>",
    );
  return $form;
}


/**
 * validate hook for {@link get_remove_pending_order_form()}
 */
function get_remove_pending_order_form_validate($form, &$state){
  $values = $state['values'];

  if (!empty($values['order_number'])) {
    if (! preg_match("/^[0-9]{1,10}$/", $values['order_number'])) {
      form_set_error('order_number', 'The Invoice Number Format is Bad');
    }
    else {
      return;
    }
  }

  if(empty($values['number_of_days']) || ! preg_match("/^[0-9]{1,3}$/", $values['number_of_days'])){
    form_set_error('number_of_days', Error_Types(137));
  }
}


/**
 * submit hook for {@link get_remove_pending_order_form()}, mark 'uc_orders' and 'fees_order' as 'canceled' to Cancel Invoice
 */
function get_remove_pending_order_form_submit($form, &$state){
  $values = $state['values'];

  if (!empty($values['order_number'])) {
    $rs = db_query("
      UPDATE {uc_orders} uco, {fees_order} fo
      SET uco.order_status = 'canceled', fo.status = 'canceled'
      WHERE
        (uco.order_status='pending'
          OR
        (uco.order_status='payment_received' AND fo.expiry_date IS NULL))
        AND
        uco.order_id=fo.order_id AND uco.order_id=%d", $values['order_number']); // Only cancel Pending Orders or Orders that involve no real Payment i.e. 'expiry_date' not set by EduPay callback
  }
  else {
    $rs = db_query("UPDATE {uc_orders} uco, {fees_order} fo SET uco.order_status = 'canceled', fo.status = 'canceled' WHERE uco.order_status='pending' AND ((UNIX_TIMESTAMP()-uco.created)/(60*60*24)) > %d AND uco.order_id=fo.order_id", $values['number_of_days']); // Set any 'pending' orders to 'canceled' if they have been there for at least $days
  }

  if($rs){
    $num = db_affected_rows($rs);
    if($num < 0) $num = 0;
      drupal_set_message("The Operation was successful. Total number of records affected is: ". $num);
  }
  else
    drupal_set_message(Error_Types(171), 'error');
}


/**
 * Handles 'staff/add_once_off_invoice' menu to Add Once Off Invoice
 *
 * @uses staff_has_eduerp_role()
 * @return string HTML
 */
function staff_add_once_off_invoice() {
  global $user;
  ob_start();

  $html  = '<br /><hr /><br />';
  $html .= "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href = '". url('staff/schoolfeesadmin') ."'>School Fees Administration</a>&nbsp; &raquo; &nbsp;Add a Once Off Invoice</font><br /><br />";
  $html .= '<hr /><br />';
  if (staff_has_eduerp_role($user->uid, 0, 0, array('Bursary', 'Bursar'))) {
    $html .= "<b>Add a Once Off Invoice</b> - Add a Once Off Invoice for a Student.<br />";
    $html .= '<br />';

    $html .= drupal_get_form('add_once_off_invoice_form');
  }
  else {
    drupal_set_message(Error_Types(104), 'error');
  }

  $html .= '<br /><hr /><br />';

  echo $html;
  return ob_get_clean();
}


/**
 * Form to Add Once Off Invoice
 *
 * @uses add_once_off_invoice_form_validate()
 * @return array Drupal Form
 */
function add_once_off_invoice_form() {
  $form['#title'] = 'Add a Once Off Invoice';
  $form['admission'] = array(
      '#title' => 'Admission Number for Student that needs to make the Payment',
      '#type' => 'textfield',
      '#size' => 60,
      '#required' => TRUE,
    );
  $form['description'] = array(
      '#title' => 'Description of Payment (short!)',
      '#type' => 'textfield',
      '#size' => 60,
      '#required' => TRUE,
    );
  $form['price'] = array(
      '#title' => 'Amount of Payment (no currency symbol, comma or decimal point)',
      '#type' => 'textfield',
      '#size' => 60,
      '#required' => TRUE,
    );
  $form['submit'] = array(
    '#value' => 'Create a New Once Off Invoice for this Student; Click Once Only!',
    '#type' => 'submit'
  );
  return $form;
}


/**
 * validate hook for {@link add_once_off_invoice_form()}, After Validation, Add the Invoice and Send to EduPay
 *
 * @uses create_uc_product()
 * @uses uc_order_product_save()
 * @uses get_fee_items()
 * @uses student_next_level()
 * @uses uc_eduerp_fees_get_profile_items()
 * @uses uc_edupay_save()
 */
function add_once_off_invoice_form_validate($form, &$state) {
  global $base_url;
  $values = $state['values'];
  $bad = FALSE;

  $row = db_fetch_object(db_query("SELECT uid FROM {users} WHERE name='%s'", $values['admission']));
  $uid = $row->uid;
  if (empty($uid)) {
    form_set_error('admission', 'Admission Number could Not be Found');
    $bad = TRUE;
  }

  $description = check_plain($values['description']);

  $price = (int)$values['price'];
  if ($price <= 0) {
    form_set_error('price', 'Price must be greater than Zero');
    $bad = TRUE;
  }
  if ($bad) return;

  $student_user = user_load(array('uid' => $uid));

  $student_profile = new UserProfile($uid);

  $studentname = '';
  if (!empty($student_profile->profile_first_name) && !empty($student_profile->profile_last_name)) {
    $middle = '';
    if (!empty($student_profile->profile_middle_name)) $middle = ' ' . $student_profile->profile_middle_name;
    $studentname = "{$student_profile->profile_last_name}, {$student_profile->profile_first_name}{$middle}";
  }

  $row = db_fetch_object(db_query("SELECT field_programme_name_value FROM {content_type_program} WHERE nid=%d", $student_profile->profile_first_choice));
  $programme = $row->field_programme_name_value;

  $data = serialize(array(0 => array('type' => 'fees', 'programme' => $programme, 'fullnames' => $studentname, 'timeout' => 2145913199)));
  db_query("INSERT INTO {uc_orders}
           (uid, order_status, order_total, product_count, primary_email, delivery_first_name, delivery_last_name, delivery_phone, delivery_company, delivery_street1, delivery_street2, delivery_city, delivery_zone, delivery_postal_code, delivery_country, billing_first_name, billing_last_name, billing_phone, billing_company, billing_street1, billing_street2, billing_city, billing_zone, billing_postal_code, billing_country, payment_method, data, created, modified, host, currency)
    VALUES ( %d,         '%s',          %f,             1,          '%s',                  '',                 '',             '',               '',               '',               '',            '',             0,                   '',              840,                 '',                '',            '',              '',              '',              '',           '',            0,                   0,             840,       'edupay', '%s',      %d,       %d, '%s',    'NGN')",
           $uid,    'pending',      $price,          $student_user->mail,                                                                                                                                                                                                                                                                                                                                                                                $data,  time(),   time(), ip_address());

  $order_id = db_last_insert_id('uc_orders', 'order_id');

  // Submit might be clicked multiple times, if so stop now
  // Drupal HTTP timeout is 30 seconds... so need to allow at least that long (i.e. 50 seconds)
  $now = time();
  $rs = db_query("SELECT order_id, created FROM {uc_orders} WHERE uid=%d AND order_id!=%d AND created>%d", $uid, $order_id, $now - 50);
  if ($r = db_fetch_object($rs)) {
    form_set_error('admission', 'You seem to have Submitted this form twice in rapid succession, Invoice: ' . $r->order_id . ' was already created');
    return;
  }

  $productNID = create_uc_product($description, $price, FALSE);
  $productNode = node_load($productNID);

  $uc_order_product = new stdClass();
  $uc_order_product->nid = $productNID;
  $uc_order_product->title = $description;
  $uc_order_product->manufacturer = '';
  $uc_order_product->model = $productNode->model;
  $uc_order_product->qty = 1;
  $uc_order_product->cost = 0.0;
  $uc_order_product->price = $price;
  $uc_order_product->weight = 0;

  $transaction_token = uniqid();
  $uc_order_product->data = array('transaction_token' => $transaction_token);

  uc_order_product_save($order_id, $uc_order_product);

  $fees_order = array();
  $fees_order['product_nid'] = $productNID;

  $feeStudentOption = get_fee_items($uid);

  $fees_order['nid'] = $feeStudentOption['studentFeeSetupNID'];
  $fees_order['type'] = 'fees';
  $fees_order['cart_item_id'] = 0;
  $fees_order['title'] = $description;
  $fees_order['price'] = $price;
  $fees_order['nationality'] = $feeStudentOption['nationality_name'];
  $fees_order['programme'] =  $feeStudentOption['fee_structure_name'];
  $fees_order['level_name'] = student_next_level($student_user->uid, variable_get('eduerp_current_session', ''));
  $fees_order['session'] = variable_get('eduerp_current_session', '');
  $fees_order['late_registration_date'] = 2145913199;
  $fees_order['late_registration_amount'] = 0.00000;
  $fees_order['late_registration_nid'] = NULL;
  $fees_order['late_registration_description'] = NULL;
  $fees_order['uid'] = $uid;
  $fees_order['jambno'] = $student_user->name;
  $fees_order['fullnames'] = $studentname;
  $fees_order['institution'] = 1;
  $fees_order['status'] = 'pending';
  $fees_order['order_id'] = $order_id;
  $fees_order['scholarship'] = 0;
  $fees_order['allow_instalment'] = 0;
  $fees_order['hostel_nid'] = NULL;
  $fees_order['hostel_type'] = 'hostel';
  $fees_order['attributes'] = NULL;
  $fees_order['module'] = 'uc_product';

  $profile_items = uc_eduerp_fees_get_profile_items($uid);
  $fees_order['college'] = $profile_items['college'];
  $fees_order['course'] = $profile_items['course'];

  $fees_order['original_amount'] = $price;
  $fees_order['scholarship_type'] = 'None';
  $fees_order['sponsor'] = 'None';

  unset($_SESSION['edupay_total_amount_zero']);

  uc_edupay_save($order_id, $fees_order);

  $fees = array();

  $order_parm = array(
    'order_id' => $order_id,
    'transaction_token' => $transaction_token,
    'full_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($studentname)),
    'matriculation_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($student_user->name)),
    'total_amount' => 0.0 + $price,
    'currency' => 'NGN',
    'timeout' => $fees_order['late_registration_date'],
    'programme' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($programme)),
    'session' => $fees_order['session'],
    'banks' => array(
      array(
        'name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_name', ''))),
        'account_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_account_name', ''))),
        'account_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_1_account_number', ''))),
      ),
      array(
        'name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_name', ''))),
        'account_name' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_account_name', ''))),
        'account_number' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags(variable_get('eduerp_institution_bank_2_account_number', ''))),
      ),
    ),
  );

  $callback_url = $base_url . '/edupay/callback';

  $callback_data = array(
    'uid' => (int)$uid
  );

  $fees[] = array(
    'title' => str_replace(array("\r", "\n", "<", ">", "&", '"', "'", "\\"), array('', '', '', '', '', '', '', ''), strip_tags($description)),
    'amount' => 0.0 + $price,
    'currency' => 'NGN'
  );

  //dsm(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));//ab

  // Try to send POST immediately, if this does not work, we will queue
  $data = drupal_to_js(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));

  $headers = array(
    'Authorization' => 'Basic ' . base64_encode(variable_get('uc_edupay_username', '') . ':' . variable_get('uc_edupay_password_md5', '')),
    'Content-Type' => 'application/json');
  $result = drupal_http_request(variable_get('uc_edupay_transaction_url', ''), $headers, 'POST', $data);

  if ($result->code != 200) {
    $data = serialize(array('order' => $order_parm, 'fees' => $fees, 'callback_url' => $callback_url, 'callback_data' => $callback_data));
    db_query("INSERT INTO cron_edupay_send_queue (data) VALUES ('%s')", $data);
  }

  drupal_set_message('<a href="' . url('user/' . $uid . '/order/' . $order_id . '/invoice/print') . '" target="_blank">Invoice ' . $order_id . ' Created for Student (click here)</a>');
}


/**
 * Handles 'staff/changeuncleared' menu to Change Programme for Uncleared Candidate
 *
 * @used staff_has_eduerp_role()
 * @used get_candidate_info_form()
 * @used staff_candidate_change_programme_form()
 * @global int $_SESSION['eduerp_change_uncleared_on']
 * @global array $_SESSION['eduerp_change_uncleared_info']
 * @return string HTML
 */
function staff_change_uncleared_candidate_programme() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
      $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Change Programme for Uncleared Candidate</font><br /><br />";
      $navi .= '<br /><hr /><br />';
  if(isset($_SESSION['eduerp_change_uncleared_on'])) $_POST['eduerp_change_uncleared_on'] = $_SESSION['eduerp_change_uncleared_on'];

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registry', 'Registrar'))) {

    if (! isset($_SESSION['eduerp_change_uncleared_on']) && ! isset($_POST['eduerp_change_uncleared_on'])) {

      echo $navi;
      echo "<b>Get Candidate Info</b> - Please fill the form as appropriate<br /><br />";
      echo drupal_get_form('get_candidate_info_form');
    }
    elseif ($_POST['eduerp_change_uncleared_on'] == 1) {//page1

        $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;<a href='". url('staff/changeuncleared') ."'>Change Programme for Uncleared Candidate</a>&nbsp; &raquo; &nbsp; Candidate: <b>". $_SESSION['eduerp_change_uncleared_info']['mat_no'] ."</b>&nbsp; &raquo; &nbsp; Select New Programme</font><br /><br />";
        $navi .= '<br /><hr /><br />';
        echo $navi;
        echo "<b>Candidate's Current Info</b> | <b>". $_SESSION['eduerp_change_uncleared_info']['fname'] ."</b>
        | <b>". $_SESSION['eduerp_change_uncleared_info']['current_programme_name'] ."</b>

        <br /><br />- Select a New Programme for the Candidate<br />";
        echo drupal_get_form('staff_candidate_change_programme_form');
      }
  }
  else {
    echo $navi;
    drupal_set_message(Error_Types(127), 'error');
  }
  unset($_SESSION['eduerp_change_uncleared_on']);
  return ob_get_clean();
}

/**
 * Form to Find Student in order to Change Programme for Uncleared Candidate
 *
 * @uses get_candidate_info_form_validate()
 * @return array Drupal Form
 */
function get_candidate_info_form() {
  $form['#title'] = 'Get Candidate Information ';

  $form['jamb_no'] = array(
    '#type' => 'textfield',
    '#title' => 'JAMB Number',
    '#required' => TRUE
  );

  $form['submit'] = array(
      '#value' => 'Get Candidate Info',
      '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link get_candidate_info_form()}
 *
 * @uses get_programmes()
 * @global int $_SESSION['eduerp_change_uncleared_on']
 * @global array $_SESSION['eduerp_change_uncleared_info']
 */
function get_candidate_info_form_validate($form, &$state) {
  $values = $state['values'];

  $rs = db_query("SELECT nspro.uid uid
	FROM {content_type_student_profile} spro
	INNER JOIN {node} nspro ON spro.vid=nspro.vid
	WHERE nspro.type='student_profile' AND field_profile_jambno_value='%s'", $values['jamb_no']);

  if( db_affected_rows($rs) <= 0) {
    form_set_error('jamb_no', Error_Types(172));
  }
  else {
    $studentInfo = db_fetch_object($rs);

    //make sure the candidate is not already cleared.
    $role = db_result(db_query("SELECT r.name FROM {users_roles} ur, {role} r WHERE ur.rid=r.rid AND ur.uid=%d AND r.name='Student'", $studentInfo->uid));
    if ($role) {
      form_set_error('jamb_no', Error_Types(173));
      return;
    }

    $student_profile = new UserProfile($studentInfo->uid);
    //get the current programme name
    $rs = get_programmes($student_profile->profile_first_choice);
    $programmeInfo = db_fetch_object($rs);

    $studInfo = array('uid'=>$studentInfo->uid, 'fname'=>$student_profile->profile_last_name .', '. $student_profile->profile_first_name .' '. $student_profile->profile_middle_name,
          'current_programme_nid'=>$programmeInfo->programme_nid,
          'current_programme_name'=>$programmeInfo->programme_name
          );

    unset($_SESSION['eduerp_change_uncleared_info']);
    $_SESSION['eduerp_change_uncleared_on'] = 1;//keep showing the form
    $_SESSION['eduerp_change_uncleared_info'] = $studInfo;
  }
}


/**
 * submit hook for {@link staff_candidate_change_programme_form()}
 *
 * @uses get_programmes()
 * @global array $_SESSION['eduerp_change_uncleared_info']
 */
function staff_candidate_change_programme_form_submit($form, &$state) {
  $values = $state['values'];
  $rs = get_programmes($values['programme_nid']);
  $programmeInfo = db_fetch_object($rs);
  $student_profile = new UserProfile($_SESSION['eduerp_change_uncleared_info']['uid']);
  $_SESSION['eduerp_change_uncleared_info']['new_programme_nid'] = $values['programme_nid'];
  $_SESSION['eduerp_change_uncleared_info']['new_programme_name'] = $programmeInfo->programme_name;

  $first_choice = $_SESSION['eduerp_change_uncleared_info']['new_programme_nid'];
  $student_profile->profile_first_choice = $first_choice;
  $student_profile->save();

  drupal_set_message("The Candidates's Programme was changed successfully from <b>". $_SESSION['eduerp_change_uncleared_info']['current_programme_name'] ."</b> to <b>". $_SESSION['eduerp_change_uncleared_info']['new_programme_name'] ."</b>");

  unset($_SESSION['eduerp_change_uncleared_info']);

  drupal_goto('staff/changeuncleared');//force a refresh
}


/**
 * validate hook for {@link staff_candidate_change_programme_form()}
 */
function staff_candidate_change_programme_form_validate($form, &$state) {
  if (empty($state['values']['programme_nid'])) form_set_error('programme_nid', 'You must Select a Programme');
}


/**
 * Form to Change Programme for Uncleared Candidate
 *
 * @uses staff_candidate_change_programme_form_validate()
 * @uses staff_candidate_change_programme_form_submit()
 * @uses get_programmes()
 * @return array Drupal Form
 */
function staff_candidate_change_programme_form() {
  $form['#title'] = "Change a Candidate's Programme";

 $form['programme_nid'] = array(
    '#type' => 'select',
    '#options' => array(''=>'') + get_programmes(0, true),
    '#title' => 'New Programme for Candidate',
    '#required' => TRUE
  );

 $form['eduerp_change_uncleared_on'] = array(
    '#type' => 'hidden',
    '#default_value'=>1,
    '#title' => 'keep showing form'
  );

  $form['submit'] = array(
      '#value' => 'Change Student Programme Now',
      '#type' => 'submit'
  );
  return $form;
}


/**
 * Handles 'staff/archivestudent' menu to Archive a Student who does not yet have any Exam Marks
 *
 * @uses staff_has_eduerp_role()
 * @return string HTML
 */
function staff_archive_student() {
  global $user;
  ob_start();
  echo '<br /><hr /><br />';
  $navi = "<font size = '1px'><a href = '". url('staff/semester') ."'>Semester Administration</a>&nbsp; &raquo; &nbsp;Archive a Student who does not yet have any Exam Marks</font><br />";
  $navi .= '<br /><hr /><br />';
  echo $navi;

  if (staff_has_eduerp_role($user->uid, 0, 0, array('Registrar'))) {
    echo drupal_get_form('staff_archive_student_form');
  }
  else {
    drupal_set_message(Error_Types(127), 'error');
  }
  return ob_get_clean();
}


/**
 * Form to Archive a Student who does not yet have any Exam Marks
 *
 * @uses staff_archive_student_form_validate()
 * @uses staff_archive_student_form_validate()
 * @return array Drupal Form
 */
function staff_archive_student_form() {
  $form['#title'] = 'Archive a Student';

  $form['jamb_no'] = array(
    '#type' => 'textfield',
    '#title' => 'JAMB Number',
    '#required' => TRUE
  );

  $form['submit'] = array(
    '#value' => 'Archive this Student',
    '#type' => 'submit'
  );

  return $form;
}


/**
 * validate hook for {@link staff_archive_student_form()}
 */
function staff_archive_student_form_validate($form, &$state) {
  $rs = db_query("SELECT nspro.uid uid
    FROM {content_type_student_profile} spro
    INNER JOIN {node} nspro ON spro.vid=nspro.vid
    WHERE nspro.type='student_profile' AND field_profile_jambno_value='%s'", $state['values']['jamb_no']);

  if (db_affected_rows($rs) > 1) {
    form_set_error('jamb_no', 'JAMB Number is Not Unique, Cannot Archive Student (IT support might temporarily change one of the numbers)');
    return;
  }

  $row = db_fetch_object($rs);
  if (!$row) {
    form_set_error('jamb_no', Error_Types(172));
  }
  else {
    $uid = $row->uid;

    $sql =
      "SELECT SUM(field_ca1_value) + SUM(field_ca2_value) + SUM(field_ca3_value) + SUM(field_ca4_value) + SUM(field_exam_score_value) AS total
      FROM {content_type_student_grades}
      WHERE field_mat_no_uid=%d AND field_dropped_value=0";
    $rs = db_query($sql, $uid);
    $row = db_fetch_object($rs);
    if (!empty($row->total)) form_set_error('jamb_no', 'This Student has Exam Marks and Cannot be Archived');

    $sql = "
      SELECT sg.nid
      FROM {content_type_student_grades} sg, {content_type_course_instance} ci
      WHERE
        sg.field_mat_no_uid=%d AND
        sg.field_course_instance_nid=ci.nid AND
        ci.field_sess_name_value!='%s'
      LIMIT 1";
    $rs = db_query($sql, $uid, variable_get('eduerp_current_session', ''));
    if ($row = db_fetch_object($rs)) form_set_error('jamb_no', 'This Student has Exam Marks for other Sessions and Cannot be Archived');

    $sql = "
      SELECT gpa.nid
      FROM {content_type_student_gpa} gpa
      WHERE
        gpa.field_student_ref_gpa_uid=%d AND
        gpa.field_sess_name_gpa_value!='%s'
      LIMIT 1";
    $rs = db_query($sql, $uid, variable_get('eduerp_current_session', ''));
    if ($row = db_fetch_object($rs)) form_set_error('jamb_no', 'This Student has Grades for other Sessions and Cannot be Archived');
  }
}


/**
 * submit hook for {@link staff_archive_student_form()}, Archive the Student
 *
 * @uses eduerp_delete_role()
 * @uses delete_student_grades()
 * @uses delete_student_gpa()
 */
function staff_archive_student_form_submit($form, &$state) {
  $row = db_fetch_object(db_query("SELECT nspro.uid uid
  FROM {content_type_student_profile} spro
  INNER JOIN {node} nspro ON spro.vid=nspro.vid
  WHERE nspro.type='student_profile' AND field_profile_jambno_value='%s'", $state['values']['jamb_no']));
  $uid = $row->uid;

  $student_profile = new UserProfile($uid);
  if (substr($student_profile->profile_jambno, 0, 8) != 'ARCHIVED') {
    $student_profile->profile_jambno = 'ARCHIVED' . $student_profile->profile_jambno;
    $student_profile->save();
  }

  $student_user = user_load($uid);

  eduerp_delete_role($student_user, 'Student');
  eduerp_delete_role($student_user, 'Applicant');

  user_save($student_user, array('status' => 0)); // Block

  delete_student_grades($uid, variable_get('eduerp_current_session', ''), 1);
  delete_student_grades($uid, variable_get('eduerp_current_session', ''), 2);
  delete_student_grades($uid, variable_get('eduerp_current_session', ''), 3);

  delete_student_gpa($uid, variable_get('eduerp_current_session', ''), 1);
  delete_student_gpa($uid, variable_get('eduerp_current_session', ''), 2);
  delete_student_gpa($uid, variable_get('eduerp_current_session', ''), 3);

  drupal_set_message('Student Archived');
}


/**
 * Delete nodes for CCK 'student_gpa' for a Student in a Session/Semester
 *
 * @param int $uid
 * @param string $session
 * @param int $semester
 */
function delete_student_gpa($uid, $session, $semester) {
  $sql = "SELECT gpa.nid
    FROM {content_type_student_gpa} gpa
    WHERE
      gpa.field_student_ref_gpa_uid=%d AND
      gpa.field_sess_name_gpa_value='%s' AND
      gpa.field_semester_name_gpa_value=%d";
  $result = db_query($sql, $uid, $session, $semester);

  while ($row = db_fetch_object($result)) {
    // Copied from node_delete(), but want to bypass access control.
    $node = node_load($row->nid);

    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);

    // Call the node-specific callback (if any):
    node_invoke($node, 'delete');
    node_invoke_nodeapi($node, 'delete');

    // Clear the page and block caches.
    cache_clear_all();

    // Remove this node from the search index if needed.
    if (function_exists('search_wipe')) {
      search_wipe($node->nid, 'node');
    }
  }
}
?>
