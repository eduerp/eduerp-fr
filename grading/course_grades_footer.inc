<?php
/**
 * Footer for course_grades View 20100228
 *
 * @global stdClass $eduerpapprovalform is set to contain values needed for various approval forms.
 */

global $user;
global $base_url;

if (!empty($_SESSION['views']['course_grades']['default']['coursecode']) &&
    !empty($_SESSION['views']['course_grades']['default']['session']) &&
    !empty($_SESSION['views']['course_grades']['default']['semester'])) {

  $coursecode = $_SESSION['views']['course_grades']['default']['coursecode'];
  $session = $_SESSION['views']['course_grades']['default']['session'];

  if (empty($_SESSION['views']['course_grades']['default']['semester'])) $semester = 'All';
  else $semester = $_SESSION['views']['course_grades']['default']['semester'];
  if ($semester === 'All') $semesterwhere = '';
  else $semesterwhere = 'AND ci.field_semester_name_value=' . (int)$semester;

  if (empty($_SESSION['views']['course_grades']['default']['location'])) $location = 'All';
  else $location = $_SESSION['views']['course_grades']['default']['location'];
  if ($location === 'All') $locationwhere = '';
  else $locationwhere = 'AND ci.field_location_value=' . (int)$location;

  // Determine how CA should be treated
  $sql = "SELECT cgw.number_of_ca, cgw.ca_approved_onebyone, cgw.max_mark_ca1, cgw.max_mark_ca2, cgw.max_mark_ca3, cgw.max_mark_ca4, cgw.max_mark_exam
    FROM {course_grade_weightings} cgw, {content_type_course} c
    WHERE
      (cgw.course_id=c.nid OR cgw.course_id=0) AND
      c.field_code_value='%s'
    ORDER BY cgw.course_id DESC";  // Select the course specific one (if any) first followed by the default one
  $weightings = db_query($sql, $coursecode);
  $row = db_fetch_object($weightings);
  $number_of_ca = $row->number_of_ca;
  $ca_approved_onebyone = $row->ca_approved_onebyone;

  $sql = "SELECT DISTINCT
      d.field_college_id_nid AS college_id,
      c.field_department_nid_nid AS department_id,
      ci.field_lecturer_uid AS lecturer_uid,
      ci.field_lecturer_alternate_uid AS lecturer_alternate_uid,
      ci.field_repeat_value AS repeatexam
    FROM {content_type_department} d, {content_type_course} c, {content_type_course_instance} ci
    WHERE
      d.nid=c.field_department_nid_nid AND
      c.field_code_value='%s' AND
      c.nid=ci.field_course_id_nid AND
      ci.field_sess_name_value='%s'
      $semesterwhere $locationwhere";
  $staffresult = db_query($sql, $coursecode, $session);
  $staff = db_fetch_object($staffresult);

  $singlelecturer = TRUE;
  if (db_fetch_object($staffresult)) $singlelecturer = FALSE; // Found more records, so there are a number of course_instance(s) with different lecturers

  if (empty($staff->lecturer_uid)) $staff->lecturer_uid = 0;
  if (empty($staff->lecturer_alternate_uid)) $staff->lecturer_alternate_uid = 0;

  if ($staff->repeatexam) {
    $number_of_ca = 0;
    $row->max_mark_exam = 100;
  }

  echo t('Maximum marks allowed...');
  for ($i=1; $i<=$number_of_ca; $i++) echo ' ' . t('CA') . "{$i}: " . $row->{'max_mark_ca' . $i} . ',';
  echo ' ' . t('Exam Score') . ": {$row->max_mark_exam}<br /><br />";

  // Number of grades of each level (A-F)
  $sql = "SELECT field_grade_value, COUNT(*) AS count FROM {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      c.field_code_value='%s' AND
      ci.field_sess_name_value='%s'
      $semesterwhere $locationwhere AND
      ci.field_course_id_nid=c.nid
    GROUP BY field_grade_value
    ORDER BY field_grade_value";
  $countgrades = db_query($sql, $coursecode, $session);

  echo '<table class="body-table"><tbody>';
  echo '<tr><th valign="top" class="table-label" colspan="2">' . t('RESULTS SUMMARY') . '</th></tr>';

  $total = 0;
  $missing = 0;
  while ($row = db_fetch_object($countgrades)) {
    if ($row->field_grade_value === '-') {
      $missing = $row->count;
    }
    else {
      echo '<tr>';
      echo '<td valign="top" class="table-label">' . t('Number of !field_grade_value Grades', array('!field_grade_value Grades' => $row->field_grade_value)) . '</td>';
      echo '<td valign="top">' . $row->count . '</td>';
      echo '</tr>';
    }
    $total += $row->count;
  }
  echo '<tr>';
  echo '<td valign="top" class="table-label">' . t('Number of Missing Grades') . '</td>';
  echo '<td valign="top">' . $missing . '</td>';
  echo '</tr>';

  echo '<tr>';
  echo '<td valign="top" class="table-label">' . t('Total Number of Students') . '</td>';
  echo '<td valign="top">' . $total . '</td>';
  echo '</tr>';

  echo '<tr><td colspan="2"></td></tr>';

  // Approval Status
  $sql = "SELECT
      MIN(field_ca1locked_value) AS alllocked1,
      MIN(field_ca2locked_value) AS alllocked2,
      MIN(field_ca3locked_value) AS alllocked3,
      MIN(field_ca4locked_value) AS alllocked4,
      MIN(field_examscorelocked_value) AS alllockede,
      MAX(field_ca1locked_value) AS anylocked1,
      MAX(field_ca2locked_value) AS anylocked2,
      MAX(field_ca3locked_value) AS anylocked3,
      MAX(field_ca4locked_value) AS anylocked4,
      MAX(field_examscorelocked_value) AS anylockede
    FROM {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      c.field_code_value='%s' AND
      ci.field_sess_name_value='%s'
      $semesterwhere $locationwhere AND
      ci.field_course_id_nid=c.nid";
  $locksresult = db_query($sql, $coursecode, $session);
  $locks = db_fetch_object($locksresult);

  if ($ca_approved_onebyone && $number_of_ca >= 1) {
    echo '<tr>';
    echo '<td valign="top" class="table-label">' . t('Continuous Assessment 1') . '</td>';
    echo '<td valign="top">';
    if     ($locks->alllocked1 == 0) echo t('Not Submitted by Lecturer');
    elseif ($locks->alllocked1 == 1) echo t('All Submitted to Department');
    elseif ($locks->alllocked1 >= 2) echo t('All Approved by Department');
    echo '</td>';
    echo '</tr>';
  }

  if ($ca_approved_onebyone && $number_of_ca >= 2) {
    echo '<tr>';
    echo '<td valign="top" class="table-label">' . t('Continuous Assessment 2') . '</td>';
    echo '<td valign="top">';
    if     ($locks->alllocked2 == 0) echo t('Not Submitted by Lecturer');
    elseif ($locks->alllocked2 == 1) echo t('All Submitted to Department');
    elseif ($locks->alllocked2 >= 2) echo t('All Approved by Department');
    echo '</td>';
    echo '</tr>';
  }

  if ($ca_approved_onebyone && $number_of_ca >= 3) {
    echo '<tr>';
    echo '<td valign="top" class="table-label">' . t('Continuous Assessment 3') . '</td>';
    echo '<td valign="top">';
    if     ($locks->alllocked3 == 0) echo t('Not Submitted by Lecturer');
    elseif ($locks->alllocked3 == 1) echo t('All Submitted to Department');
    elseif ($locks->alllocked3 >= 2) echo t('All Approved by Department');
    echo '</td>';
    echo '</tr>';
  }

  if ($ca_approved_onebyone && $number_of_ca >= 4) {
    echo '<tr>';
    echo '<td valign="top" class="table-label">' . t('Continuous Assessment 4') . '</td>';
    echo '<td valign="top">';
    if     ($locks->alllocked4 == 0) echo t('Not Submitted by Lecturer');
    elseif ($locks->alllocked4 == 1) echo t('All Submitted to Department');
    elseif ($locks->alllocked4 >= 2) echo t('All Approved by Department');
    echo '</td>';
    echo '</tr>';
  }
  echo '<tr>';
  echo '<td valign="top" class="table-label">' . t('Exam Score') . '</td>';
  echo '<td valign="top">';
  if     ($locks->alllockede == 0) echo t('Not Submitted by Lecturer');
  elseif ($locks->alllockede == 1) echo t('All Submitted to Department');
  elseif ($locks->alllockede == 2) echo t('All Submitted to Faculty');
  elseif ($locks->alllockede == 3) {
    if (variable_get('RegistrarApprovesGrades', 0)) echo t('All Submitted to Registrar');
    else echo t('All Submitted to Vice Chancellor');
  }
  elseif ($locks->alllockede == 4) echo t('All Submitted to Vice Chancellor');
  elseif ($locks->alllockede == 5) echo t('All Approved by Vice Chancellor');
  echo '</td>';
  echo '</tr>';

  echo '</tbody></table>';

  // Used to...
  // (1) Determine who can see the HOD (or equiv) Grade approval form
  // (2) Determine who can see the HOD (or equiv) Grade unlock form
  $inroles = "'Head of Department', 'Department Grade Editor', 'Faculty Grade Editor', 'University Grade Editor'";

  $sql = "SELECT uid AS hod_uid
    FROM {eduerp_roles}
    WHERE (department_id=%d OR college_id=%d OR (department_id=0 AND college_id=0)) AND role IN ($inroles)";
  $hodresult = db_query($sql, $staff->department_id, $staff->college_id);
  $hod_uid = '';
  while ($hod = db_fetch_object($hodresult)) {
    if ($hod_uid === '') $hod_uid = $hod->hod_uid;
    else $hod_uid = $hod_uid . ',' . $hod->hod_uid;
  }
  if (empty($hod_uid)) $hod_uid = 0;

  global $eduerpapprovalform;
  $coursecodeenc = rawurlencode($coursecode);
  $sessionenc    = rawurlencode($session);
  $eduerpapprovalform->course_url = $base_url . "/course?coursecode={$coursecodeenc}&session={$sessionenc}&semester={$semester}&location={$location}";
  $eduerpapprovalform->lecturer_uid = $staff->lecturer_uid;
  $eduerpapprovalform->lecturer_alternate_uid = $staff->lecturer_alternate_uid;
  $eduerpapprovalform->hod_uid = $hod_uid;
  $eduerpapprovalform->coursecode = $coursecode;
  $eduerpapprovalform->session = $session;
  $eduerpapprovalform->semester = $semester;
  $eduerpapprovalform->location = $location;
  $eduerpapprovalform->number_of_ca = $number_of_ca;
  $eduerpapprovalform->ca_approved_onebyone = $ca_approved_onebyone;

  // Used to...
  // (1) Determine who can see the Lecturer (or equiv) Grade submission form in addition to the Lecturers
  $inroles = "'Department Grade Editor', 'Faculty Grade Editor', 'University Grade Editor'";

  $sql = "SELECT uid AS lecturerequiv_uid
    FROM {eduerp_roles}
    WHERE (department_id=%d OR college_id=%d OR (department_id=0 AND college_id=0)) AND role IN ($inroles)";
  $lecturerequivresult = db_query($sql, $staff->department_id, $staff->college_id);

  $lecturerequiv_uid_array = array();
  while ($lecturerequiv = db_fetch_object($lecturerequivresult)) {
    $lecturerequiv_uid_array[] = $lecturerequiv->lecturerequiv_uid;
  }

  // Do we want to show the Approval form for the Lecturer
  if (empty($hod_uid)) {
    echo t('THERE IS NO HEAD OF DEPARTMENT OR GRADE EDITOR ASSIGNED FOR THIS DEPARTMENT, ONE MUST BE ASSIGNED') . '<br />';
  }
  elseif ($user->uid == $staff->lecturer_uid || $user->uid == $staff->lecturer_alternate_uid || in_array($user->uid, $lecturerequiv_uid_array)) {
    $showform = FALSE;
    if     ($ca_approved_onebyone && $number_of_ca >= 1 && $locks->alllocked1 == 0) {
      $eduerpapprovalform->fieldtoapprove = 'field_ca1locked_value';
      $eduerpapprovalform->gradestext = t('First set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 2 && $locks->alllocked2 == 0) {
      $eduerpapprovalform->fieldtoapprove = 'field_ca2locked_value';
      $eduerpapprovalform->gradestext = t('Second set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 3 && $locks->alllocked3 == 0) {
      $eduerpapprovalform->fieldtoapprove = 'field_ca3locked_value';
      $eduerpapprovalform->gradestext = t('Third set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 4 && $locks->alllocked4 == 0) {
      $eduerpapprovalform->fieldtoapprove = 'field_ca4locked_value';
      $eduerpapprovalform->gradestext = t('Fourth set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($locks->alllockede == 0) {
      $eduerpapprovalform->fieldtoapprove = 'field_examscorelocked_value';
      $eduerpapprovalform->gradestext = t('Final Exam Grades');
      $showform = TRUE;
    }

    if ($showform) {
      if ($singlelecturer) {
        echo drupal_get_form('approve_grades_lecturer_form');
      }
      else {
        echo t('YOU MUST CHOOSE A SPECIFIC LOCATION ABOVE IF YOU WANT TO APPROVE GRADES. CHOICES ARE...') . '<br />';
        listlocations($coursecode, $session, $semesterwhere, $locationwhere);
      }
    }
  }

  // Do we want to show the Unlock form for the HOD
  $hod_uid_array = explode(',', $hod_uid);
  if (in_array($user->uid, $hod_uid_array)) {
    $showform = FALSE;
    if ($locks->anylockede && $locks->alllockede < 5) {
      $eduerpapprovalform->fieldtoapprovehod = 'field_examscorelocked_value';
      $eduerpapprovalform->gradestexthod = t('Final Exam Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 4 && $locks->anylocked4 && $locks->alllockede < 5) { // If any CA4 locked and VC has not approved the Final Exam
      $eduerpapprovalform->fieldtoapprovehod = 'field_ca4locked_value';
      $eduerpapprovalform->gradestexthod = t('Fourth set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 3 && $locks->anylocked3 && $locks->alllockede < 5) {
      $eduerpapprovalform->fieldtoapprovehod = 'field_ca3locked_value';
      $eduerpapprovalform->gradestexthod = t('Third set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 2 && $locks->anylocked2 && $locks->alllockede < 5) {
      $eduerpapprovalform->fieldtoapprovehod = 'field_ca2locked_value';
      $eduerpapprovalform->gradestexthod = t('Second set of Continuous Assessment Grades');
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 1 && $locks->anylocked1 && $locks->alllockede < 5) {
      $eduerpapprovalform->fieldtoapprovehod = 'field_ca1locked_value';
      $eduerpapprovalform->gradestexthod = t('First set of Continuous Assessment Grades');
      $showform = TRUE;
    }

    if ($showform) {
      if ($singlelecturer) {
        echo drupal_get_form('unlock_grades_hod_form');
      }
      else {
        echo t('YOU MUST CHOOSE A SPECIFIC LOCATION ABOVE IF YOU WANT TO UNLOCK GRADES. CHOICES ARE...') . '<br />';
        listlocations($coursecode, $session, $semesterwhere, $locationwhere);
      }
    }
  }

  // Used to...
  // (1) Determine who can see the Dean (or equiv) Grade approval form
  $inroles = "'Dean of Faculty', 'Faculty Grade Editor', 'University Grade Editor'";

  $sql = "SELECT uid AS dean_uid
    FROM {eduerp_roles}
    WHERE (department_id=%d OR college_id=%d OR (department_id=0 AND college_id=0)) AND role IN ($inroles)";
  $hodresult = db_query($sql, $staff->department_id, $staff->college_id);
  $dean_uid = '';
  while ($hod = db_fetch_object($hodresult)) {
    if ($dean_uid === '') $dean_uid = $hod->dean_uid;
    else $dean_uid = $dean_uid . ',' . $hod->dean_uid;
  }
  if (empty($dean_uid)) $dean_uid = 0;

  $eduerpapprovalform->dean_uid = $dean_uid;

  // Do we want to show the Approval form for the HOD
  if (empty($dean_uid)) {
    echo t('THERE IS NO DEAN OR GRADE EDITOR ASSIGNED FOR THIS FACULTY, ONE MUST BE ASSIGNED') . '<br />';
  }
  elseif (in_array($user->uid, $hod_uid_array)) {
    $showform = FALSE;
    if     ($ca_approved_onebyone && $number_of_ca >= 1 && $locks->alllocked1 == 1) {
      $eduerpapprovalform->fieldtoapprovehoda = 'field_ca1locked_value';
      $eduerpapprovalform->gradestexthoda = t('First set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca1_value';
      $eduerpapprovalform->destfield = 'field_ca1forstudent_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 2 && $locks->alllocked2 == 1) {
      $eduerpapprovalform->fieldtoapprovehoda = 'field_ca2locked_value';
      $eduerpapprovalform->gradestexthoda = t('Second set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca2_value';
      $eduerpapprovalform->destfield = 'field_ca2forstudent_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 3 && $locks->alllocked3 == 1) {
      $eduerpapprovalform->fieldtoapprovehoda = 'field_ca3locked_value';
      $eduerpapprovalform->gradestexthoda = t('Third set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca3_value';
      $eduerpapprovalform->destfield = 'field_ca3forstudent_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 4 && $locks->alllocked4 == 1) {
      $eduerpapprovalform->fieldtoapprovehoda = 'field_ca4locked_value';
      $eduerpapprovalform->gradestexthoda = t('Fourth set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca4_value';
      $eduerpapprovalform->destfield = 'field_ca4forstudent_value';
      $showform = TRUE;
    }
    elseif ($locks->alllockede == 1) {
      $eduerpapprovalform->fieldtoapprovehoda = 'field_examscorelocked_value';
      $eduerpapprovalform->gradestexthoda = t('Final Exam Grades');
      $eduerpapprovalform->srcfield = 'NONE';
      $eduerpapprovalform->destfield = 'NONE';
      $showform = TRUE;
    }

    if ($showform) {
      if ($singlelecturer) {
        echo drupal_get_form('approve_grades_hod_form');
      }
      else {
        echo t('YOU MUST CHOOSE A SPECIFIC LOCATION ABOVE IF YOU WANT TO APPROVE GRADES. CHOICES ARE...') . '<br />';
        listlocations($coursecode, $session, $semesterwhere, $locationwhere);
      }
    }
  }

  // Do we want to show the Approval form for the Dean
  $dean_uid_array = explode(',', $dean_uid);
  if (in_array($user->uid, $dean_uid_array)) {
    $showform = FALSE;
    if     ($ca_approved_onebyone && $number_of_ca >= 1 && $locks->alllocked1 == 2) {
      $eduerpapprovalform->fieldtoapprovedean = 'field_ca1locked_value';
      $eduerpapprovalform->gradestextdean = t('First set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca1_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 2 && $locks->alllocked2 == 2) {
      $eduerpapprovalform->fieldtoapprovedean = 'field_ca2locked_value';
      $eduerpapprovalform->gradestextdean = t('Second set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca2_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 3 && $locks->alllocked3 == 2) {
      $eduerpapprovalform->fieldtoapprovedean = 'field_ca3locked_value';
      $eduerpapprovalform->gradestextdean = t('Third set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca3_value';
      $showform = TRUE;
    }
    elseif ($ca_approved_onebyone && $number_of_ca >= 4 && $locks->alllocked4 == 2) {
      $eduerpapprovalform->fieldtoapprovedean = 'field_ca4locked_value';
      $eduerpapprovalform->gradestextdean = t('Fourth set of Continuous Assessment Grades');
      $eduerpapprovalform->srcfield = 'field_ca4_value';
      $showform = TRUE;
    }
    elseif ($locks->alllockede == 2) {
      $eduerpapprovalform->fieldtoapprovedean = 'field_examscorelocked_value';
      $eduerpapprovalform->gradestextdean = t('Final Exam Grades');
      $eduerpapprovalform->srcfield = 'NONE';
      $showform = TRUE;
    }

    if ($showform) {
      if ($singlelecturer) {
        echo drupal_get_form('approve_grades_dean_form');
      }
      else {
        echo t('YOU MUST CHOOSE A SPECIFIC LOCATION ABOVE IF YOU WANT TO APPROVE GRADES. CHOICES ARE...') . '<br />';
        listlocations($coursecode, $session, $semesterwhere, $locationwhere);
      }
    }
  }
}


/**
 * Form to allow to allow Lecturer to approve grades (relevant locked fields will then become 1).
 *
 * @uses approve_grades_lecturer_form_validate()
 * @uses approve_grades_lecturer_form_submit()
 * @global stdClass $eduerpapprovalform already contains values needed for the form.
 */
function approve_grades_lecturer_form($form_state) {
  global $eduerpapprovalform;

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter a comment on the grades for the HOD.'),
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['course_url']     = array('#type' => 'value', '#value' => $eduerpapprovalform->course_url);
  $form['lecturer_uid']   = array('#type' => 'value', '#value' => $eduerpapprovalform->lecturer_uid);
  $form['lecturer_alternate_uid'] = array('#type' => 'value', '#value' => $eduerpapprovalform->lecturer_alternate_uid);
  $form['hod_uid']        = array('#type' => 'value', '#value' => $eduerpapprovalform->hod_uid);
  $form['coursecode']     = array('#type' => 'value', '#value' => $eduerpapprovalform->coursecode);
  $form['session']        = array('#type' => 'value', '#value' => $eduerpapprovalform->session);
  $form['semester']       = array('#type' => 'value', '#value' => $eduerpapprovalform->semester);
  $form['location']       = array('#type' => 'value', '#value' => $eduerpapprovalform->location);
  $form['number_of_ca']   = array('#type' => 'value', '#value' => $eduerpapprovalform->number_of_ca);
  $form['ca_approved_onebyone'] = array('#type' => 'value', '#value' => $eduerpapprovalform->ca_approved_onebyone);
  $form['fieldtoapprove'] = array('#type' => 'value', '#value' => $eduerpapprovalform->fieldtoapprove);
  $form['gradestext']     = array('#type' => 'value', '#value' => $eduerpapprovalform->gradestext);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Approve !gradestext.', array('!gradestext' => $eduerpapprovalform->gradestext)));

  return $form;
}


/**
 * validate hook for {@link approve_grades_lecturer_form()}
 */
function approve_grades_lecturer_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', t('You must enter a comment for the Head of Department!'));
  }
}


/**
 * submit hook for {@link approve_grades_lecturer_form()}
 *
 * <p>Relevant CA & Exam locked fields become 1.</p>
 * <p>Calculate GPA, cGPA and other data if exam scores are being entered.</p>
 * <p>Create an Approval Record.</p>
 * <p>Send e-mails to those that need to be notified.</p>
 * @uses findcourseparameters()
 */
function approve_grades_lecturer_form_submit($form, &$form_state) {
  global $user;
  global $base_url;

  $fieldtoapprove = $form_state['values']['fieldtoapprove'];
  $comment        = $form_state['values']['comment'];
  $course_url     = $form_state['values']['course_url'];
  $lecturer_uid   = $form_state['values']['lecturer_uid'];
  $lecturer_alternate_uid = $form_state['values']['lecturer_alternate_uid'];
  $hod_uid        = $form_state['values']['hod_uid'];
  $coursecode     = $form_state['values']['coursecode'];
  $session        = $form_state['values']['session'];
  $semester       = $form_state['values']['semester'];
  $location       = $form_state['values']['location'];
  $number_of_ca   = $form_state['values']['number_of_ca'];
  $ca_approved_onebyone = $form_state['values']['ca_approved_onebyone'];
  $gradestext     = $form_state['values']['gradestext'];

  if ($semester === 'All') {
    $semesterwhere    = '';
    $semesterwherea   = '';
    //$semesterwhereb   = '';
    $semesterwheregpa = '';
  }
  else {
    $semesterwhere    = 'AND ci.field_semester_name_value=' . (int)$semester;
    $semesterwherea   = 'AND cia.field_semester_name_value=' . (int)$semester;
    //$semesterwhereb   = 'AND cib.field_semester_name_value=' . (int)$semester;
    $semesterwheregpa = 'AND gpa.field_semester_name_gpa_value=' . (int)$semester;
  }

  if ($location === 'All') {
    $locationwhere  = '';
    $locationwherea = '';
    //$locationwhereb = '';
  }
  else {
    $locationwhere  = 'AND ci.field_location_value=' . (int)$location;
    $locationwherea = 'AND cia.field_location_value=' . (int)$location;
    //$locationwhereb = 'AND cib.field_location_value=' . (int)$location;
  }

  // Don't allow an exam score approved by the VC to be changed
  if ($fieldtoapprove === 'field_examscorelocked_value') $protectVC = 'AND sg.field_examscorelocked_value < 5';
  else $protectVC = '';

  if ($ca_approved_onebyone) {
    $setstatement = "SET sg.`{$fieldtoapprove}`='1'";
  }
  else { // Approve CAs along with exam
    $setstatement = "SET
      sg.`field_ca1locked_value`='1',
      sg.`field_ca2locked_value`='1',
      sg.`field_ca3locked_value`='1',
      sg.`field_ca4locked_value`='1',
      sg.`field_examscorelocked_value`='1'";
  }

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    $setstatement
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
      c.field_code_value='%s'
      $protectVC";
  db_query($sql, $session, $coursecode);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  if ($fieldtoapprove === 'field_examscorelocked_value') {

    // Find the Student Drupal IDs (these have been optimised out from subqueries in GPA & cGPA(2) UPDATES because MySQL is performing very very badly (thinking they are correlated)
    $sql = "
      SELECT GROUP_CONCAT(sga.field_mat_no_uid) AS ids
      FROM
        {content_type_student_grades} sga,
        {content_type_course_instance} cia,
        {content_type_course} ca
      WHERE
        sga.field_course_instance_nid=cia.nid AND
        cia.field_course_id_nid=ca.nid AND
        cia.field_sess_name_value='%s' $semesterwherea $locationwherea AND
        ca.field_code_value='%s'";
    $result = db_query($sql, $session, $coursecode);
    if ($row_ids = db_fetch_object($result)) {
      if (!empty($row_ids->ids)) {
        $ids = $row_ids->ids;
      }
      else {
        $ids = '-1';
      }
    }
    else {
      $ids = '-1';
    }

    // Set the GPA for all students in this view
    $sql = "UPDATE
      {content_type_student_gpa} gpa,
      (
        SELECT
          exams.field_mat_no_uid AS uid,
          MAX(exams.field_calc_type_value) AS calc_type,
          SUM(exams.gradepoint*exams.credit_load) AS gradepoints,
          MIN(exams.gradepoint) AS allpassed,
          SUM(exams.credit_load) AS totalload
        FROM (
          SELECT
            IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value) AS gradepoint,
            sg.field_mat_no_uid,
            sg.field_calc_type_value,
            sg.field_credit_load_sg_value AS credit_load,
            c.field_creditload_value AS old_credit_load
          FROM
            {content_type_student_grades} sg,
            {content_type_course_instance} ci,
            {content_type_course} c
          WHERE
            sg.field_mat_no_uid IN ($ids) AND
            sg.field_course_instance_nid=ci.nid AND
            sg.field_examscorelocked_value>0 AND
            sg.field_dropped_value=0 AND
            ci.field_course_id_nid=c.nid AND
            ci.field_sess_name_value='%s' $semesterwhere AND
            ci.field_repeat_value=0
          ) AS exams
        GROUP BY exams.field_mat_no_uid
      ) AS gpatoset
    SET
      gpa.field_gptotal_value=gpatoset.gradepoints,
      gpa.field_credit_load_completed_value=gpatoset.totalload,
      gpa.field_gpa_value=IF(gpatoset.calc_type=3,
        IF(gpatoset.allpassed=0, '-', 'Pass'),
        FORMAT(IF(gpatoset.totalload=0, 0, gpatoset.gradepoints/gpatoset.totalload), 2)
      )
    WHERE
      gpa.field_student_ref_gpa_uid=gpatoset.uid AND
      gpa.field_sess_name_gpa_value='%s' $semesterwheregpa";
    db_query($sql, $session, $session);

    // Set the cGPA for all students in this view
    // ... Finds the grade for the most recent sitting of each course
    // ... Sums them and saves result in the student_program found from the students's profile
    $sql = "UPDATE
      {content_type_student_program} sp,
      {node} nspro1,
      {content_type_student_profile} spro1,
      (
        SELECT
          exams.field_mat_no_uid AS uid,
          MAX(exams.field_calc_type_value) AS calc_type,
          SUM(exams.gradepoint*exams.credit_load) AS gradepoints,
          MIN(exams.gradepoint) AS allpassed,
          SUM(exams.credit_load) AS totalload
        FROM (
          SELECT DISTINCT
            IF(sg.field_gradepoint_value='-', 0, sg.field_gradepoint_value) AS gradepoint,
            sg.field_mat_no_uid,
            sg.field_calc_type_value,
            CONCAT(ci.field_sess_name_value, ci.field_semester_name_value, sg.nid) AS sess_sem,
            c.field_code_value,
            sg.field_credit_load_sg_value AS credit_load,
            c.field_creditload_value AS old_credit_load
          FROM
            {content_type_student_grades} sg,
            {content_type_course_instance} ci,
            {content_type_course} c,
            {program_course} pc,
            {node} nspro,
            {content_type_student_profile} spro
          WHERE
            sg.field_mat_no_uid IN ($ids) AND
            sg.field_course_instance_nid=ci.nid AND
            sg.field_examscorelocked_value>0 AND
            sg.field_dropped_value=0 AND
            ci.field_course_id_nid=c.nid AND
            ci.field_course_id_nid=pc.course_id AND
            pc.programme_id=spro.field_profile_first_choice_nid AND
            nspro.uid=sg.field_mat_no_uid AND
            nspro.type='student_profile' AND
            nspro.vid=spro.vid
          ) AS exams
        JOIN (
          SELECT
            sg0.field_mat_no_uid,
            MAX(CONCAT(ci0.field_sess_name_value, ci0.field_semester_name_value, sg0.nid)) AS sess_sem0,
            c0.field_code_value
          FROM
            {content_type_student_grades} sg0,
            {content_type_course_instance} ci0,
            {content_type_course} c0,
            {program_course} pc0,
            {node} nspro0,
            {content_type_student_profile} spro0
          WHERE
            sg0.field_mat_no_uid IN ($ids) AND
            sg0.field_course_instance_nid=ci0.nid AND
            sg0.field_examscorelocked_value>0 AND
            sg0.field_dropped_value=0 AND
            ci0.field_course_id_nid=c0.nid AND
            ci0.field_course_id_nid=pc0.course_id AND
            pc0.programme_id=spro0.field_profile_first_choice_nid AND
            nspro0.uid=sg0.field_mat_no_uid AND
            nspro0.type='student_profile' AND
            nspro0.vid=spro0.vid
          GROUP BY c0.field_code_value, sg0.field_mat_no_uid
          ) AS most_recent_exam
        ON
          exams.field_code_value=most_recent_exam.field_code_value AND
          exams.sess_sem=most_recent_exam.sess_sem0 AND
          exams.field_mat_no_uid=most_recent_exam.field_mat_no_uid
        GROUP BY exams.field_mat_no_uid
      ) AS cgpatoset
    SET
      sp.field_gptotal_sp_value=cgpatoset.gradepoints,
      sp.field_credit_load_completed_sp_value=cgpatoset.totalload,
      sp.field_cgpa_sp_value=IF(cgpatoset.calc_type=3,
        IF(cgpatoset.allpassed=0, '-', 'Pass'),
        FORMAT(IF(cgpatoset.totalload=0, 0, cgpatoset.gradepoints/cgpatoset.totalload), 2)
      )
    WHERE
      sp.field_student_ref_sp_uid=cgpatoset.uid AND
      sp.field_program_ref_sp_nid=spro1.field_profile_first_choice_nid AND
      nspro1.uid=cgpatoset.uid AND
      nspro1.type='student_profile' AND
      nspro1.vid=spro1.vid";
    db_query($sql);
    cache_clear_all('content:', content_cache_tablename(), TRUE);
  }

  list($level, $sem, $loc, $department, $college) = findcourseparameters($coursecode, $session, $semesterwhere, $locationwhere);

  $user_profile = new UserProfile($user->uid);

  $name = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $name = "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name";
  }

  $firsttime = TRUE;

  // Determine who gets notified when Lecturer (or equiv) submits grades
  $inroles = "'Head of Department', 'Department Grade Editor', 'Department Examination Officer', 'Dean of Faculty', 'Faculty Grade Editor', 'Faculty Examination Officer', 'University Grade Editor'";

  $sql = "SELECT
      d.field_college_id_nid AS college_id,
      c.field_department_nid_nid AS department_id
    FROM {content_type_department} d, {content_type_course} c
    WHERE
      d.nid=c.field_department_nid_nid AND
      c.field_code_value='%s'";
  $staffresult = db_query($sql, $coursecode);
  $staff = db_fetch_object($staffresult);

  $sql = "SELECT DISTINCT uid AS hod_uid
    FROM {eduerp_roles}
    WHERE (department_id=%d OR college_id=%d OR (department_id=0 AND college_id=0)) AND role IN ($inroles)";
  $hodresult = db_query($sql, $staff->department_id, $staff->college_id);
  while ($hod = db_fetch_object($hodresult)) {

    if (!empty($hod->hod_uid)) {
      $destination_user = user_load($hod->hod_uid);
      $user_profile = new UserProfile($hod->hod_uid);
    }
    else {
      $destination_user = NULL;
      $user_profile = NULL;
    }

    $subject = t('!gradestext for !coursecode Approved by !name', array('!gradestext' => $gradestext, '!coursecode' => $coursecode, '!name' => $name));

    $body = '';
    if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
      $middle = '';
      if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
      $body .= t('Dear !name', array('!name' => "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name")) . ",\n\n";
    }

    $body .= t('I have approved !gradestext for !coursecode', array('!gradestext' => $gradestext, '!coursecode' => $coursecode)) . "\n\n";
    $body .= t('URL') . ": $course_url\n";
    $body .= t('Department') . ": $department\n";
    $body .= t('Faculty') . ": $college\n";
    $body .= t('Level') . ": $level\n";
    $body .= t('Session') . ": $session\n";
    $body .= t('Semester') . ": $sem\n";
    $body .= t('Location') . ": $loc\n\n";
    $body .= t("Lecturer's comment") . "...\n";
    $body .= str_replace('<br />', "\n", $comment);
    $body .= "\n\n{$name}\n\n";

    if ($firsttime) {
      $node = new stdClass();
      $node->type                            = 'approval';
      $node->uid                             = 1;
      $node->status                          = 0;
      $node->promote                         = 0;
      $node->sticky                          = 0;
      $node->comment                         = 0;
      $node->title                           = $subject;
      $node->body                            = $comment;
      $node->field_url[0]['value']           = $course_url;
      $node->field_approver[0]['uid']        = $user->uid;
      $node->field_destination[0]['value']   = $hod_uid;
      $node->field_coursecode[0]['value']    = $coursecode;
      $node->field_programme[0]['value']     = '';
      $node->field_department1[0]['value']   = $department;
      $node->field_college1[0]['value']      = $college;
      $node->field_level1[0]['value']        = $level;
      $node->field_session1[0]['value']      = $session;
      $node->field_semester1[0]['value']     = $sem;
      $node->field_location1[0]['value']     = $loc;
      $node->field_what_approved[0]['value'] = $gradestext;
      $node->field_action[0]['value']        = 'Approved by Lecturer';
      node_save($node);

      $firsttime = FALSE;
    }

    if (!empty($destination_user)) {
      $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);
    }
  }

  drupal_set_message(t('Approval successfull'));
}


/**
 * Form to allow to allow HOD to unlock grades (relevant locked fields will then become 0).
 *
 * @uses unlock_grades_hod_form_validate()
 * @uses unlock_grades_hod_form_submit()
 * @global stdClass $eduerpapprovalform already contains values needed for the form.
 */
function unlock_grades_hod_form($form_state) {
  global $eduerpapprovalform;

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter a comment on the grades for the Lecturer.'),
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['course_url']   = array('#type' => 'value', '#value' => $eduerpapprovalform->course_url);
  $form['lecturer_uid'] = array('#type' => 'value', '#value' => $eduerpapprovalform->lecturer_uid);
  $form['lecturer_alternate_uid'] = array('#type' => 'value', '#value' => $eduerpapprovalform->lecturer_alternate_uid);
  $form['hod_uid']      = array('#type' => 'value', '#value' => $eduerpapprovalform->hod_uid);
  $form['coursecode']   = array('#type' => 'value', '#value' => $eduerpapprovalform->coursecode);
  $form['session']      = array('#type' => 'value', '#value' => $eduerpapprovalform->session);
  $form['semester']     = array('#type' => 'value', '#value' => $eduerpapprovalform->semester);
  $form['location']     = array('#type' => 'value', '#value' => $eduerpapprovalform->location);
  $form['number_of_ca'] = array('#type' => 'value', '#value' => $eduerpapprovalform->number_of_ca);
  $form['ca_approved_onebyone'] = array('#type' => 'value', '#value' => $eduerpapprovalform->ca_approved_onebyone);
  $form['fieldtoapprovehod'] = array('#type' => 'value', '#value' => $eduerpapprovalform->fieldtoapprovehod);
  $form['gradestexthod'] = array('#type' => 'value', '#value' => $eduerpapprovalform->gradestexthod);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Unlock the !gradestexthod for the lecturer to re-edit.', array('!gradestexthod' => $eduerpapprovalform->gradestexthod)));

  return $form;
}


/**
 * validate hook for {@link unlock_grades_hod_form()}
 */
function unlock_grades_hod_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', t('You must enter a comment for the Lecturer!'));
  }
}


/**
 * submit hook for {@link unlock_grades_hod_form()}
 *
 * <p>Relevant CA & Exam locked fields become 0.</p>
 * <p>Create an Approval Record.</p>
 * <p>Send notification e-mail to Lecturer.</p>
 * @uses findcourseparameters()
 */
function unlock_grades_hod_form_submit($form, &$form_state) {
  global $user;

  $fieldtoapprovehod = $form_state['values']['fieldtoapprovehod'];
  $comment           = $form_state['values']['comment'];
  $course_url        = $form_state['values']['course_url'];
  $lecturer_uid      = $form_state['values']['lecturer_uid'];
  $lecturer_alternate_uid = $form_state['values']['lecturer_alternate_uid'];
  $hod_uid           = $form_state['values']['hod_uid'];
  $coursecode        = $form_state['values']['coursecode'];
  $session           = $form_state['values']['session'];
  $semester          = $form_state['values']['semester'];
  $location          = $form_state['values']['location'];
  $number_of_ca      = $form_state['values']['number_of_ca'];
  $ca_approved_onebyone = $form_state['values']['ca_approved_onebyone'];
  $gradestexthod        = $form_state['values']['gradestexthod'];

  if ($semester === 'All') $semesterwhere = '';
  else $semesterwhere = 'AND ci.field_semester_name_value=' . (int)$semester;

  if ($location === 'All') $locationwhere = '';
  else $locationwhere = 'AND ci.field_location_value=' . (int)$location;

  // Don't allow an exam score approved by the VC to be changed
  if ($fieldtoapprovehod === 'field_examscorelocked_value') $protectVC = 'AND sg.field_examscorelocked_value < 5';
  else $protectVC = '';

  if ($ca_approved_onebyone) {
    $setstatement = "SET sg.`{$fieldtoapprovehod}`='0'";
  }
  else {
    $setstatement = "SET
      sg.`field_ca1locked_value`='0',
      sg.`field_ca2locked_value`='0',
      sg.`field_ca3locked_value`='0',
      sg.`field_ca4locked_value`='0',
      sg.`field_examscorelocked_value`='0'";
  }

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    $setstatement
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
      c.field_code_value='%s'
      $protectVC";
  db_query($sql, $session, $coursecode);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  list($level, $sem, $loc, $department, $college) = findcourseparameters($coursecode, $session, $semesterwhere, $locationwhere);

  $user_profile = new UserProfile($user->uid);

  $name = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $name = "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name";
  }

  if (!empty($lecturer_uid)) {
    $destination_user = user_load($lecturer_uid);
    $user_profile = new UserProfile($lecturer_uid);
  }
  else {
    $destination_user = NULL;
    $user_profile = NULL;
  }

  $subject = t('!gradestexthod for !coursecode Unlocked by !name', array('!gradestexthod' => $gradestexthod, '!coursecode' => $coursecode, '!name' => $name));

  $body = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $body .= t('Dear !name', array('!name' => "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name")) . ",\n\n";
  }

  $body .= t('I have unlocked !gradestexthod for !coursecode', array('!gradestexthod' => $gradestexthod, '!coursecode' => $coursecode)) . "\n\n";
  $body .= t('URL') . ": $course_url\n";
  $body .= t('Department') . ": $department\n";
  $body .= t('Faculty') . ": $college\n";
  $body .= t('Level') . ": $level\n";
  $body .= t('Session') . ": $session\n";
  $body .= t('Semester') . ": $sem\n";
  $body .= t('Location') . ": $loc\n\n";
  $body .= t("Head of Department's comment") . "...\n";
  $body .= str_replace('<br />', "\n", $comment);
  $body .= "\n\n{$name}\n";

  $node = new stdClass();
  $node->type                            = 'approval';
  $node->uid                             = 1;
  $node->status                          = 0;
  $node->promote                         = 0;
  $node->sticky                          = 0;
  $node->comment                         = 0;
  $node->title                           = $subject;
  $node->body                            = $comment;
  $node->field_url[0]['value']           = $course_url;
  $node->field_approver[0]['uid']        = $user->uid;
  $node->field_destination[0]['value']   = $lecturer_uid;
  $node->field_coursecode[0]['value']    = $coursecode;
  $node->field_programme[0]['value']     = '';
  $node->field_department1[0]['value']   = $department;
  $node->field_college1[0]['value']      = $college;
  $node->field_level1[0]['value']        = $level;
  $node->field_session1[0]['value']      = $session;
  $node->field_semester1[0]['value']     = $sem;
  $node->field_location1[0]['value']     = $loc;
  $node->field_what_approved[0]['value'] = $gradestexthod;
  $node->field_action[0]['value']        = 'Unlocked by HOD';
  node_save($node);

  if (!empty($destination_user)) {
    $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
    $message['subject'] = $subject;
    $message['body'] = $body;
    drupal_mail_send($message);
  }

  if (!empty($lecturer_alternate_uid)) {
    $destination_user = user_load($lecturer_alternate_uid);
    $user_profile = new UserProfile($lecturer_alternate_uid);
  }
  else {
    $destination_user = NULL;
    $user_profile = NULL;
  }

  $subject = t('!gradestexthod for !coursecode Unlocked by !name', array('!gradestexthod' => $gradestexthod, '!coursecode' => $coursecode, '!name' => $name));

  $body = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $body .= t('Dear !name', array('!name' => "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name")) . ",\n\n";
  }

  $body .= t('I have unlocked !gradestexthod for !coursecode', array('!gradestexthod' => $gradestexthod, '!coursecode' => $coursecode)) . "\n\n";
  $body .= t('URL') . ": $course_url\n";
  $body .= t('Department') . ": $department\n";
  $body .= t('Faculty') . ": $college\n";
  $body .= t('Level') . ": $level\n";
  $body .= t('Session') . ": $session\n";
  $body .= t('Semester') . ": $sem\n";
  $body .= t('Location') . ": $loc\n\n";
  $body .= t("Head of Department's comment") . "...\n";
  $body .= str_replace('<br />', "\n", $comment);
  $body .= "\n\n{$name}\n";

  if (!empty($destination_user)) {
    $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
    $message['subject'] = $subject;
    $message['body'] = $body;
    drupal_mail_send($message);
  }

  drupal_set_message(t('Unlocking successfull'));
}


/**
 * Form to allow to allow HOD to approve grades (relevant locked fields will then become 2).
 *
 * @uses approve_grades_hod_form_validate()
 * @uses approve_grades_hod_form_submit()
 * @global stdClass $eduerpapprovalform already contains values needed for the form.
 */
function approve_grades_hod_form($form_state) {
  global $eduerpapprovalform;

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter a comment on the grades for the Dean.'),
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['course_url']     = array('#type' => 'value', '#value' => $eduerpapprovalform->course_url);
  $form['hod_uid']        = array('#type' => 'value', '#value' => $eduerpapprovalform->hod_uid);
  $form['dean_uid']       = array('#type' => 'value', '#value' => $eduerpapprovalform->dean_uid);
  $form['coursecode']     = array('#type' => 'value', '#value' => $eduerpapprovalform->coursecode);
  $form['session']        = array('#type' => 'value', '#value' => $eduerpapprovalform->session);
  $form['semester']       = array('#type' => 'value', '#value' => $eduerpapprovalform->semester);
  $form['location']       = array('#type' => 'value', '#value' => $eduerpapprovalform->location);
  $form['number_of_ca']   = array('#type' => 'value', '#value' => $eduerpapprovalform->number_of_ca);
  $form['ca_approved_onebyone'] = array('#type' => 'value', '#value' => $eduerpapprovalform->ca_approved_onebyone);
  $form['fieldtoapprovehoda']   = array('#type' => 'value', '#value' => $eduerpapprovalform->fieldtoapprovehoda);
  $form['gradestexthoda']       = array('#type' => 'value', '#value' => $eduerpapprovalform->gradestexthoda);
  $form['srcfield']             = array('#type' => 'value', '#value' => $eduerpapprovalform->srcfield);
  $form['destfield']            = array('#type' => 'value', '#value' => $eduerpapprovalform->destfield);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Approve !gradestexthoda.', array('!gradestexthoda' => $eduerpapprovalform->gradestexthoda)));

  return $form;
}


/**
 * validate hook for {@link approve_grades_hod_form()}
 */
function approve_grades_hod_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', t('You must enter a comment for the Dean!'));
  }
}


/**
 * submit hook for {@link approve_grades_hod_form()}
 *
 * <p>Relevant CA & Exam locked fields become 2.</p>
 * <p>If this is a CA approval, set the student visible CA scores to the values set by the lecturer.</p>
 * <p>Create an Approval Record.</p>
 * <p>Send e-mails to those that need to be notified.</p>
 * <p>Send e-mails to Students for CA only.</p>
 * @uses findcourseparameters()
 */
function approve_grades_hod_form_submit($form, &$form_state) {
  global $user;
  global $base_url;

  $fieldtoapprovehoda = $form_state['values']['fieldtoapprovehoda'];
  $comment        = $form_state['values']['comment'];
  $course_url     = $form_state['values']['course_url'];
  $hod_uid        = $form_state['values']['hod_uid'];
  $dean_uid       = $form_state['values']['dean_uid'];
  $coursecode     = $form_state['values']['coursecode'];
  $session        = $form_state['values']['session'];
  $semester       = $form_state['values']['semester'];
  $location       = $form_state['values']['location'];
  $number_of_ca   = $form_state['values']['number_of_ca'];
  $ca_approved_onebyone = $form_state['values']['ca_approved_onebyone'];
  $gradestexthoda = $form_state['values']['gradestexthoda'];
  $srcfield       = $form_state['values']['srcfield'];
  $destfield      = $form_state['values']['destfield'];

  if ($semester === 'All') $semesterwhere = '';
  else $semesterwhere = 'AND ci.field_semester_name_value=' . (int)$semester;

  if ($location === 'All') $locationwhere = '';
  else $locationwhere = 'AND ci.field_location_value=' . (int)$location;

  // Don't allow an exam score approved by the VC to be changed
  if ($fieldtoapprovehoda === 'field_examscorelocked_value') $protectVC = 'AND sg.field_examscorelocked_value < 5';
  else $protectVC = '';

  if ($ca_approved_onebyone) {
    $setstatement = "SET sg.`{$fieldtoapprovehoda}`='2'";
  }
  else { // Approve CAs along with exam
    $setstatement = "SET
      sg.`field_ca1locked_value`='2',
      sg.`field_ca2locked_value`='2',
      sg.`field_ca3locked_value`='2',
      sg.`field_ca4locked_value`='2',
      sg.`field_examscorelocked_value`='2'";
  }

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    $setstatement
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
      c.field_code_value='%s'
      $protectVC";
  db_query($sql, $session, $coursecode);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  if ($srcfield != 'NONE') {
    // Make the CAs visible to students
    $setstatement = "SET sg.`{$destfield}`=sg.`{$srcfield}`";
    $sql = "UPDATE {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
      $setstatement
      WHERE
        sg.field_course_instance_nid=ci.nid AND
        sg.field_dropped_value=0 AND
        ci.field_course_id_nid=c.nid AND
        ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
        c.field_code_value='%s'";
    db_query($sql, $session, $coursecode);
    cache_clear_all('content:', content_cache_tablename(), TRUE);
  }

  list($level, $sem, $loc, $department, $college) = findcourseparameters($coursecode, $session, $semesterwhere, $locationwhere);

  $user_profile = new UserProfile($user->uid);

  $name = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $name = "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name";
  }

  $firsttime = TRUE;

  // Determine who gets notified when HOD (or equiv) submits Grade approval form
  $inroles = "'Dean of Faculty', 'Faculty Grade Editor', 'Faculty Examination Officer', 'University Grade Editor'";

  $sql = "SELECT
      d.field_college_id_nid AS college_id,
      c.field_department_nid_nid AS department_id
    FROM {content_type_department} d, {content_type_course} c
    WHERE
      d.nid=c.field_department_nid_nid AND
      c.field_code_value='%s'";
  $staffresult = db_query($sql, $coursecode);
  $staff = db_fetch_object($staffresult);

  $sql = "SELECT DISTINCT uid AS dean_uid
    FROM {eduerp_roles}
    WHERE (department_id=%d OR college_id=%d OR (department_id=0 AND college_id=0)) AND role IN ($inroles)";
  $hodresult = db_query($sql, $staff->department_id, $staff->college_id);
  while ($hod = db_fetch_object($hodresult)) {

    if (!empty($hod->dean_uid)) {
      $destination_user = user_load($hod->dean_uid);
      $user_profile = new UserProfile($hod->dean_uid);
    }
    else {
      $destination_user = NULL;
      $user_profile = NULL;
    }

    $subject = t('!gradestexthoda for !coursecode Approved by !name', array('!gradestexthoda' => $gradestexthoda, '!coursecode' => $coursecode, '!name' => $name));

    $body = '';
    if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
      $middle = '';
      if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
      $body .= t('Dear !name', array('!name' => "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name")) . ",\n\n";
    }

    $body .= t('I have approved !gradestexthoda for !coursecode', array('!gradestexthoda' => $gradestexthoda, '!coursecode' => $coursecode)) . "\n\n";
    $body .= t('URL') . ": $course_url\n";
    $body .= t('Department') . ": $department\n";
    $body .= t('Faculty') . ": $college\n";
    $body .= t('Level') . ": $level\n";
    $body .= t('Session') . ": $session\n";
    $body .= t('Semester') . ": $sem\n";
    $body .= t('Location') . ": $loc\n\n";
    $body .= t("HOD's comment") . "...\n";
    $body .= str_replace('<br />', "\n", $comment);
    $body .= "\n\n{$name}\n\n";

    if ($firsttime) {
      $node = new stdClass();
      $node->type                            = 'approval';
      $node->uid                             = 1;
      $node->status                          = 0;
      $node->promote                         = 0;
      $node->sticky                          = 0;
      $node->comment                         = 0;
      $node->title                           = $subject;
      $node->body                            = $comment;
      $node->field_url[0]['value']           = $course_url;
      $node->field_approver[0]['uid']        = $user->uid;
      $node->field_destination[0]['value']   = $dean_uid;
      $node->field_coursecode[0]['value']    = $coursecode;
      $node->field_programme[0]['value']     = '';
      $node->field_department1[0]['value']   = $department;
      $node->field_college1[0]['value']      = $college;
      $node->field_level1[0]['value']        = $level;
      $node->field_session1[0]['value']      = $session;
      $node->field_semester1[0]['value']     = $sem;
      $node->field_location1[0]['value']     = $loc;
      $node->field_what_approved[0]['value'] = $gradestexthoda;
      $node->field_action[0]['value']        = 'Approved by HOD';
      node_save($node);

      $firsttime = FALSE;
    }

    if (!empty($destination_user)) {
      $message = drupal_mail('grading', 'approval', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);
    }
  }

  // Send e-mails to Students for CA only
  if ($srcfield != 'NONE') {
    $sql = "SELECT sg.field_mat_no_uid FROM {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
      WHERE
        sg.field_course_instance_nid=ci.nid AND
        sg.field_dropped_value=0 AND
        ci.field_course_id_nid=c.nid AND
        ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
        c.field_code_value='%s'";
    $studentresult = db_query($sql, $session, $coursecode);

    while ($student = db_fetch_object($studentresult)) {
      $student_uid = $student->field_mat_no_uid;

      $destination_user = user_load($student_uid);
      $user_profile = new UserProfile($student_uid);

      $subject = t('!gradestexthoda for !coursecode Approved by !name', array('!gradestexthoda' => $gradestexthoda, '!coursecode' => $coursecode, '!name' => $name));

      $body = '';
      if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
        $middle = '';
        if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
        $body .= t('Dear !name', array('!name' => "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name")) . ",\n\n";
      }
      $body .= t('I have approved !gradestexthoda for !coursecode', array('!gradestexthoda' => $gradestexthoda, '!coursecode' => $coursecode)) . "\n\n";
      $body .= t('To view your grades go to') . " $base_url/student\n";
      $body .= t('You will have to login first.') . "\n\n";
      $body .= "{$name}\n";

      $message = drupal_mail('grading', 'notifystudent', $destination_user->mail, language_default(), array(), $user->mail, FALSE);
      $message['subject'] = $subject;
      $message['body'] = $body;
      drupal_mail_send($message);

      db_query("INSERT INTO cron_notification (approver_uid, student_uid, gradestext, programme, instruction) VALUES (%d, %d, '%s', '%s', %d)",
        $user->uid, $student_uid, $gradestexthoda, $coursecode, 1);
    }
  }

  drupal_set_message(t('Approval successfull'));
}


/**
 * Form to allow to allow Dean to approve grades (relevant locked fields will then become 3).
 *
 * @uses approve_grades_dean_form_validate()
 * @uses approve_grades_dean_form_submit()
 * @global stdClass $eduerpapprovalform already contains values needed for the form.
 */
function approve_grades_dean_form($form_state) {
  global $eduerpapprovalform;

  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter a comment on the grades for the Record.'),
    '#cols' => 80,
    '#rows' => 5,
    '#required' => TRUE
  );

  $form['course_url']     = array('#type' => 'value', '#value' => $eduerpapprovalform->course_url);
  $form['dean_uid']       = array('#type' => 'value', '#value' => $eduerpapprovalform->dean_uid);
  $form['coursecode']     = array('#type' => 'value', '#value' => $eduerpapprovalform->coursecode);
  $form['session']        = array('#type' => 'value', '#value' => $eduerpapprovalform->session);
  $form['semester']       = array('#type' => 'value', '#value' => $eduerpapprovalform->semester);
  $form['location']       = array('#type' => 'value', '#value' => $eduerpapprovalform->location);
  $form['number_of_ca']   = array('#type' => 'value', '#value' => $eduerpapprovalform->number_of_ca);
  $form['ca_approved_onebyone'] = array('#type' => 'value', '#value' => $eduerpapprovalform->ca_approved_onebyone);
  $form['fieldtoapprovedean']   = array('#type' => 'value', '#value' => $eduerpapprovalform->fieldtoapprovedean);
  $form['gradestextdean']       = array('#type' => 'value', '#value' => $eduerpapprovalform->gradestextdean);
  $form['srcfield']             = array('#type' => 'value', '#value' => $eduerpapprovalform->srcfield);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Approve !gradestextdean.', array('!gradestextdean' => $eduerpapprovalform->gradestextdean)));

  return $form;
}


/**
 * validate hook for {@link approve_grades_dean_form()}
 */
function approve_grades_dean_form_validate($form, &$form_state) {
  if (empty($form_state['values']['comment'])) {
    form_set_error('comment', t('You must enter a comment for the Record!'));
  }
}


/**
 * submit hook for {@link approve_grades_dean_form()}
 *
 * <p>Relevant CA & Exam locked fields become 3 (or 5 if this is for a CA only... Fully Approved).</p>
 * <p>Create an Approval Record.</p>
 * @uses findcourseparameters()
 */
function approve_grades_dean_form_submit($form, &$form_state) {
  global $user;
  global $base_url;

  $fieldtoapprovedean = $form_state['values']['fieldtoapprovedean'];
  $comment            = $form_state['values']['comment'];
  $course_url         = $form_state['values']['course_url'];
  $dean_uid           = $form_state['values']['dean_uid'];
  $coursecode         = $form_state['values']['coursecode'];
  $session            = $form_state['values']['session'];
  $semester           = $form_state['values']['semester'];
  $location           = $form_state['values']['location'];
  $number_of_ca       = $form_state['values']['number_of_ca'];
  $ca_approved_onebyone = $form_state['values']['ca_approved_onebyone'];
  $gradestextdean     = $form_state['values']['gradestextdean'];
  $srcfield           = $form_state['values']['srcfield'];

  if ($semester === 'All') $semesterwhere = '';
  else $semesterwhere = 'AND ci.field_semester_name_value=' . (int)$semester;

  if ($location === 'All') $locationwhere = '';
  else $locationwhere = 'AND ci.field_location_value=' . (int)$location;

  // Don't allow an exam score approved by the VC to be changed
  if ($fieldtoapprovedean === 'field_examscorelocked_value') $protectVC = 'AND sg.field_examscorelocked_value < 5';
  else $protectVC = '';

  if ($ca_approved_onebyone) {
    if ($srcfield != 'NONE') {
      $setstatement = "SET sg.`{$fieldtoapprovedean}`='5'"; // This is a CA so make it fully approved
    }
    else {
      $setstatement = "SET sg.`{$fieldtoapprovedean}`='3'";
    }
  }
  else { // Approve CAs along with exam
    $setstatement = "SET
      sg.`field_ca1locked_value`='3',
      sg.`field_ca2locked_value`='3',
      sg.`field_ca3locked_value`='3',
      sg.`field_ca4locked_value`='3',
      sg.`field_examscorelocked_value`='3'";
  }

  $sql = "UPDATE {content_type_student_grades} sg, {content_type_course_instance} ci, {content_type_course} c
    $setstatement
    WHERE
      sg.field_course_instance_nid=ci.nid AND
      sg.field_dropped_value=0 AND
      ci.field_course_id_nid=c.nid AND
      ci.field_sess_name_value='%s' $semesterwhere $locationwhere AND
      c.field_code_value='%s'
      $protectVC";
  db_query($sql, $session, $coursecode);
  cache_clear_all('content:', content_cache_tablename(), TRUE);

  list($level, $sem, $loc, $department, $college) = findcourseparameters($coursecode, $session, $semesterwhere, $locationwhere);

  $user_profile = new UserProfile($user->uid);

  $name = '';
  if (!empty($user_profile->profile_first_name) && !empty($user_profile->profile_last_name)) {
    $middle = '';
    if (!empty($user_profile->profile_middle_name)) $middle = $user_profile->profile_middle_name . ' ';
    $name = "$user_profile->profile_first_name {$middle}$user_profile->profile_last_name";
  }

  $subject = t('!gradestextdean for !coursecode Approved by !name', array('!gradestextdean' => $gradestextdean, '!coursecode' => $coursecode, '!name' => $name));

  $node = new stdClass();
  $node->type                            = 'approval';
  $node->uid                             = 1;
  $node->status                          = 0;
  $node->promote                         = 0;
  $node->sticky                          = 0;
  $node->comment                         = 0;
  $node->title                           = $subject;
  $node->body                            = $comment;
  $node->field_url[0]['value']           = $course_url;
  $node->field_approver[0]['uid']        = $user->uid;
  $node->field_coursecode[0]['value']    = $coursecode;
  $node->field_programme[0]['value']     = '';
  $node->field_department1[0]['value']   = $department;
  $node->field_college1[0]['value']      = $college;
  $node->field_level1[0]['value']        = $level;
  $node->field_session1[0]['value']      = $session;
  $node->field_semester1[0]['value']     = $sem;
  $node->field_location1[0]['value']     = $loc;
  $node->field_what_approved[0]['value'] = $gradestextdean;
  $node->field_action[0]['value']        = 'Approved by Dean';
  node_save($node);

  drupal_set_message(t('Approval successfull'));
}


/**
 * Find parameters for Course selected in the View
 *
 * @return array of parameters
 */
function findcourseparameters($coursecode, $session, $semesterwhere, $locationwhere) {
  $sql = "SELECT
      c.field_level_value AS level,
      ci.field_semester_name_value AS sem,
      ci.field_location_value AS loc,
      d.field_department_name_value AS department,
      co.field_college_name_value AS college
    FROM {content_type_course_instance} ci, {content_type_course} c, {content_type_department} d, {content_type_college} co
    WHERE
      c.field_code_value='%s' AND
      c.nid=ci.field_course_id_nid AND
      ci.field_sess_name_value='%s'
      $semesterwhere $locationwhere AND
      c.field_department_nid_nid=d.nid AND
      d.field_college_id_nid=co.nid
    LIMIT 1";
  $collegeresult = db_query($sql, $coursecode, $session);
  if ($collegerow = db_fetch_object($collegeresult)) {
    return array($collegerow->level, $collegerow->sem, $collegerow->loc, $collegerow->department, $collegerow->college);
  }
  else {
    return array('', '', '', '', '');
  }
}


/**
 * Print all locations for Course selected in the View
 */
function listlocations($coursecode, $session, $semesterwhere, $locationwhere) {
  $sql = "SELECT DISTINCT
      ci.field_location_value AS location,
      ci.field_lecturer_uid AS lecturer_uid
    FROM {content_type_course} c, {content_type_course_instance} ci
    WHERE
      c.field_code_value='%s' AND
      c.nid=ci.field_course_id_nid AND
      ci.field_sess_name_value='%s'
      $semesterwhere $locationwhere";
  $locationresult = db_query($sql, $coursecode, $session);
  while ($locationdetail = db_fetch_object($locationresult)) {
    $user_profile = new UserProfile($locationdetail->lecturer_uid);

    echo t('Location') . ": $locationdetail->location (" . t('Lecturer') . ": $user_profile->profile_first_name ";
    if (!empty($user_profile->profile_middle_name)) echo $user_profile->profile_middle_name . ' ';
    echo "$user_profile->profile_last_name)<br />";
  }
}
?>